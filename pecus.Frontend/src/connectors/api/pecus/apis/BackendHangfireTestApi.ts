/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface ApiBackendHangfireTestBatchPostRequest {
    count?: number;
}

export interface ApiBackendHangfireTestContinuationPostRequest {
    parentMessage?: string;
    childMessage?: string;
}

export interface ApiBackendHangfireTestDelayedPostRequest {
    message?: string;
    delaySeconds?: number;
}

export interface ApiBackendHangfireTestErrorPostRequest {
    errorMessage?: string;
}

export interface ApiBackendHangfireTestFailedJobIdDeleteRequest {
    jobId: string;
}

export interface ApiBackendHangfireTestFireAndForgetPostRequest {
    message?: string;
}

export interface ApiBackendHangfireTestLongRunningPostRequest {
    durationSeconds?: number;
}

export interface ApiBackendHangfireTestRecurringPostRequest {
    message?: string;
    cronExpression?: string;
}

export interface ApiBackendHangfireTestRecurringRecurringJobIdDeleteRequest {
    recurringJobId: string;
}

/**
 * 
 */
export class BackendHangfireTestApi extends runtime.BaseAPI {

    /**
     * バッチジョブのテスト
     */
    async apiBackendHangfireTestBatchPostRaw(requestParameters: ApiBackendHangfireTestBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/hangfire-test/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * バッチジョブのテスト
     */
    async apiBackendHangfireTestBatchPost(requestParameters: ApiBackendHangfireTestBatchPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBackendHangfireTestBatchPostRaw(requestParameters, initOverrides);
    }

    /**
     * 継続ジョブのテスト
     */
    async apiBackendHangfireTestContinuationPostRaw(requestParameters: ApiBackendHangfireTestContinuationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['parentMessage'] != null) {
            queryParameters['parentMessage'] = requestParameters['parentMessage'];
        }

        if (requestParameters['childMessage'] != null) {
            queryParameters['childMessage'] = requestParameters['childMessage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/hangfire-test/continuation`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 継続ジョブのテスト
     */
    async apiBackendHangfireTestContinuationPost(requestParameters: ApiBackendHangfireTestContinuationPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBackendHangfireTestContinuationPostRaw(requestParameters, initOverrides);
    }

    /**
     * 遅延ジョブのテスト
     */
    async apiBackendHangfireTestDelayedPostRaw(requestParameters: ApiBackendHangfireTestDelayedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['message'] != null) {
            queryParameters['message'] = requestParameters['message'];
        }

        if (requestParameters['delaySeconds'] != null) {
            queryParameters['delaySeconds'] = requestParameters['delaySeconds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/hangfire-test/delayed`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 遅延ジョブのテスト
     */
    async apiBackendHangfireTestDelayedPost(requestParameters: ApiBackendHangfireTestDelayedPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBackendHangfireTestDelayedPostRaw(requestParameters, initOverrides);
    }

    /**
     * エラーを発生させるジョブのテスト
     */
    async apiBackendHangfireTestErrorPostRaw(requestParameters: ApiBackendHangfireTestErrorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['errorMessage'] != null) {
            queryParameters['errorMessage'] = requestParameters['errorMessage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/hangfire-test/error`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * エラーを発生させるジョブのテスト
     */
    async apiBackendHangfireTestErrorPost(requestParameters: ApiBackendHangfireTestErrorPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBackendHangfireTestErrorPostRaw(requestParameters, initOverrides);
    }

    /**
     * 失敗したジョブを削除
     */
    async apiBackendHangfireTestFailedJobIdDeleteRaw(requestParameters: ApiBackendHangfireTestFailedJobIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling apiBackendHangfireTestFailedJobIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/hangfire-test/failed/{jobId}`;
        urlPath = urlPath.replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 失敗したジョブを削除
     */
    async apiBackendHangfireTestFailedJobIdDelete(requestParameters: ApiBackendHangfireTestFailedJobIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBackendHangfireTestFailedJobIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Fire-and-forget ジョブのテスト
     */
    async apiBackendHangfireTestFireAndForgetPostRaw(requestParameters: ApiBackendHangfireTestFireAndForgetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['message'] != null) {
            queryParameters['message'] = requestParameters['message'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/hangfire-test/fire-and-forget`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fire-and-forget ジョブのテスト
     */
    async apiBackendHangfireTestFireAndForgetPost(requestParameters: ApiBackendHangfireTestFireAndForgetPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBackendHangfireTestFireAndForgetPostRaw(requestParameters, initOverrides);
    }

    /**
     * 長時間実行ジョブのテスト
     */
    async apiBackendHangfireTestLongRunningPostRaw(requestParameters: ApiBackendHangfireTestLongRunningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['durationSeconds'] != null) {
            queryParameters['durationSeconds'] = requestParameters['durationSeconds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/hangfire-test/long-running`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 長時間実行ジョブのテスト
     */
    async apiBackendHangfireTestLongRunningPost(requestParameters: ApiBackendHangfireTestLongRunningPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBackendHangfireTestLongRunningPostRaw(requestParameters, initOverrides);
    }

    /**
     * 繰り返しジョブのテスト（Cron式）
     */
    async apiBackendHangfireTestRecurringPostRaw(requestParameters: ApiBackendHangfireTestRecurringPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['message'] != null) {
            queryParameters['message'] = requestParameters['message'];
        }

        if (requestParameters['cronExpression'] != null) {
            queryParameters['cronExpression'] = requestParameters['cronExpression'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/hangfire-test/recurring`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 繰り返しジョブのテスト（Cron式）
     */
    async apiBackendHangfireTestRecurringPost(requestParameters: ApiBackendHangfireTestRecurringPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBackendHangfireTestRecurringPostRaw(requestParameters, initOverrides);
    }

    /**
     * 繰り返しジョブの削除
     */
    async apiBackendHangfireTestRecurringRecurringJobIdDeleteRaw(requestParameters: ApiBackendHangfireTestRecurringRecurringJobIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['recurringJobId'] == null) {
            throw new runtime.RequiredError(
                'recurringJobId',
                'Required parameter "recurringJobId" was null or undefined when calling apiBackendHangfireTestRecurringRecurringJobIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/hangfire-test/recurring/{recurringJobId}`;
        urlPath = urlPath.replace(`{${"recurringJobId"}}`, encodeURIComponent(String(requestParameters['recurringJobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 繰り返しジョブの削除
     */
    async apiBackendHangfireTestRecurringRecurringJobIdDelete(requestParameters: ApiBackendHangfireTestRecurringRecurringJobIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBackendHangfireTestRecurringRecurringJobIdDeleteRaw(requestParameters, initOverrides);
    }

}
