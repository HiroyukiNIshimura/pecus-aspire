/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  OrganizationDetailResponse,
  OrganizationListItemResponsePagedResponse,
  OrganizationResponse,
  SetActiveStatusRequest,
  SuccessResponse,
  UpdateOrganizationRequest,
  UserListItemResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    OrganizationDetailResponseFromJSON,
    OrganizationDetailResponseToJSON,
    OrganizationListItemResponsePagedResponseFromJSON,
    OrganizationListItemResponsePagedResponseToJSON,
    OrganizationResponseFromJSON,
    OrganizationResponseToJSON,
    SetActiveStatusRequestFromJSON,
    SetActiveStatusRequestToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UpdateOrganizationRequestFromJSON,
    UpdateOrganizationRequestToJSON,
    UserListItemResponseFromJSON,
    UserListItemResponseToJSON,
} from '../models/index';

export interface ApiBackendOrganizationsGetRequest {
    page?: number;
    activeOnly?: boolean;
}

export interface ApiBackendOrganizationsIdActiveStatusPutRequest {
    id: number;
    setActiveStatusRequest?: SetActiveStatusRequest;
}

export interface ApiBackendOrganizationsIdDeleteRequest {
    id: number;
}

export interface ApiBackendOrganizationsIdGetRequest {
    id: number;
}

export interface ApiBackendOrganizationsIdPutRequest {
    id: number;
    updateOrganizationRequest?: UpdateOrganizationRequest;
}

export interface ApiBackendOrganizationsIdUsersGetRequest {
    id: number;
}

/**
 * 
 */
export class BackendOrganizationApi extends runtime.BaseAPI {

    /**
     * 組織一覧取得（ページネーション対応）
     */
    async apiBackendOrganizationsGetRaw(requestParameters: ApiBackendOrganizationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationListItemResponsePagedResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['activeOnly'] != null) {
            queryParameters['ActiveOnly'] = requestParameters['activeOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/organizations`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationListItemResponsePagedResponseFromJSON(jsonValue));
    }

    /**
     * 組織一覧取得（ページネーション対応）
     */
    async apiBackendOrganizationsGet(requestParameters: ApiBackendOrganizationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationListItemResponsePagedResponse> {
        const response = await this.apiBackendOrganizationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 組織のアクティブ状態を設定
     */
    async apiBackendOrganizationsIdActiveStatusPutRaw(requestParameters: ApiBackendOrganizationsIdActiveStatusPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBackendOrganizationsIdActiveStatusPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/organizations/{id}/active-status`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetActiveStatusRequestToJSON(requestParameters['setActiveStatusRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * 組織のアクティブ状態を設定
     */
    async apiBackendOrganizationsIdActiveStatusPut(requestParameters: ApiBackendOrganizationsIdActiveStatusPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiBackendOrganizationsIdActiveStatusPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 組織削除
     */
    async apiBackendOrganizationsIdDeleteRaw(requestParameters: ApiBackendOrganizationsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBackendOrganizationsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/organizations/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * 組織削除
     */
    async apiBackendOrganizationsIdDelete(requestParameters: ApiBackendOrganizationsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiBackendOrganizationsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 組織情報取得
     */
    async apiBackendOrganizationsIdGetRaw(requestParameters: ApiBackendOrganizationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationDetailResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBackendOrganizationsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/organizations/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationDetailResponseFromJSON(jsonValue));
    }

    /**
     * 組織情報取得
     */
    async apiBackendOrganizationsIdGet(requestParameters: ApiBackendOrganizationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationDetailResponse> {
        const response = await this.apiBackendOrganizationsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 組織更新
     */
    async apiBackendOrganizationsIdPutRaw(requestParameters: ApiBackendOrganizationsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBackendOrganizationsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/organizations/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationRequestToJSON(requestParameters['updateOrganizationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationResponseFromJSON(jsonValue));
    }

    /**
     * 組織更新
     */
    async apiBackendOrganizationsIdPut(requestParameters: ApiBackendOrganizationsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationResponse> {
        const response = await this.apiBackendOrganizationsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 組織の所属ユーザー取得
     */
    async apiBackendOrganizationsIdUsersGetRaw(requestParameters: ApiBackendOrganizationsIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserListItemResponse>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBackendOrganizationsIdUsersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/organizations/{id}/users`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserListItemResponseFromJSON));
    }

    /**
     * 組織の所属ユーザー取得
     */
    async apiBackendOrganizationsIdUsersGet(requestParameters: ApiBackendOrganizationsIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserListItemResponse>> {
        const response = await this.apiBackendOrganizationsIdUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
