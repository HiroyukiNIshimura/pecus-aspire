/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RefreshRequest,
} from '../models/index';
import {
    RefreshRequestFromJSON,
    RefreshRequestToJSON,
} from '../models/index';

export interface ApiEntranceLogoutPostRequest {
    refreshRequest?: RefreshRequest;
}

export interface ApiEntranceRefreshPostRequest {
    refreshRequest?: RefreshRequest;
}

/**
 * 
 */
export class RefreshApi extends runtime.BaseAPI {

    /**
     * 現在のアクセストークンとリフレッシュトークンを無効化します。
     * ログアウト（トークン無効化）
     */
    async apiEntranceLogoutPostRaw(requestParameters: ApiEntranceLogoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/entrance/logout`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshRequestToJSON(requestParameters['refreshRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 現在のアクセストークンとリフレッシュトークンを無効化します。
     * ログアウト（トークン無効化）
     */
    async apiEntranceLogoutPost(requestParameters: ApiEntranceLogoutPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiEntranceLogoutPostRaw(requestParameters, initOverrides);
    }

    /**
     * 有効なリフレッシュトークンを使用して、新しいアクセストークンとリフレッシュトークンを取得します。
     * リフレッシュトークンによるアクセストークン再発行
     */
    async apiEntranceRefreshPostRaw(requestParameters: ApiEntranceRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/entrance/refresh`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshRequestToJSON(requestParameters['refreshRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 有効なリフレッシュトークンを使用して、新しいアクセストークンとリフレッシュトークンを取得します。
     * リフレッシュトークンによるアクセストークン再発行
     */
    async apiEntranceRefreshPost(requestParameters: ApiEntranceRefreshPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiEntranceRefreshPostRaw(requestParameters, initOverrides);
    }

}
