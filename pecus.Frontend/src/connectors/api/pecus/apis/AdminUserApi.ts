/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserWithoutPasswordRequest,
  ErrorResponse,
  SetUserActiveStatusRequest,
  SetUserSkillsRequest,
  SuccessResponse,
  UserResponse,
  UserResponsePagedResponse,
} from '../models/index';
import {
    CreateUserWithoutPasswordRequestFromJSON,
    CreateUserWithoutPasswordRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SetUserActiveStatusRequestFromJSON,
    SetUserActiveStatusRequestToJSON,
    SetUserSkillsRequestFromJSON,
    SetUserSkillsRequestToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UserResponseFromJSON,
    UserResponseToJSON,
    UserResponsePagedResponseFromJSON,
    UserResponsePagedResponseToJSON,
} from '../models/index';

export interface ApiAdminUsersCreateWithoutPasswordPostRequest {
    createUserWithoutPasswordRequest?: CreateUserWithoutPasswordRequest;
}

export interface ApiAdminUsersGetRequest {
    page?: number;
    pageSize?: number;
    activeOnly?: boolean;
}

export interface ApiAdminUsersIdActiveStatusPutRequest {
    id: number;
    setUserActiveStatusRequest?: SetUserActiveStatusRequest;
}

export interface ApiAdminUsersIdDeleteRequest {
    id: number;
}

export interface ApiAdminUsersIdRequestPasswordResetPostRequest {
    id: number;
}

export interface ApiAdminUsersIdSkillsPutRequest {
    id: number;
    setUserSkillsRequest?: SetUserSkillsRequest;
}

/**
 * 
 */
export class AdminUserApi extends runtime.BaseAPI {

    /**
     * ユーザー名とメールアドレスのみでユーザーを作成します。パスワードは後で設定されます。  作成されたユーザーにはパスワード設定用のトークンが発行され、メールで通知されます。
     * パスワードなしでユーザーを作成
     */
    async apiAdminUsersCreateWithoutPasswordPostRaw(requestParameters: ApiAdminUsersCreateWithoutPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/users/create-without-password`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserWithoutPasswordRequestToJSON(requestParameters['createUserWithoutPasswordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     * ユーザー名とメールアドレスのみでユーザーを作成します。パスワードは後で設定されます。  作成されたユーザーにはパスワード設定用のトークンが発行され、メールで通知されます。
     * パスワードなしでユーザーを作成
     */
    async apiAdminUsersCreateWithoutPasswordPost(requestParameters: ApiAdminUsersCreateWithoutPasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.apiAdminUsersCreateWithoutPasswordPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ログインユーザーの組織に所属するユーザーの一覧をページングで取得します。
     * 組織内のユーザー一覧を取得（ページング）
     */
    async apiAdminUsersGetRaw(requestParameters: ApiAdminUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponsePagedResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['activeOnly'] != null) {
            queryParameters['ActiveOnly'] = requestParameters['activeOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/users`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponsePagedResponseFromJSON(jsonValue));
    }

    /**
     * ログインユーザーの組織に所属するユーザーの一覧をページングで取得します。
     * 組織内のユーザー一覧を取得（ページング）
     */
    async apiAdminUsersGet(requestParameters: ApiAdminUsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponsePagedResponse> {
        const response = await this.apiAdminUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定したユーザーのアクティブ状態を設定します。組織内のユーザーのみ操作可能です。
     * ユーザーのアクティブ状態を設定
     */
    async apiAdminUsersIdActiveStatusPutRaw(requestParameters: ApiAdminUsersIdActiveStatusPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAdminUsersIdActiveStatusPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/users/{id}/active-status`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetUserActiveStatusRequestToJSON(requestParameters['setUserActiveStatusRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * 指定したユーザーのアクティブ状態を設定します。組織内のユーザーのみ操作可能です。
     * ユーザーのアクティブ状態を設定
     */
    async apiAdminUsersIdActiveStatusPut(requestParameters: ApiAdminUsersIdActiveStatusPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiAdminUsersIdActiveStatusPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定したユーザーを削除します。組織内のユーザーのみ操作可能です。
     * ユーザーを削除
     */
    async apiAdminUsersIdDeleteRaw(requestParameters: ApiAdminUsersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAdminUsersIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/users/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * 指定したユーザーを削除します。組織内のユーザーのみ操作可能です。
     * ユーザーを削除
     */
    async apiAdminUsersIdDelete(requestParameters: ApiAdminUsersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiAdminUsersIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定したユーザーのパスワードリセットをリクエストします。組織内のユーザーのみ操作可能です。  パスワードリセット用のメールがユーザーに送信されます。
     * ユーザーのパスワードリセットをリクエスト
     */
    async apiAdminUsersIdRequestPasswordResetPostRaw(requestParameters: ApiAdminUsersIdRequestPasswordResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAdminUsersIdRequestPasswordResetPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/users/{id}/request-password-reset`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * 指定したユーザーのパスワードリセットをリクエストします。組織内のユーザーのみ操作可能です。  パスワードリセット用のメールがユーザーに送信されます。
     * ユーザーのパスワードリセットをリクエスト
     */
    async apiAdminUsersIdRequestPasswordResetPost(requestParameters: ApiAdminUsersIdRequestPasswordResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiAdminUsersIdRequestPasswordResetPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定したユーザーのスキルを設定します（洗い替え）。組織内のユーザーのみ操作可能です。
     * ユーザーのスキルを設定
     */
    async apiAdminUsersIdSkillsPutRaw(requestParameters: ApiAdminUsersIdSkillsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAdminUsersIdSkillsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/users/{id}/skills`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetUserSkillsRequestToJSON(requestParameters['setUserSkillsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * 指定したユーザーのスキルを設定します（洗い替え）。組織内のユーザーのみ操作可能です。
     * ユーザーのスキルを設定
     */
    async apiAdminUsersIdSkillsPut(requestParameters: ApiAdminUsersIdSkillsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiAdminUsersIdSkillsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
