/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SetTagsToItemRequest,
  WorkspaceItemResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SetTagsToItemRequestFromJSON,
    SetTagsToItemRequestToJSON,
    WorkspaceItemResponseFromJSON,
    WorkspaceItemResponseToJSON,
} from '../models/index';

export interface ApiWorkspacesWorkspaceIdItemsItemIdTagsPutRequest {
    workspaceId: number;
    itemId: number;
    setTagsToItemRequest?: SetTagsToItemRequest;
}

/**
 * 
 */
export class WorkspaceItemTagApi extends runtime.BaseAPI {

    /**
     * ワークスペースアイテムのタグを一括設定
     */
    async apiWorkspacesWorkspaceIdItemsItemIdTagsPutRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceItemResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdTagsPut().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdTagsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/workspaces/{workspaceId}/items/{itemId}/tags`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetTagsToItemRequestToJSON(requestParameters['setTagsToItemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceItemResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースアイテムのタグを一括設定
     */
    async apiWorkspacesWorkspaceIdItemsItemIdTagsPut(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceItemResponse> {
        const response = await this.apiWorkspacesWorkspaceIdItemsItemIdTagsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
