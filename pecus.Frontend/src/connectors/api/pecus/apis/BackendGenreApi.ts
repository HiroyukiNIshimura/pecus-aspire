/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateGenreRequest,
  ErrorResponse,
  GenreDetailResponse,
  GenreListItemResponsePagedResponse,
  GenreResponse,
  SetActiveStatusRequest,
  SuccessResponse,
  UpdateGenreRequest,
} from '../models/index';
import {
    CreateGenreRequestFromJSON,
    CreateGenreRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GenreDetailResponseFromJSON,
    GenreDetailResponseToJSON,
    GenreListItemResponsePagedResponseFromJSON,
    GenreListItemResponsePagedResponseToJSON,
    GenreResponseFromJSON,
    GenreResponseToJSON,
    SetActiveStatusRequestFromJSON,
    SetActiveStatusRequestToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UpdateGenreRequestFromJSON,
    UpdateGenreRequestToJSON,
} from '../models/index';

export interface ApiBackendGenresGetRequest {
    page?: number;
    activeOnly?: boolean;
}

export interface ApiBackendGenresIdActiveStatusPutRequest {
    id: number;
    setActiveStatusRequest?: SetActiveStatusRequest;
}

export interface ApiBackendGenresIdDeleteRequest {
    id: number;
}

export interface ApiBackendGenresIdGetRequest {
    id: number;
}

export interface ApiBackendGenresIdPutRequest {
    id: number;
    updateGenreRequest?: UpdateGenreRequest;
}

export interface ApiBackendGenresPostRequest {
    createGenreRequest?: CreateGenreRequest;
}

/**
 * 
 */
export class BackendGenreApi extends runtime.BaseAPI {

    /**
     * ジャンル一覧を取得
     */
    async apiBackendGenresGetRaw(requestParameters: ApiBackendGenresGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenreListItemResponsePagedResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['activeOnly'] != null) {
            queryParameters['ActiveOnly'] = requestParameters['activeOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/genres`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenreListItemResponsePagedResponseFromJSON(jsonValue));
    }

    /**
     * ジャンル一覧を取得
     */
    async apiBackendGenresGet(requestParameters: ApiBackendGenresGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenreListItemResponsePagedResponse> {
        const response = await this.apiBackendGenresGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ジャンルのアクティブ状態を設定
     */
    async apiBackendGenresIdActiveStatusPutRaw(requestParameters: ApiBackendGenresIdActiveStatusPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBackendGenresIdActiveStatusPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/genres/{id}/active-status`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetActiveStatusRequestToJSON(requestParameters['setActiveStatusRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * ジャンルのアクティブ状態を設定
     */
    async apiBackendGenresIdActiveStatusPut(requestParameters: ApiBackendGenresIdActiveStatusPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiBackendGenresIdActiveStatusPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ジャンルを削除
     */
    async apiBackendGenresIdDeleteRaw(requestParameters: ApiBackendGenresIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBackendGenresIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/genres/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * ジャンルを削除
     */
    async apiBackendGenresIdDelete(requestParameters: ApiBackendGenresIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiBackendGenresIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ジャンル詳細を取得
     */
    async apiBackendGenresIdGetRaw(requestParameters: ApiBackendGenresIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenreDetailResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBackendGenresIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/genres/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenreDetailResponseFromJSON(jsonValue));
    }

    /**
     * ジャンル詳細を取得
     */
    async apiBackendGenresIdGet(requestParameters: ApiBackendGenresIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenreDetailResponse> {
        const response = await this.apiBackendGenresIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ジャンルを更新
     */
    async apiBackendGenresIdPutRaw(requestParameters: ApiBackendGenresIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenreResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBackendGenresIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/genres/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGenreRequestToJSON(requestParameters['updateGenreRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenreResponseFromJSON(jsonValue));
    }

    /**
     * ジャンルを更新
     */
    async apiBackendGenresIdPut(requestParameters: ApiBackendGenresIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenreResponse> {
        const response = await this.apiBackendGenresIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ジャンルを作成
     */
    async apiBackendGenresPostRaw(requestParameters: ApiBackendGenresPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenreResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/genres`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGenreRequestToJSON(requestParameters['createGenreRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenreResponseFromJSON(jsonValue));
    }

    /**
     * ジャンルを作成
     */
    async apiBackendGenresPost(requestParameters: ApiBackendGenresPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenreResponse> {
        const response = await this.apiBackendGenresPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
