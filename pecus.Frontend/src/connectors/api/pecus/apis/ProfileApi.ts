/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UpdateEmailRequest,
  UpdateProfileRequest,
} from '../models/index';
import {
    UpdateEmailRequestFromJSON,
    UpdateEmailRequestToJSON,
    UpdateProfileRequestFromJSON,
    UpdateProfileRequestToJSON,
} from '../models/index';

export interface ApiProfileEmailPatchRequest {
    updateEmailRequest?: UpdateEmailRequest;
}

export interface ApiProfilePutRequest {
    updateProfileRequest?: UpdateProfileRequest;
}

/**
 * 
 */
export class ProfileApi extends runtime.BaseAPI {

    /**
     * メールアドレスを変更
     */
    async apiProfileEmailPatchRaw(requestParameters: ApiProfileEmailPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/profile/email`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEmailRequestToJSON(requestParameters['updateEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * メールアドレスを変更
     */
    async apiProfileEmailPatch(requestParameters: ApiProfileEmailPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProfileEmailPatchRaw(requestParameters, initOverrides);
    }

    /**
     * 自分のプロフィール情報を取得
     */
    async apiProfileGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/profile`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 自分のプロフィール情報を取得
     */
    async apiProfileGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProfileGetRaw(initOverrides);
    }

    /**
     * 自分のプロフィール情報を更新
     */
    async apiProfilePutRaw(requestParameters: ApiProfilePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/profile`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProfileRequestToJSON(requestParameters['updateProfileRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 自分のプロフィール情報を更新
     */
    async apiProfilePut(requestParameters: ApiProfilePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProfilePutRaw(requestParameters, initOverrides);
    }

}
