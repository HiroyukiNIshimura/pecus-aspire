/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  WorkspaceItemDetailResponsePagedResponse,
  WorkspaceItemResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    WorkspaceItemDetailResponsePagedResponseFromJSON,
    WorkspaceItemDetailResponsePagedResponseToJSON,
    WorkspaceItemResponseFromJSON,
    WorkspaceItemResponseToJSON,
} from '../models/index';

export interface ApiUsersMePinnedItemsGetRequest {
    page?: number;
}

export interface ApiWorkspacesWorkspaceIdItemsItemIdPinDeleteRequest {
    workspaceId: number;
    itemId: number;
}

export interface ApiWorkspacesWorkspaceIdItemsItemIdPinPostRequest {
    workspaceId: number;
    itemId: number;
}

/**
 * 
 */
export class WorkspaceItemPinApi extends runtime.BaseAPI {

    /**
     * ログインユーザーがPINしたアイテム一覧を取得
     */
    async apiUsersMePinnedItemsGetRaw(requestParameters: ApiUsersMePinnedItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceItemDetailResponsePagedResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/me/pinned-items`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceItemDetailResponsePagedResponseFromJSON(jsonValue));
    }

    /**
     * ログインユーザーがPINしたアイテム一覧を取得
     */
    async apiUsersMePinnedItemsGet(requestParameters: ApiUsersMePinnedItemsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceItemDetailResponsePagedResponse> {
        const response = await this.apiUsersMePinnedItemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペースアイテムからPINを削除
     */
    async apiWorkspacesWorkspaceIdItemsItemIdPinDeleteRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdPinDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceItemResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdPinDelete().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdPinDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/workspaces/{workspaceId}/items/{itemId}/pin`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceItemResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースアイテムからPINを削除
     */
    async apiWorkspacesWorkspaceIdItemsItemIdPinDelete(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdPinDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceItemResponse> {
        const response = await this.apiWorkspacesWorkspaceIdItemsItemIdPinDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペースアイテムにPINを追加
     */
    async apiWorkspacesWorkspaceIdItemsItemIdPinPostRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdPinPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceItemResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdPinPost().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdPinPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/workspaces/{workspaceId}/items/{itemId}/pin`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceItemResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースアイテムにPINを追加
     */
    async apiWorkspacesWorkspaceIdItemsItemIdPinPost(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdPinPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceItemResponse> {
        const response = await this.apiWorkspacesWorkspaceIdItemsItemIdPinPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
