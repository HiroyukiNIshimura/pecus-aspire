/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  FileUploadResponse,
  ProblemDetails,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    FileUploadResponseFromJSON,
    FileUploadResponseToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface ApiFilesFileTypeResourceIdPostRequest {
    fileType: string;
    resourceId: number;
    file?: Blob;
}

/**
 * 
 */
export class FileUploadApi extends runtime.BaseAPI {

    /**
     * ファイルをアップロード
     */
    async apiFilesFileTypeResourceIdPostRaw(requestParameters: ApiFilesFileTypeResourceIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileUploadResponse>> {
        if (requestParameters['fileType'] == null) {
            throw new runtime.RequiredError(
                'fileType',
                'Required parameter "fileType" was null or undefined when calling apiFilesFileTypeResourceIdPost().'
            );
        }

        if (requestParameters['resourceId'] == null) {
            throw new runtime.RequiredError(
                'resourceId',
                'Required parameter "resourceId" was null or undefined when calling apiFilesFileTypeResourceIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }


        let urlPath = `/api/files/{fileType}/{resourceId}`;
        urlPath = urlPath.replace(`{${"fileType"}}`, encodeURIComponent(String(requestParameters['fileType'])));
        urlPath = urlPath.replace(`{${"resourceId"}}`, encodeURIComponent(String(requestParameters['resourceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileUploadResponseFromJSON(jsonValue));
    }

    /**
     * ファイルをアップロード
     */
    async apiFilesFileTypeResourceIdPost(requestParameters: ApiFilesFileTypeResourceIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileUploadResponse> {
        const response = await this.apiFilesFileTypeResourceIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
