/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  RequestPasswordResetRequest,
  ResetPasswordRequest,
  SetUserPasswordRequest,
  SuccessResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    RequestPasswordResetRequestFromJSON,
    RequestPasswordResetRequestToJSON,
    ResetPasswordRequestFromJSON,
    ResetPasswordRequestToJSON,
    SetUserPasswordRequestFromJSON,
    SetUserPasswordRequestToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface ApiEntrancePasswordRequestResetPostRequest {
    requestPasswordResetRequest?: RequestPasswordResetRequest;
}

export interface ApiEntrancePasswordResetPostRequest {
    resetPasswordRequest?: ResetPasswordRequest;
}

export interface ApiEntrancePasswordSetPostRequest {
    setUserPasswordRequest?: SetUserPasswordRequest;
}

/**
 * 
 */
export class EntrancePasswordApi extends runtime.BaseAPI {

    /**
     * メールアドレスを入力してパスワードリセットをリクエストします。  パスワードリセット用のメールが送信されます。
     * パスワードリセットをリクエスト
     */
    async apiEntrancePasswordRequestResetPostRaw(requestParameters: ApiEntrancePasswordRequestResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/entrance/password/request-reset`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestPasswordResetRequestToJSON(requestParameters['requestPasswordResetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * メールアドレスを入力してパスワードリセットをリクエストします。  パスワードリセット用のメールが送信されます。
     * パスワードリセットをリクエスト
     */
    async apiEntrancePasswordRequestResetPost(requestParameters: ApiEntrancePasswordRequestResetPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiEntrancePasswordRequestResetPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * メールで送信されたトークンを使ってパスワードをリセットします。  トークンは24時間有効です。
     * パスワードをリセット
     */
    async apiEntrancePasswordResetPostRaw(requestParameters: ApiEntrancePasswordResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/entrance/password/reset`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordRequestToJSON(requestParameters['resetPasswordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * メールで送信されたトークンを使ってパスワードをリセットします。  トークンは24時間有効です。
     * パスワードをリセット
     */
    async apiEntrancePasswordResetPost(requestParameters: ApiEntrancePasswordResetPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiEntrancePasswordResetPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * メールで送信されたトークンを使ってパスワードを設定します。  トークンは24時間有効です。
     * /// パスワードを設定
     */
    async apiEntrancePasswordSetPostRaw(requestParameters: ApiEntrancePasswordSetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/entrance/password/set`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetUserPasswordRequestToJSON(requestParameters['setUserPasswordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * メールで送信されたトークンを使ってパスワードを設定します。  トークンは24時間有効です。
     * /// パスワードを設定
     */
    async apiEntrancePasswordSetPost(requestParameters: ApiEntrancePasswordSetPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiEntrancePasswordSetPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
