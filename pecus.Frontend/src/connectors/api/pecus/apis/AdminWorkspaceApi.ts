/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddUserToWorkspaceRequest,
  CreateWorkspaceRequest,
  ErrorResponse,
  SuccessResponse,
  UpdateWorkspaceRequest,
  WorkspaceDetailResponse,
  WorkspaceListItemResponsePagedResponse,
  WorkspaceResponse,
  WorkspaceUserDetailResponsePagedResponse,
  WorkspaceUserResponse,
} from '../models/index';
import {
    AddUserToWorkspaceRequestFromJSON,
    AddUserToWorkspaceRequestToJSON,
    CreateWorkspaceRequestFromJSON,
    CreateWorkspaceRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UpdateWorkspaceRequestFromJSON,
    UpdateWorkspaceRequestToJSON,
    WorkspaceDetailResponseFromJSON,
    WorkspaceDetailResponseToJSON,
    WorkspaceListItemResponsePagedResponseFromJSON,
    WorkspaceListItemResponsePagedResponseToJSON,
    WorkspaceResponseFromJSON,
    WorkspaceResponseToJSON,
    WorkspaceUserDetailResponsePagedResponseFromJSON,
    WorkspaceUserDetailResponsePagedResponseToJSON,
    WorkspaceUserResponseFromJSON,
    WorkspaceUserResponseToJSON,
} from '../models/index';

export interface ApiAdminWorkspacesGetRequest {
    page?: number;
    activeOnly?: boolean;
}

export interface ApiAdminWorkspacesIdActivatePatchRequest {
    id: number;
}

export interface ApiAdminWorkspacesIdDeactivatePatchRequest {
    id: number;
}

export interface ApiAdminWorkspacesIdDeleteRequest {
    id: number;
}

export interface ApiAdminWorkspacesIdGetRequest {
    id: number;
}

export interface ApiAdminWorkspacesIdPutRequest {
    id: number;
    updateWorkspaceRequest?: UpdateWorkspaceRequest;
}

export interface ApiAdminWorkspacesIdUsersGetRequest {
    id: number;
    page?: number;
    activeOnly?: boolean;
}

export interface ApiAdminWorkspacesIdUsersPostRequest {
    id: number;
    addUserToWorkspaceRequest?: AddUserToWorkspaceRequest;
}

export interface ApiAdminWorkspacesIdUsersUserIdDeleteRequest {
    id: number;
    userId: number;
}

export interface ApiAdminWorkspacesPostRequest {
    createWorkspaceRequest?: CreateWorkspaceRequest;
}

/**
 * 
 */
export class AdminWorkspaceApi extends runtime.BaseAPI {

    /**
     * ワークスペース一覧取得（ページネーション）
     */
    async apiAdminWorkspacesGetRaw(requestParameters: ApiAdminWorkspacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceListItemResponsePagedResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['activeOnly'] != null) {
            queryParameters['ActiveOnly'] = requestParameters['activeOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/workspaces`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceListItemResponsePagedResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペース一覧取得（ページネーション）
     */
    async apiAdminWorkspacesGet(requestParameters: ApiAdminWorkspacesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceListItemResponsePagedResponse> {
        const response = await this.apiAdminWorkspacesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペース有効化
     */
    async apiAdminWorkspacesIdActivatePatchRaw(requestParameters: ApiAdminWorkspacesIdActivatePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAdminWorkspacesIdActivatePatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/workspaces/{id}/activate`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペース有効化
     */
    async apiAdminWorkspacesIdActivatePatch(requestParameters: ApiAdminWorkspacesIdActivatePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiAdminWorkspacesIdActivatePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペース無効化
     */
    async apiAdminWorkspacesIdDeactivatePatchRaw(requestParameters: ApiAdminWorkspacesIdDeactivatePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAdminWorkspacesIdDeactivatePatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/workspaces/{id}/deactivate`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペース無効化
     */
    async apiAdminWorkspacesIdDeactivatePatch(requestParameters: ApiAdminWorkspacesIdDeactivatePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiAdminWorkspacesIdDeactivatePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペース削除
     */
    async apiAdminWorkspacesIdDeleteRaw(requestParameters: ApiAdminWorkspacesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAdminWorkspacesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/workspaces/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペース削除
     */
    async apiAdminWorkspacesIdDelete(requestParameters: ApiAdminWorkspacesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiAdminWorkspacesIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペース情報取得
     */
    async apiAdminWorkspacesIdGetRaw(requestParameters: ApiAdminWorkspacesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceDetailResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAdminWorkspacesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/workspaces/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceDetailResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペース情報取得
     */
    async apiAdminWorkspacesIdGet(requestParameters: ApiAdminWorkspacesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceDetailResponse> {
        const response = await this.apiAdminWorkspacesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペース更新
     */
    async apiAdminWorkspacesIdPutRaw(requestParameters: ApiAdminWorkspacesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAdminWorkspacesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/workspaces/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWorkspaceRequestToJSON(requestParameters['updateWorkspaceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペース更新
     */
    async apiAdminWorkspacesIdPut(requestParameters: ApiAdminWorkspacesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceResponse> {
        const response = await this.apiAdminWorkspacesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペースのメンバー一覧取得（ページネーション）
     */
    async apiAdminWorkspacesIdUsersGetRaw(requestParameters: ApiAdminWorkspacesIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceUserDetailResponsePagedResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAdminWorkspacesIdUsersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['activeOnly'] != null) {
            queryParameters['ActiveOnly'] = requestParameters['activeOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/workspaces/{id}/users`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceUserDetailResponsePagedResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースのメンバー一覧取得（ページネーション）
     */
    async apiAdminWorkspacesIdUsersGet(requestParameters: ApiAdminWorkspacesIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceUserDetailResponsePagedResponse> {
        const response = await this.apiAdminWorkspacesIdUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペースにユーザーを参加させる
     */
    async apiAdminWorkspacesIdUsersPostRaw(requestParameters: ApiAdminWorkspacesIdUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceUserResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAdminWorkspacesIdUsersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/workspaces/{id}/users`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddUserToWorkspaceRequestToJSON(requestParameters['addUserToWorkspaceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceUserResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースにユーザーを参加させる
     */
    async apiAdminWorkspacesIdUsersPost(requestParameters: ApiAdminWorkspacesIdUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceUserResponse> {
        const response = await this.apiAdminWorkspacesIdUsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペースからユーザーを削除
     */
    async apiAdminWorkspacesIdUsersUserIdDeleteRaw(requestParameters: ApiAdminWorkspacesIdUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAdminWorkspacesIdUsersUserIdDelete().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiAdminWorkspacesIdUsersUserIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/workspaces/{id}/users/{userId}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースからユーザーを削除
     */
    async apiAdminWorkspacesIdUsersUserIdDelete(requestParameters: ApiAdminWorkspacesIdUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiAdminWorkspacesIdUsersUserIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペース登録
     */
    async apiAdminWorkspacesPostRaw(requestParameters: ApiAdminWorkspacesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/admin/workspaces`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWorkspaceRequestToJSON(requestParameters['createWorkspaceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペース登録
     */
    async apiAdminWorkspacesPost(requestParameters: ApiAdminWorkspacesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceResponse> {
        const response = await this.apiAdminWorkspacesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
