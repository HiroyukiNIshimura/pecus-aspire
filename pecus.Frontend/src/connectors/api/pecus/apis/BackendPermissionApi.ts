/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePermissionRequest,
  ErrorResponse,
  PermissionDetailResponse,
  PermissionListItemResponse,
  PermissionResponse,
  SuccessResponse,
} from '../models/index';
import {
    CreatePermissionRequestFromJSON,
    CreatePermissionRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PermissionDetailResponseFromJSON,
    PermissionDetailResponseToJSON,
    PermissionListItemResponseFromJSON,
    PermissionListItemResponseToJSON,
    PermissionResponseFromJSON,
    PermissionResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface ApiBackendPermissionsCategoryCategoryGetRequest {
    category: string;
}

export interface ApiBackendPermissionsIdDeleteRequest {
    id: number;
}

export interface ApiBackendPermissionsIdGetRequest {
    id: number;
}

export interface ApiBackendPermissionsPostRequest {
    createPermissionRequest?: CreatePermissionRequest;
}

/**
 * 
 */
export class BackendPermissionApi extends runtime.BaseAPI {

    /**
     * カテゴリで権限取得
     */
    async apiBackendPermissionsCategoryCategoryGetRaw(requestParameters: ApiBackendPermissionsCategoryCategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PermissionListItemResponse>>> {
        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling apiBackendPermissionsCategoryCategoryGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/permissions/category/{category}`;
        urlPath = urlPath.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PermissionListItemResponseFromJSON));
    }

    /**
     * カテゴリで権限取得
     */
    async apiBackendPermissionsCategoryCategoryGet(requestParameters: ApiBackendPermissionsCategoryCategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PermissionListItemResponse>> {
        const response = await this.apiBackendPermissionsCategoryCategoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 全権限取得
     */
    async apiBackendPermissionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PermissionListItemResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/permissions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PermissionListItemResponseFromJSON));
    }

    /**
     * 全権限取得
     */
    async apiBackendPermissionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PermissionListItemResponse>> {
        const response = await this.apiBackendPermissionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 権限削除
     */
    async apiBackendPermissionsIdDeleteRaw(requestParameters: ApiBackendPermissionsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBackendPermissionsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/permissions/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * 権限削除
     */
    async apiBackendPermissionsIdDelete(requestParameters: ApiBackendPermissionsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiBackendPermissionsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 権限取得
     */
    async apiBackendPermissionsIdGetRaw(requestParameters: ApiBackendPermissionsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionDetailResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBackendPermissionsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/permissions/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionDetailResponseFromJSON(jsonValue));
    }

    /**
     * 権限取得
     */
    async apiBackendPermissionsIdGet(requestParameters: ApiBackendPermissionsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionDetailResponse> {
        const response = await this.apiBackendPermissionsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 権限作成
     */
    async apiBackendPermissionsPostRaw(requestParameters: ApiBackendPermissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/permissions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePermissionRequestToJSON(requestParameters['createPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionResponseFromJSON(jsonValue));
    }

    /**
     * 権限作成
     */
    async apiBackendPermissionsPost(requestParameters: ApiBackendPermissionsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionResponse> {
        const response = await this.apiBackendPermissionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
