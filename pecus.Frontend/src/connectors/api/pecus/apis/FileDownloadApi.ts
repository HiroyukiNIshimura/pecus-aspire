/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
} from '../models/index';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface ApiDownloadsFileTypeResourceIdFileNameGetRequest {
    fileType: string;
    resourceId: number;
    fileName: string;
}

/**
 * 
 */
export class FileDownloadApi extends runtime.BaseAPI {

    /**
     * アイコンファイルを取得（画像を返す）
     */
    async apiDownloadsFileTypeResourceIdFileNameGetRaw(requestParameters: ApiDownloadsFileTypeResourceIdFileNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['fileType'] == null) {
            throw new runtime.RequiredError(
                'fileType',
                'Required parameter "fileType" was null or undefined when calling apiDownloadsFileTypeResourceIdFileNameGet().'
            );
        }

        if (requestParameters['resourceId'] == null) {
            throw new runtime.RequiredError(
                'resourceId',
                'Required parameter "resourceId" was null or undefined when calling apiDownloadsFileTypeResourceIdFileNameGet().'
            );
        }

        if (requestParameters['fileName'] == null) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter "fileName" was null or undefined when calling apiDownloadsFileTypeResourceIdFileNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/downloads/{fileType}/{resourceId}/{fileName}`;
        urlPath = urlPath.replace(`{${"fileType"}}`, encodeURIComponent(String(requestParameters['fileType'])));
        urlPath = urlPath.replace(`{${"resourceId"}}`, encodeURIComponent(String(requestParameters['resourceId'])));
        urlPath = urlPath.replace(`{${"fileName"}}`, encodeURIComponent(String(requestParameters['fileName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * アイコンファイルを取得（画像を返す）
     */
    async apiDownloadsFileTypeResourceIdFileNameGet(requestParameters: ApiDownloadsFileTypeResourceIdFileNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDownloadsFileTypeResourceIdFileNameGetRaw(requestParameters, initOverrides);
    }

}
