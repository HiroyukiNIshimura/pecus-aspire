/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateWorkspaceItemRequest,
  ErrorResponse,
  SuccessResponse,
  UpdateWorkspaceItemRequest,
  UpdateWorkspaceItemStatusRequest,
  WorkspaceItemDetailResponse,
  WorkspaceItemDetailResponsePagedResponse,
  WorkspaceItemResponse,
} from '../models/index';
import {
    CreateWorkspaceItemRequestFromJSON,
    CreateWorkspaceItemRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UpdateWorkspaceItemRequestFromJSON,
    UpdateWorkspaceItemRequestToJSON,
    UpdateWorkspaceItemStatusRequestFromJSON,
    UpdateWorkspaceItemStatusRequestToJSON,
    WorkspaceItemDetailResponseFromJSON,
    WorkspaceItemDetailResponseToJSON,
    WorkspaceItemDetailResponsePagedResponseFromJSON,
    WorkspaceItemDetailResponsePagedResponseToJSON,
    WorkspaceItemResponseFromJSON,
    WorkspaceItemResponseToJSON,
} from '../models/index';

export interface ApiWorkspacesWorkspaceIdItemsGetRequest {
    workspaceId: number;
    page?: number;
    isDraft?: boolean;
    isArchived?: boolean;
    assigneeId?: number;
    priority?: number;
    pinned?: boolean;
}

export interface ApiWorkspacesWorkspaceIdItemsItemIdDeleteRequest {
    workspaceId: number;
    itemId: number;
}

export interface ApiWorkspacesWorkspaceIdItemsItemIdGetRequest {
    workspaceId: number;
    itemId: number;
}

export interface ApiWorkspacesWorkspaceIdItemsItemIdPatchRequest {
    workspaceId: number;
    itemId: number;
    updateWorkspaceItemRequest?: UpdateWorkspaceItemRequest;
}

export interface ApiWorkspacesWorkspaceIdItemsItemIdStatusPatchRequest {
    workspaceId: number;
    itemId: number;
    updateWorkspaceItemStatusRequest?: UpdateWorkspaceItemStatusRequest;
}

export interface ApiWorkspacesWorkspaceIdItemsPostRequest {
    workspaceId: number;
    createWorkspaceItemRequest?: CreateWorkspaceItemRequest;
}

/**
 * 
 */
export class WorkspaceItemApi extends runtime.BaseAPI {

    /**
     * ワークスペースアイテム一覧取得
     */
    async apiWorkspacesWorkspaceIdItemsGetRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceItemDetailResponsePagedResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['isDraft'] != null) {
            queryParameters['IsDraft'] = requestParameters['isDraft'];
        }

        if (requestParameters['isArchived'] != null) {
            queryParameters['IsArchived'] = requestParameters['isArchived'];
        }

        if (requestParameters['assigneeId'] != null) {
            queryParameters['AssigneeId'] = requestParameters['assigneeId'];
        }

        if (requestParameters['priority'] != null) {
            queryParameters['Priority'] = requestParameters['priority'];
        }

        if (requestParameters['pinned'] != null) {
            queryParameters['Pinned'] = requestParameters['pinned'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/workspaces/{workspaceId}/items`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceItemDetailResponsePagedResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースアイテム一覧取得
     */
    async apiWorkspacesWorkspaceIdItemsGet(requestParameters: ApiWorkspacesWorkspaceIdItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceItemDetailResponsePagedResponse> {
        const response = await this.apiWorkspacesWorkspaceIdItemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペースアイテム削除
     */
    async apiWorkspacesWorkspaceIdItemsItemIdDeleteRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdDelete().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/workspaces/{workspaceId}/items/{itemId}`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースアイテム削除
     */
    async apiWorkspacesWorkspaceIdItemsItemIdDelete(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiWorkspacesWorkspaceIdItemsItemIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペースアイテム取得
     */
    async apiWorkspacesWorkspaceIdItemsItemIdGetRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceItemDetailResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdGet().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/workspaces/{workspaceId}/items/{itemId}`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceItemDetailResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースアイテム取得
     */
    async apiWorkspacesWorkspaceIdItemsItemIdGet(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceItemDetailResponse> {
        const response = await this.apiWorkspacesWorkspaceIdItemsItemIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペースアイテム更新
     */
    async apiWorkspacesWorkspaceIdItemsItemIdPatchRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceItemResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdPatch().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/workspaces/{workspaceId}/items/{itemId}`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWorkspaceItemRequestToJSON(requestParameters['updateWorkspaceItemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceItemResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースアイテム更新
     */
    async apiWorkspacesWorkspaceIdItemsItemIdPatch(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceItemResponse> {
        const response = await this.apiWorkspacesWorkspaceIdItemsItemIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペースアイテムステータス更新
     */
    async apiWorkspacesWorkspaceIdItemsItemIdStatusPatchRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdStatusPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceItemResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdStatusPatch().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdStatusPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/workspaces/{workspaceId}/items/{itemId}/status`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWorkspaceItemStatusRequestToJSON(requestParameters['updateWorkspaceItemStatusRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceItemResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースアイテムステータス更新
     */
    async apiWorkspacesWorkspaceIdItemsItemIdStatusPatch(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdStatusPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceItemResponse> {
        const response = await this.apiWorkspacesWorkspaceIdItemsItemIdStatusPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペースアイテム作成
     */
    async apiWorkspacesWorkspaceIdItemsPostRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceItemResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/workspaces/{workspaceId}/items`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWorkspaceItemRequestToJSON(requestParameters['createWorkspaceItemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceItemResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースアイテム作成
     */
    async apiWorkspacesWorkspaceIdItemsPost(requestParameters: ApiWorkspacesWorkspaceIdItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceItemResponse> {
        const response = await this.apiWorkspacesWorkspaceIdItemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
