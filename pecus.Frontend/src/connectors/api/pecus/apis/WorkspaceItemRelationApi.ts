/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddWorkspaceItemRelationRequest,
  AddWorkspaceItemRelationResponse,
  ErrorResponse,
  SuccessResponse,
  WorkspaceItemRelationsResponse,
} from '../models/index';
import {
    AddWorkspaceItemRelationRequestFromJSON,
    AddWorkspaceItemRelationRequestToJSON,
    AddWorkspaceItemRelationResponseFromJSON,
    AddWorkspaceItemRelationResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    WorkspaceItemRelationsResponseFromJSON,
    WorkspaceItemRelationsResponseToJSON,
} from '../models/index';

export interface ApiWorkspacesWorkspaceIdItemsItemIdRelationsGetRequest {
    workspaceId: number;
    itemId: number;
}

export interface ApiWorkspacesWorkspaceIdItemsItemIdRelationsPostRequest {
    workspaceId: number;
    itemId: number;
    addWorkspaceItemRelationRequest?: AddWorkspaceItemRelationRequest;
}

export interface ApiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDeleteRequest {
    workspaceId: number;
    itemId: number;
    relationId: number;
}

/**
 * 
 */
export class WorkspaceItemRelationApi extends runtime.BaseAPI {

    /**
     * ワークスペースアイテムの関連一覧を取得
     */
    async apiWorkspacesWorkspaceIdItemsItemIdRelationsGetRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdRelationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceItemRelationsResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdRelationsGet().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdRelationsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/workspaces/{workspaceId}/items/{itemId}/relations`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceItemRelationsResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースアイテムの関連一覧を取得
     */
    async apiWorkspacesWorkspaceIdItemsItemIdRelationsGet(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdRelationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceItemRelationsResponse> {
        const response = await this.apiWorkspacesWorkspaceIdItemsItemIdRelationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペースアイテムに関連を追加
     */
    async apiWorkspacesWorkspaceIdItemsItemIdRelationsPostRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdRelationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddWorkspaceItemRelationResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdRelationsPost().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdRelationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/workspaces/{workspaceId}/items/{itemId}/relations`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddWorkspaceItemRelationRequestToJSON(requestParameters['addWorkspaceItemRelationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddWorkspaceItemRelationResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースアイテムに関連を追加
     */
    async apiWorkspacesWorkspaceIdItemsItemIdRelationsPost(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdRelationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddWorkspaceItemRelationResponse> {
        const response = await this.apiWorkspacesWorkspaceIdItemsItemIdRelationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペースアイテムの関連を削除
     */
    async apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDeleteRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete().'
            );
        }

        if (requestParameters['relationId'] == null) {
            throw new runtime.RequiredError(
                'relationId',
                'Required parameter "relationId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/workspaces/{workspaceId}/items/{itemId}/relations/{relationId}`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));
        urlPath = urlPath.replace(`{${"relationId"}}`, encodeURIComponent(String(requestParameters['relationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースアイテムの関連を削除
     */
    async apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
