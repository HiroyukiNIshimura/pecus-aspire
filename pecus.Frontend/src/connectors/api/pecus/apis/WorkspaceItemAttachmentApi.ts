/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
  WorkspaceItemAttachmentResponse,
} from '../models/index';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    WorkspaceItemAttachmentResponseFromJSON,
    WorkspaceItemAttachmentResponseToJSON,
} from '../models/index';

export interface ApiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDeleteRequest {
    workspaceId: number;
    itemId: number;
    attachmentId: number;
}

export interface ApiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGetRequest {
    workspaceId: number;
    itemId: number;
    fileName: string;
}

export interface ApiWorkspacesWorkspaceIdItemsItemIdAttachmentsGetRequest {
    workspaceId: number;
    itemId: number;
}

export interface ApiWorkspacesWorkspaceIdItemsItemIdAttachmentsPostRequest {
    workspaceId: number;
    itemId: number;
    file?: Blob;
}

/**
 * 
 */
export class WorkspaceItemAttachmentApi extends runtime.BaseAPI {

    /**
     * 添付ファイルを削除
     */
    async apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDeleteRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/workspaces/{workspaceId}/items/{itemId}/attachments/{attachmentId}`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));
        urlPath = urlPath.replace(`{${"attachmentId"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 添付ファイルを削除
     */
    async apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 添付ファイルをダウンロード
     */
    async apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGetRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet().'
            );
        }

        if (requestParameters['fileName'] == null) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter "fileName" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/workspaces/{workspaceId}/items/{itemId}/attachments/download/{fileName}`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));
        urlPath = urlPath.replace(`{${"fileName"}}`, encodeURIComponent(String(requestParameters['fileName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 添付ファイルをダウンロード
     */
    async apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * ワークスペースアイテムの添付ファイル一覧を取得
     */
    async apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGetRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdAttachmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkspaceItemAttachmentResponse>>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGet().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/workspaces/{workspaceId}/items/{itemId}/attachments`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkspaceItemAttachmentResponseFromJSON));
    }

    /**
     * ワークスペースアイテムの添付ファイル一覧を取得
     */
    async apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGet(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdAttachmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkspaceItemAttachmentResponse>> {
        const response = await this.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ワークスペースアイテムに添付ファイルをアップロード
     */
    async apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPostRaw(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdAttachmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceItemAttachmentResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPost().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }


        let urlPath = `/api/workspaces/{workspaceId}/items/{itemId}/attachments`;
        urlPath = urlPath.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceItemAttachmentResponseFromJSON(jsonValue));
    }

    /**
     * ワークスペースアイテムに添付ファイルをアップロード
     */
    async apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPost(requestParameters: ApiWorkspacesWorkspaceIdItemsItemIdAttachmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceItemAttachmentResponse> {
        const response = await this.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
