/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTagRequest,
  ErrorResponse,
  SuccessResponse,
  TagDetailResponse,
  TagResponse,
  UpdateTagRequest,
} from '../models/index';
import {
    CreateTagRequestFromJSON,
    CreateTagRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    TagDetailResponseFromJSON,
    TagDetailResponseToJSON,
    TagResponseFromJSON,
    TagResponseToJSON,
    UpdateTagRequestFromJSON,
    UpdateTagRequestToJSON,
} from '../models/index';

export interface ApiTagsPostRequest {
    createTagRequest?: CreateTagRequest;
}

export interface ApiTagsTagIdDeleteRequest {
    tagId: number;
}

export interface ApiTagsTagIdPutRequest {
    tagId: number;
    updateTagRequest?: UpdateTagRequest;
}

/**
 * 
 */
export class TagApi extends runtime.BaseAPI {

    /**
     * 組織のタグ一覧取得
     */
    async apiTagsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagDetailResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/tags`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagDetailResponseFromJSON));
    }

    /**
     * 組織のタグ一覧取得
     */
    async apiTagsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagDetailResponse>> {
        const response = await this.apiTagsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * タグ作成
     */
    async apiTagsPostRaw(requestParameters: ApiTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/tags`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTagRequestToJSON(requestParameters['createTagRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagResponseFromJSON(jsonValue));
    }

    /**
     * タグ作成
     */
    async apiTagsPost(requestParameters: ApiTagsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagResponse> {
        const response = await this.apiTagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * タグ削除
     */
    async apiTagsTagIdDeleteRaw(requestParameters: ApiTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling apiTagsTagIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/tags/{tagId}`;
        urlPath = urlPath.replace(`{${"tagId"}}`, encodeURIComponent(String(requestParameters['tagId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * タグ削除
     */
    async apiTagsTagIdDelete(requestParameters: ApiTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiTagsTagIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * タグ更新
     */
    async apiTagsTagIdPutRaw(requestParameters: ApiTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagResponse>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling apiTagsTagIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/tags/{tagId}`;
        urlPath = urlPath.replace(`{${"tagId"}}`, encodeURIComponent(String(requestParameters['tagId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTagRequestToJSON(requestParameters['updateTagRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagResponseFromJSON(jsonValue));
    }

    /**
     * タグ更新
     */
    async apiTagsTagIdPut(requestParameters: ApiTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagResponse> {
        const response = await this.apiTagsTagIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
