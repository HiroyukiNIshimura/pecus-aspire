/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
} from '../models/index';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface ApiBackendSpecsOpenapiDocumentNameGetRequest {
    documentName: string;
}

export interface ApiBackendSpecsOpenapiDocumentNameYamlGetRequest {
    documentName: string;
}

/**
 * 
 */
export class BackendSpecsApi extends runtime.BaseAPI {

    /**
     * Swagger UIで生成されたOpenAPI 3.0スキーマをJSON形式で取得します。
     * OpenAPIスキーマ取得
     */
    async apiBackendSpecsOpenapiDocumentNameGetRaw(requestParameters: ApiBackendSpecsOpenapiDocumentNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['documentName'] == null) {
            throw new runtime.RequiredError(
                'documentName',
                'Required parameter "documentName" was null or undefined when calling apiBackendSpecsOpenapiDocumentNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/specs/openapi/{documentName}`;
        urlPath = urlPath.replace(`{${"documentName"}}`, encodeURIComponent(String(requestParameters['documentName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Swagger UIで生成されたOpenAPI 3.0スキーマをJSON形式で取得します。
     * OpenAPIスキーマ取得
     */
    async apiBackendSpecsOpenapiDocumentNameGet(requestParameters: ApiBackendSpecsOpenapiDocumentNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBackendSpecsOpenapiDocumentNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Swagger UIで生成されたOpenAPI 3.0スキーマをYAML形式で取得します。
     * OpenAPIスキーマ取得（YAML形式）
     */
    async apiBackendSpecsOpenapiDocumentNameYamlGetRaw(requestParameters: ApiBackendSpecsOpenapiDocumentNameYamlGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['documentName'] == null) {
            throw new runtime.RequiredError(
                'documentName',
                'Required parameter "documentName" was null or undefined when calling apiBackendSpecsOpenapiDocumentNameYamlGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/specs/openapi/{documentName}.yaml`;
        urlPath = urlPath.replace(`{${"documentName"}}`, encodeURIComponent(String(requestParameters['documentName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Swagger UIで生成されたOpenAPI 3.0スキーマをYAML形式で取得します。
     * OpenAPIスキーマ取得（YAML形式）
     */
    async apiBackendSpecsOpenapiDocumentNameYamlGet(requestParameters: ApiBackendSpecsOpenapiDocumentNameYamlGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBackendSpecsOpenapiDocumentNameYamlGetRaw(requestParameters, initOverrides);
    }

    /**
     * Swagger UIで生成されたOpenAPI 3.0スキーマをJSON形式で取得します。
     * OpenAPIスキーマ取得
     */
    async apiBackendSpecsOpenapiGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/specs/openapi`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Swagger UIで生成されたOpenAPI 3.0スキーマをJSON形式で取得します。
     * OpenAPIスキーマ取得
     */
    async apiBackendSpecsOpenapiGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBackendSpecsOpenapiGetRaw(initOverrides);
    }

    /**
     * Swagger UIで生成されたOpenAPI 3.0スキーマをYAML形式で取得します。
     * OpenAPIスキーマ取得（YAML形式）
     */
    async apiBackendSpecsOpenapiYamlGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/specs/openapi.yaml`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Swagger UIで生成されたOpenAPI 3.0スキーマをYAML形式で取得します。
     * OpenAPIスキーマ取得（YAML形式）
     */
    async apiBackendSpecsOpenapiYamlGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBackendSpecsOpenapiYamlGetRaw(initOverrides);
    }

}
