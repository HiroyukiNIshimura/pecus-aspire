/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateRoleRequest,
  ErrorResponse,
  RoleDetailResponse,
  RoleListItemResponse,
  RoleResponse,
  SetPermissionsToRoleRequest,
  SuccessResponse,
} from '../models/index';
import {
    CreateRoleRequestFromJSON,
    CreateRoleRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    RoleDetailResponseFromJSON,
    RoleDetailResponseToJSON,
    RoleListItemResponseFromJSON,
    RoleListItemResponseToJSON,
    RoleResponseFromJSON,
    RoleResponseToJSON,
    SetPermissionsToRoleRequestFromJSON,
    SetPermissionsToRoleRequestToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface ApiBackendRolesIdDeleteRequest {
    id: number;
}

export interface ApiBackendRolesIdGetRequest {
    id: number;
}

export interface ApiBackendRolesPostRequest {
    createRoleRequest?: CreateRoleRequest;
}

export interface ApiBackendRolesRoleIdPermissionsPutRequest {
    roleId: number;
    setPermissionsToRoleRequest?: SetPermissionsToRoleRequest;
}

/**
 * 
 */
export class BackendRoleApi extends runtime.BaseAPI {

    /**
     * 全ロール取得
     */
    async apiBackendRolesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleListItemResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/roles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleListItemResponseFromJSON));
    }

    /**
     * 全ロール取得
     */
    async apiBackendRolesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleListItemResponse>> {
        const response = await this.apiBackendRolesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * ロール削除
     */
    async apiBackendRolesIdDeleteRaw(requestParameters: ApiBackendRolesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBackendRolesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/roles/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * ロール削除
     */
    async apiBackendRolesIdDelete(requestParameters: ApiBackendRolesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiBackendRolesIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ロール取得
     */
    async apiBackendRolesIdGetRaw(requestParameters: ApiBackendRolesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleDetailResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBackendRolesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/roles/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleDetailResponseFromJSON(jsonValue));
    }

    /**
     * ロール取得
     */
    async apiBackendRolesIdGet(requestParameters: ApiBackendRolesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleDetailResponse> {
        const response = await this.apiBackendRolesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ロール作成
     */
    async apiBackendRolesPostRaw(requestParameters: ApiBackendRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/roles`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRoleRequestToJSON(requestParameters['createRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleResponseFromJSON(jsonValue));
    }

    /**
     * ロール作成
     */
    async apiBackendRolesPost(requestParameters: ApiBackendRolesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleResponse> {
        const response = await this.apiBackendRolesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ロールに権限を設定（既存の権限を置き換える）
     */
    async apiBackendRolesRoleIdPermissionsPutRaw(requestParameters: ApiBackendRolesRoleIdPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleDetailResponse>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling apiBackendRolesRoleIdPermissionsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/backend/roles/{roleId}/permissions`;
        urlPath = urlPath.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters['roleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetPermissionsToRoleRequestToJSON(requestParameters['setPermissionsToRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleDetailResponseFromJSON(jsonValue));
    }

    /**
     * ロールに権限を設定（既存の権限を置き換える）
     */
    async apiBackendRolesRoleIdPermissionsPut(requestParameters: ApiBackendRolesRoleIdPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleDetailResponse> {
        const response = await this.apiBackendRolesRoleIdPermissionsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
