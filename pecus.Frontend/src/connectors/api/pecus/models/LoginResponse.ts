/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RoleInfoResponse } from './RoleInfoResponse';
import {
    RoleInfoResponseFromJSON,
    RoleInfoResponseFromJSONTyped,
    RoleInfoResponseToJSON,
    RoleInfoResponseToJSONTyped,
} from './RoleInfoResponse';

/**
 * ログインレスポンス
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * JWTアクセストークン
     * @type {string}
     * @memberof LoginResponse
     */
    accessToken: string | null;
    /**
     * トークンタイプ（常に "Bearer"）
     * @type {string}
     * @memberof LoginResponse
     */
    tokenType?: string | null;
    /**
     * トークンの有効期限（UTC）
     * @type {Date}
     * @memberof LoginResponse
     */
    expiresAt?: Date;
    /**
     * トークンの有効時間（秒）
     * @type {number}
     * @memberof LoginResponse
     */
    expiresIn?: number;
    /**
     * ユーザーID
     * @type {number}
     * @memberof LoginResponse
     */
    userId?: number;
    /**
     * ログインID
     * @type {string}
     * @memberof LoginResponse
     */
    loginId: string | null;
    /**
     * ユーザー名
     * @type {string}
     * @memberof LoginResponse
     */
    username: string | null;
    /**
     * メールアドレス
     * @type {string}
     * @memberof LoginResponse
     */
    email: string | null;
    /**
     * アバタータイプ
     * @type {string}
     * @memberof LoginResponse
     */
    avatarType?: string | null;
    /**
     * アイデンティティアイコンURL
     * @type {string}
     * @memberof LoginResponse
     */
    identityIconUrl?: string | null;
    /**
     * ユーザーが持つロール一覧
     * @type {Array<RoleInfoResponse>}
     * @memberof LoginResponse
     */
    roles?: Array<RoleInfoResponse> | null;
    /**
     * リフレッシュトークン
     * @type {string}
     * @memberof LoginResponse
     */
    refreshToken?: string | null;
    /**
     * リフレッシュトークンの有効期限（UTC）
     * @type {Date}
     * @memberof LoginResponse
     */
    refreshExpiresAt?: Date | null;
}

/**
 * Check if a given object implements the LoginResponse interface.
 */
export function instanceOfLoginResponse(value: object): value is LoginResponse {
    if (!('accessToken' in value) || value['accessToken'] === undefined) return false;
    if (!('loginId' in value) || value['loginId'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    return true;
}

export function LoginResponseFromJSON(json: any): LoginResponse {
    return LoginResponseFromJSONTyped(json, false);
}

export function LoginResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoginResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'accessToken': json['accessToken'],
        'tokenType': json['tokenType'] == null ? undefined : json['tokenType'],
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
        'expiresIn': json['expiresIn'] == null ? undefined : json['expiresIn'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'loginId': json['loginId'],
        'username': json['username'],
        'email': json['email'],
        'avatarType': json['avatarType'] == null ? undefined : json['avatarType'],
        'identityIconUrl': json['identityIconUrl'] == null ? undefined : json['identityIconUrl'],
        'roles': json['roles'] == null ? undefined : ((json['roles'] as Array<any>).map(RoleInfoResponseFromJSON)),
        'refreshToken': json['refreshToken'] == null ? undefined : json['refreshToken'],
        'refreshExpiresAt': json['refreshExpiresAt'] == null ? undefined : (new Date(json['refreshExpiresAt'])),
    };
}

export function LoginResponseToJSON(json: any): LoginResponse {
    return LoginResponseToJSONTyped(json, false);
}

export function LoginResponseToJSONTyped(value?: LoginResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'accessToken': value['accessToken'],
        'tokenType': value['tokenType'],
        'expiresAt': value['expiresAt'] == null ? value['expiresAt'] : value['expiresAt'].toISOString(),
        'expiresIn': value['expiresIn'],
        'userId': value['userId'],
        'loginId': value['loginId'],
        'username': value['username'],
        'email': value['email'],
        'avatarType': value['avatarType'],
        'identityIconUrl': value['identityIconUrl'],
        'roles': value['roles'] == null ? undefined : ((value['roles'] as Array<any>).map(RoleInfoResponseToJSON)),
        'refreshToken': value['refreshToken'],
        'refreshExpiresAt': value['refreshExpiresAt'] == null ? value['refreshExpiresAt'] : value['refreshExpiresAt'].toISOString(),
    };
}

