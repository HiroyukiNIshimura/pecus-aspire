/* tslint:disable */
/* eslint-disable */
/**
 * Pecus API
 * AIを社畜扱いして作成するWebAPIです。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * ワークスペースにユーザーを参加させるリクエスト
 */
export interface AddUserToWorkspaceRequest {
    /**
     * 参加させるユーザーID
     */
    'userId': number;
    /**
     * ワークスペース内での役割（例: Owner, Member, Guest）
     */
    'workspaceRole'?: string | null;
}
/**
 * ワークスペースアイテム関連追加リクエスト
 */
export interface AddWorkspaceItemRelationRequest {
    /**
     * 関連先アイテムID
     */
    'toItemId': number;
    /**
     * 関連タイプ（オプション）  指定可能な値: \"related\", \"blocks\", \"blocked_by\", \"depends_on\", \"duplicates\", \"subtask_of\", \"parent_of\", \"relates_to\"
     */
    'relationType'?: string | null;
}
/**
 * ワークスペースアイテム関連追加レスポンス
 */
export interface AddWorkspaceItemRelationResponse {
    /**
     * 成功フラグ
     */
    'success'?: boolean;
    /**
     * メッセージ
     */
    'message'?: string | null;
    'relation'?: WorkspaceItemRelationResponse;
}
/**
 * ジャンル登録リクエスト
 */
export interface CreateGenreRequest {
    /**
     * ジャンル名
     */
    'name': string;
    /**
     * ジャンルの説明
     */
    'description'?: string | null;
    /**
     * ジャンルアイコン
     */
    'icon'?: string | null;
    /**
     * 表示順
     */
    'displayOrder'?: number;
}
/**
 * 組織登録リクエスト
 */
export interface CreateOrganizationRequest {
    /**
     * 組織名
     */
    'name': string;
    /**
     * 電話番号
     */
    'phoneNumber': string;
    /**
     * 組織コード
     */
    'code'?: string | null;
    /**
     * 組織の説明
     */
    'description'?: string | null;
    /**
     * 代表者名
     */
    'representativeName'?: string | null;
    /**
     * メールアドレス
     */
    'email'?: string | null;
    /**
     * 管理者ユーザー名
     */
    'adminUsername': string;
    /**
     * 管理者メールアドレス
     */
    'adminEmail': string;
    /**
     * 管理者パスワード
     */
    'adminPassword': string;
}
/**
 * 権限作成リクエスト
 */
export interface CreatePermissionRequest {
    /**
     * 権限名
     */
    'name': string;
    /**
     * 権限の説明
     */
    'description'?: string | null;
    /**
     * カテゴリ
     */
    'category'?: string | null;
}
/**
 * ロール作成リクエスト
 */
export interface CreateRoleRequest {
    /**
     * ロール名
     */
    'name': string;
    /**
     * ロールの説明
     */
    'description'?: string | null;
}
/**
 * タグ作成リクエスト
 */
export interface CreateTagRequest {
    /**
     * タグ名
     */
    'name': string;
}
/**
 * パスワードなしユーザー登録リクエスト（管理者用）
 */
export interface CreateUserWithoutPasswordRequest {
    /**
     * ユーザー名
     */
    'username': string;
    /**
     * メールアドレス
     */
    'email': string;
}
/**
 * ワークスペースアイテム作成リクエスト
 */
export interface CreateWorkspaceItemRequest {
    /**
     * 件名
     */
    'subject': string;
    /**
     * 本文（WYSIWYGのノードデータをJSON形式で保存）
     */
    'body'?: string | null;
    /**
     * 作業中のユーザーID（NULL可）
     */
    'assigneeId'?: number | null;
    /**
     * 重要度（1: 低、2: 普通、3: 高）
     */
    'priority'?: number;
    /**
     * 期限日
     */
    'dueDate': string;
    /**
     * 下書き中フラグ
     */
    'isDraft'?: boolean;
    /**
     * タグ名のリスト（存在しないタグは自動作成）
     */
    'tagNames'?: Array<string> | null;
}
/**
 * ワークスペース登録リクエスト
 */
export interface CreateWorkspaceRequest {
    /**
     * ワークスペース名
     */
    'name': string;
    /**
     * ワークスペースの説明
     */
    'description'?: string | null;
}
/**
 * エラーレスポンス
 */
export interface ErrorResponse {
    /**
     * HTTPステータスコード
     */
    'statusCode'?: number;
    /**
     * エラーメッセージ
     */
    'message': string | null;
    /**
     * エラー詳細（オプション）
     */
    'details'?: string | null;
}
/**
 * ファイルアップロードレスポンス
 */
export interface FileUploadResponse {
    /**
     * アップロード成功フラグ
     */
    'success'?: boolean;
    /**
     * ファイルURL（公開アクセス用）
     */
    'fileUrl'?: string | null;
    /**
     * ファイルサイズ（バイト）
     */
    'fileSize'?: number;
    /**
     * ファイル形式
     */
    'contentType'?: string | null;
    /**
     * アップロード日時
     */
    'uploadedAt'?: string;
    /**
     * メッセージ
     */
    'message'?: string | null;
}
/**
 * ジャンル詳細レスポンス
 */
export interface GenreDetailResponse {
    /**
     * ジャンルID
     */
    'id'?: number;
    /**
     * ジャンル名
     */
    'name': string | null;
    /**
     * ジャンルの説明
     */
    'description'?: string | null;
    /**
     * ジャンルアイコン
     */
    'icon'?: string | null;
    /**
     * 表示順
     */
    'displayOrder'?: number;
    /**
     * このジャンルを使用しているワークスペース数
     */
    'workspaceCount'?: number;
    /**
     * 作成日時
     */
    'createdAt'?: string;
    /**
     * 作成者ユーザーID
     */
    'createdByUserId'?: number | null;
    /**
     * 更新日時
     */
    'updatedAt'?: string | null;
    /**
     * 更新者ユーザーID
     */
    'updatedByUserId'?: number | null;
    /**
     * 有効フラグ
     */
    'isActive'?: boolean;
}
/**
 * ジャンル一覧用レスポンス
 */
export interface GenreListItemResponse {
    /**
     * ジャンルID
     */
    'id'?: number;
    /**
     * ジャンル名
     */
    'name': string | null;
    /**
     * ジャンルの説明
     */
    'description'?: string | null;
    /**
     * ジャンルアイコン
     */
    'icon'?: string | null;
    /**
     * 表示順
     */
    'displayOrder'?: number;
    /**
     * このジャンルを使用しているワークスペース数
     */
    'workspaceCount'?: number;
    /**
     * 有効フラグ
     */
    'isActive'?: boolean;
}
/**
 * ページネーション付きレスポンス
 */
export interface GenreListItemResponsePagedResponse {
    /**
     * データのリスト
     */
    'data': Array<GenreListItemResponse> | null;
    /**
     * 現在のページ番号（1から始まる）
     */
    'currentPage'?: number;
    /**
     * 1ページあたりのアイテム数
     */
    'pageSize'?: number;
    /**
     * 総アイテム数
     */
    'totalCount'?: number;
    /**
     * 総ページ数
     */
    'totalPages'?: number;
    /**
     * 前のページが存在するか
     */
    'hasPreviousPage'?: boolean;
    /**
     * 次のページが存在するか
     */
    'hasNextPage'?: boolean;
}
/**
 * ジャンル基本レスポンス
 */
export interface GenreResponse {
    /**
     * ジャンルID
     */
    'id'?: number;
    /**
     * ジャンル名
     */
    'name': string | null;
    /**
     * ジャンルの説明
     */
    'description'?: string | null;
    /**
     * ジャンルアイコン
     */
    'icon'?: string | null;
    /**
     * 表示順
     */
    'displayOrder'?: number;
    /**
     * 作成日時
     */
    'createdAt'?: string;
    /**
     * 更新日時
     */
    'updatedAt'?: string | null;
    /**
     * 有効フラグ
     */
    'isActive'?: boolean;
}
/**
 * ログインリクエスト
 */
export interface LoginRequest {
    /**
     * ログイン識別子（EmailまたはLoginId）
     */
    'loginIdentifier': string;
    /**
     * パスワード
     */
    'password': string;
}
/**
 * ログインレスポンス
 */
export interface LoginResponse {
    /**
     * JWTアクセストークン
     */
    'accessToken': string | null;
    /**
     * トークンタイプ（常に \"Bearer\"）
     */
    'tokenType'?: string | null;
    /**
     * トークンの有効期限（UTC）
     */
    'expiresAt'?: string;
    /**
     * トークンの有効時間（秒）
     */
    'expiresIn'?: number;
    /**
     * ユーザーID
     */
    'userId'?: number;
    /**
     * ログインID
     */
    'loginId': string | null;
    /**
     * ユーザー名
     */
    'username': string | null;
    /**
     * メールアドレス
     */
    'email': string | null;
    /**
     * アバタータイプ
     */
    'avatarType'?: string | null;
    /**
     * アイデンティティアイコンURL
     */
    'identityIconUrl'?: string | null;
    /**
     * ユーザーが持つロール一覧
     */
    'roles'?: Array<RoleInfoResponse> | null;
    /**
     * リフレッシュトークン
     */
    'refreshToken'?: string | null;
    /**
     * リフレッシュトークンの有効期限（UTC）
     */
    'refreshExpiresAt'?: string | null;
}
/**
 * 組織詳細レスポンス
 */
export interface OrganizationDetailResponse {
    /**
     * 組織ID
     */
    'id'?: number;
    /**
     * 組織名
     */
    'name': string | null;
    /**
     * 組織コード
     */
    'code'?: string | null;
    /**
     * 組織の説明
     */
    'description'?: string | null;
    /**
     * 代表者名
     */
    'representativeName'?: string | null;
    /**
     * 電話番号
     */
    'phoneNumber': string | null;
    /**
     * メールアドレス
     */
    'email'?: string | null;
    /**
     * 作成日時
     */
    'createdAt'?: string;
    /**
     * 更新日時
     */
    'updatedAt'?: string | null;
    /**
     * アクティブフラグ
     */
    'isActive'?: boolean;
    /**
     * 所属ユーザー数
     */
    'userCount'?: number;
}
/**
 * 組織情報レスポンス（簡易版）
 */
export interface OrganizationInfoResponse {
    /**
     * 組織ID
     */
    'id'?: number;
    /**
     * 組織名
     */
    'name': string | null;
    /**
     * 組織コード
     */
    'code'?: string | null;
}
/**
 * 組織リスト項目レスポンス
 */
export interface OrganizationListItemResponse {
    /**
     * 組織ID
     */
    'id'?: number;
    /**
     * 組織名
     */
    'name': string | null;
    /**
     * 組織コード
     */
    'code'?: string | null;
    /**
     * 代表者名
     */
    'representativeName'?: string | null;
    /**
     * 電話番号
     */
    'phoneNumber': string | null;
    /**
     * メールアドレス
     */
    'email'?: string | null;
    /**
     * アクティブフラグ
     */
    'isActive'?: boolean;
    /**
     * 作成日時
     */
    'createdAt'?: string;
    /**
     * 所属ユーザー数
     */
    'userCount'?: number;
}
/**
 * ページネーション付きレスポンス
 */
export interface OrganizationListItemResponsePagedResponse {
    /**
     * データのリスト
     */
    'data': Array<OrganizationListItemResponse> | null;
    /**
     * 現在のページ番号（1から始まる）
     */
    'currentPage'?: number;
    /**
     * 1ページあたりのアイテム数
     */
    'pageSize'?: number;
    /**
     * 総アイテム数
     */
    'totalCount'?: number;
    /**
     * 総ページ数
     */
    'totalPages'?: number;
    /**
     * 前のページが存在するか
     */
    'hasPreviousPage'?: boolean;
    /**
     * 次のページが存在するか
     */
    'hasNextPage'?: boolean;
}
/**
 * 組織情報レスポンス
 */
export interface OrganizationResponse {
    /**
     * 組織ID
     */
    'id'?: number;
    /**
     * 組織名
     */
    'name': string | null;
    /**
     * 組織コード
     */
    'code'?: string | null;
    /**
     * 組織の説明
     */
    'description'?: string | null;
    /**
     * 代表者名
     */
    'representativeName'?: string | null;
    /**
     * 電話番号
     */
    'phoneNumber': string | null;
    /**
     * メールアドレス
     */
    'email'?: string | null;
    /**
     * 作成日時
     */
    'createdAt'?: string;
}
/**
 * 組織登録レスポンス（管理者ユーザー情報含む）
 */
export interface OrganizationWithAdminResponse {
    'organization': OrganizationResponse;
    'adminUser': UserResponse;
}
/**
 * 権限詳細情報レスポンス
 */
export interface PermissionDetailInfoResponse {
    /**
     * 権限ID
     */
    'id'?: number;
    /**
     * 権限名
     */
    'name': string | null;
    /**
     * 権限の説明
     */
    'description'?: string | null;
    /**
     * 権限カテゴリ
     */
    'category'?: string | null;
}
/**
 * 権限詳細レスポンス（ロールを含む）
 */
export interface PermissionDetailResponse {
    /**
     * 権限ID
     */
    'id'?: number;
    /**
     * 権限名
     */
    'name': string | null;
    /**
     * 権限の説明
     */
    'description'?: string | null;
    /**
     * 権限カテゴリ
     */
    'category'?: string | null;
    /**
     * 作成日時
     */
    'createdAt'?: string;
    /**
     * この権限を持つロール一覧
     */
    'roles'?: Array<RoleInfoResponse> | null;
}
/**
 * 権限リスト項目レスポンス
 */
export interface PermissionListItemResponse {
    /**
     * 権限ID
     */
    'id'?: number;
    /**
     * 権限名
     */
    'name': string | null;
    /**
     * 権限の説明
     */
    'description'?: string | null;
    /**
     * 権限カテゴリ
     */
    'category'?: string | null;
    /**
     * 作成日時
     */
    'createdAt'?: string;
    /**
     * この権限を持つロール数
     */
    'roleCount'?: number;
}
/**
 * 権限情報レスポンス
 */
export interface PermissionResponse {
    /**
     * 権限ID
     */
    'id'?: number;
    /**
     * 権限名
     */
    'name': string | null;
    /**
     * 権限の説明
     */
    'description'?: string | null;
    /**
     * 権限カテゴリ
     */
    'category'?: string | null;
    /**
     * 作成日時
     */
    'createdAt'?: string;
}
export interface ProblemDetails {
    [key: string]: any;

    'type'?: string | null;
    'title'?: string | null;
    'status'?: number | null;
    'detail'?: string | null;
    'instance'?: string | null;
}
export interface RecipientRequest {
    'email'?: string | null;
}
/**
 * リフレッシュトークン交換 / ログアウト用リクエスト
 */
export interface RefreshRequest {
    /**
     * クライアントから送られるリフレッシュトークン
     */
    'refreshToken': string;
}
/**
 * パスワードリセットリクエスト
 */
export interface RequestPasswordResetRequest {
    /**
     * メールアドレス
     */
    'email': string;
}
/**
 * パスワードリセット実行リクエスト
 */
export interface ResetPasswordRequest {
    /**
     * パスワードリセットトークン（メールで送信されたもの）
     */
    'token': string;
    /**
     * 新しいパスワード
     */
    'password': string;
}
/**
 * ロール詳細レスポンス（権限を含む）
 */
export interface RoleDetailResponse {
    /**
     * ロールID
     */
    'id'?: number;
    /**
     * ロール名
     */
    'name': string | null;
    /**
     * ロールの説明
     */
    'description'?: string | null;
    /**
     * 作成日時
     */
    'createdAt'?: string;
    /**
     * ロールが持つ権限一覧
     */
    'permissions'?: Array<PermissionDetailInfoResponse> | null;
}
/**
 * ロール情報レスポンス（簡易版）
 */
export interface RoleInfoResponse {
    /**
     * ロールID
     */
    'id'?: number;
    /**
     * ロール名
     */
    'name': string | null;
}
/**
 * ロールリスト項目レスポンス
 */
export interface RoleListItemResponse {
    /**
     * ロールID
     */
    'id'?: number;
    /**
     * ロール名
     */
    'name': string | null;
    /**
     * ロールの説明
     */
    'description'?: string | null;
    /**
     * 作成日時
     */
    'createdAt'?: string;
    /**
     * ロールが持つ権限数
     */
    'permissionCount'?: number;
}
/**
 * ロール情報レスポンス
 */
export interface RoleResponse {
    /**
     * ロールID
     */
    'id'?: number;
    /**
     * ロール名
     */
    'name': string | null;
    /**
     * ロールの説明
     */
    'description'?: string | null;
    /**
     * 作成日時
     */
    'createdAt'?: string;
}
/**
 * アクティブ状態設定リクエスト
 */
export interface SetActiveStatusRequest {
    /**
     * アクティブ状態（true: 有効, false: 無効）
     */
    'isActive': boolean;
}
/**
 * ロールに権限を設定するリクエスト
 */
export interface SetPermissionsToRoleRequest {
    /**
     * 設定する権限IDのリスト。既存の権限をすべて置き換えます。  空のリストまたはnullを指定するとすべての権限が削除されます。
     */
    'permissionIds'?: Array<number> | null;
}
/**
 * Request DTO for setting all tags on a workspace item
 */
export interface SetTagsToItemRequest {
    /**
     * List of tag names to set on the item. Replaces all existing tags.  Tags will be auto-created in the organization if they don\'t exist.  Empty list or null will remove all tags.
     */
    'tagNames'?: Array<string> | null;
}
/**
 * アクティブ状態設定リクエスト
 */
export interface SetUserActiveStatusRequest {
    /**
     * アクティブ状態（true: 有効, false: 無効）
     */
    'isActive': boolean;
}
/**
 * ユーザーパスワード設定リクエスト
 */
export interface SetUserPasswordRequest {
    /**
     * パスワード設定トークン（メールで送信されたもの）
     */
    'token': string;
    /**
     * 新しいパスワード
     */
    'password': string;
}
/**
 * スキル設定リクエスト
 */
export interface SetUserSkillsRequest {
    /**
     * スキルIDのリスト
     */
    'skillIds': Array<number> | null;
}
/**
 * 成功メッセージレスポンス
 */
export interface SuccessResponse {
    /**
     * HTTPステータスコード
     */
    'statusCode'?: number;
    /**
     * 成功メッセージ
     */
    'message': string | null;
}
/**
 * タグ詳細レスポンス
 */
export interface TagDetailResponse {
    /**
     * タグID
     */
    'id'?: number;
    /**
     * 組織ID
     */
    'organizationId'?: number;
    /**
     * タグ名
     */
    'name'?: string | null;
    /**
     * 作成日時
     */
    'createdAt'?: string;
    /**
     * 作成者ユーザーID
     */
    'createdByUserId'?: number;
    /**
     * 作成者ユーザー名
     */
    'createdByUsername'?: string | null;
    /**
     * 更新日時
     */
    'updatedAt'?: string;
    /**
     * このタグが付与されているアイテム数
     */
    'itemCount'?: number;
}
/**
 * タグ情報レスポンス
 */
export interface TagInfoResponse {
    /**
     * タグID
     */
    'id'?: number;
    /**
     * タグ名
     */
    'name'?: string | null;
}
/**
 * タグレスポンス
 */
export interface TagResponse {
    /**
     * 成功フラグ
     */
    'success'?: boolean;
    /**
     * メッセージ
     */
    'message'?: string | null;
    'tag'?: TagDetailResponse;
}
/**
 * メールアドレス変更リクエスト
 */
export interface UpdateEmailRequest {
    /**
     * 新しいメールアドレス
     */
    'newEmail': string;
}
/**
 * ジャンル更新リクエスト
 */
export interface UpdateGenreRequest {
    /**
     * ジャンル名
     */
    'name'?: string | null;
    /**
     * ジャンルの説明
     */
    'description'?: string | null;
    /**
     * ジャンルアイコン
     */
    'icon'?: string | null;
    /**
     * 表示順
     */
    'displayOrder'?: number | null;
}
/**
 * 組織更新リクエスト
 */
export interface UpdateOrganizationRequest {
    /**
     * 組織名
     */
    'name'?: string | null;
    /**
     * 組織コード
     */
    'code'?: string | null;
    /**
     * 組織の説明
     */
    'description'?: string | null;
    /**
     * 代表者名
     */
    'representativeName'?: string | null;
    /**
     * 電話番号
     */
    'phoneNumber'?: string | null;
    /**
     * メールアドレス
     */
    'email'?: string | null;
}
/**
 * プロフィール更新リクエスト
 */
export interface UpdateProfileRequest {
    /**
     * ユーザー名
     */
    'username'?: string | null;
    /**
     * アバタータイプ
     */
    'avatarType'?: string | null;
    /**
     * アバターURL
     */
    'avatarUrl'?: string | null;
    /**
     * スキルIDリスト
     */
    'skillIds'?: Array<number> | null;
}
/**
 * タグ更新リクエスト
 */
export interface UpdateTagRequest {
    /**
     * タグ名
     */
    'name': string;
}
/**
 * ワークスペースアイテム更新リクエスト
 */
export interface UpdateWorkspaceItemRequest {
    /**
     * 件名
     */
    'subject'?: string | null;
    /**
     * 本文（WYSIWYGのノードデータをJSON形式で保存）
     */
    'body'?: string | null;
    /**
     * 作業中のユーザーID（NULL可）
     */
    'assigneeId'?: number | null;
    /**
     * 重要度（1: 低、2: 普通、3: 高）
     */
    'priority'?: number | null;
    /**
     * 期限日
     */
    'dueDate'?: string | null;
}
/**
 * ワークスペースアイテムステータス更新リクエスト
 */
export interface UpdateWorkspaceItemStatusRequest {
    /**
     * 下書き中フラグ
     */
    'isDraft'?: boolean | null;
    /**
     * アーカイブフラグ
     */
    'isArchived'?: boolean | null;
}
/**
 * ワークスペース更新リクエスト
 */
export interface UpdateWorkspaceRequest {
    /**
     * ワークスペース名
     */
    'name'?: string | null;
    /**
     * ワークスペースの説明
     */
    'description'?: string | null;
}
/**
 * ユーザーリスト項目レスポンス
 */
export interface UserListItemResponse {
    /**
     * ユーザーID
     */
    'id'?: number;
    /**
     * ログインID
     */
    'loginId': string | null;
    /**
     * ユーザー名
     */
    'username': string | null;
    /**
     * メールアドレス
     */
    'email': string | null;
    /**
     * アバタータイプ
     */
    'avatarType'?: string | null;
    /**
     * アイデンティティアイコンURL
     */
    'identityIconUrl'?: string | null;
    /**
     * アクティブフラグ
     */
    'isActive'?: boolean;
    /**
     * 作成日時
     */
    'createdAt'?: string;
    /**
     * 最終ログイン日時
     */
    'lastLoginAt'?: string | null;
    /**
     * ユーザーが持つロール数
     */
    'roleCount'?: number;
}
/**
 * ユーザー情報レスポンス
 */
export interface UserResponse {
    /**
     * ユーザーID
     */
    'id'?: number;
    /**
     * ログインID
     */
    'loginId': string | null;
    /**
     * ユーザー名
     */
    'username': string | null;
    /**
     * メールアドレス
     */
    'email': string | null;
    /**
     * アバタータイプ
     */
    'avatarType'?: string | null;
    /**
     * アイデンティティアイコンURL
     */
    'identityIconUrl'?: string | null;
    /**
     * 作成日時
     */
    'createdAt'?: string;
}
/**
 * ページネーション付きレスポンス
 */
export interface UserResponsePagedResponse {
    /**
     * データのリスト
     */
    'data': Array<UserResponse> | null;
    /**
     * 現在のページ番号（1から始まる）
     */
    'currentPage'?: number;
    /**
     * 1ページあたりのアイテム数
     */
    'pageSize'?: number;
    /**
     * 総アイテム数
     */
    'totalCount'?: number;
    /**
     * 総ページ数
     */
    'totalPages'?: number;
    /**
     * 前のページが存在するか
     */
    'hasPreviousPage'?: boolean;
    /**
     * 次のページが存在するか
     */
    'hasNextPage'?: boolean;
}
/**
 * ワークスペース詳細情報レスポンス
 */
export interface WorkspaceDetailResponse {
    /**
     * ワークスペースID
     */
    'id'?: number;
    /**
     * ワークスペース名
     */
    'name': string | null;
    /**
     * ワークスペースコード
     */
    'code'?: string | null;
    /**
     * ワークスペースの説明
     */
    'description'?: string | null;
    /**
     * 組織ID
     */
    'organizationId'?: number;
    'organization'?: OrganizationInfoResponse;
    /**
     * 作成日時
     */
    'createdAt'?: string;
    /**
     * 作成者ユーザーID
     */
    'createdByUserId'?: number | null;
    /**
     * 更新日時
     */
    'updatedAt'?: string | null;
    /**
     * 更新者ユーザーID
     */
    'updatedByUserId'?: number | null;
    /**
     * アクティブフラグ
     */
    'isActive'?: boolean;
}
/**
 * ワークスペースアイテム添付ファイルレスポンス
 */
export interface WorkspaceItemAttachmentResponse {
    /**
     * 添付ファイルID
     */
    'id'?: number;
    /**
     * ワークスペースアイテムID
     */
    'workspaceItemId'?: number;
    /**
     * ファイル名
     */
    'fileName'?: string | null;
    /**
     * ファイルサイズ（バイト）
     */
    'fileSize'?: number;
    /**
     * MIMEタイプ
     */
    'mimeType'?: string | null;
    /**
     * ダウンロードURL
     */
    'downloadUrl'?: string | null;
    /**
     * サムネイル（サイズM）URL
     */
    'thumbnailMediumUrl'?: string | null;
    /**
     * サムネイル（サイズS）URL
     */
    'thumbnailSmallUrl'?: string | null;
    /**
     * アップロード日時
     */
    'uploadedAt'?: string;
    /**
     * アップロードしたユーザーID
     */
    'uploadedByUserId'?: number;
    /**
     * アップロードしたユーザー名
     */
    'uploadedByUsername'?: string | null;
}
/**
 * ワークスペースアイテム詳細レスポンス
 */
export interface WorkspaceItemDetailResponse {
    /**
     * アイテムID
     */
    'id'?: number;
    /**
     * ワークスペースID
     */
    'workspaceId'?: number;
    /**
     * ワークスペース名
     */
    'workspaceName'?: string | null;
    /**
     * コード
     */
    'code'?: string | null;
    /**
     * 件名
     */
    'subject'?: string | null;
    /**
     * 本文
     */
    'body'?: string | null;
    /**
     * オーナーユーザーID
     */
    'ownerId'?: number;
    /**
     * オーナーユーザー名
     */
    'ownerUsername'?: string | null;
    /**
     * オーナーアバターURL
     */
    'ownerAvatarUrl'?: string | null;
    /**
     * 作業中のユーザーID
     */
    'assigneeId'?: number | null;
    /**
     * 作業中のユーザー名
     */
    'assigneeUsername'?: string | null;
    /**
     * 作業中のユーザーアバターURL
     */
    'assigneeAvatarUrl'?: string | null;
    /**
     * 重要度（1: 低、2: 普通、3: 高）
     */
    'priority'?: number;
    /**
     * 期限日
     */
    'dueDate'?: string;
    /**
     * アーカイブフラグ
     */
    'isArchived'?: boolean;
    /**
     * 下書き中フラグ
     */
    'isDraft'?: boolean;
    /**
     * コミッターユーザーID
     */
    'committerId'?: number | null;
    /**
     * コミッターユーザー名
     */
    'committerUsername'?: string | null;
    /**
     * コミッターアバターURL
     */
    'committerAvatarUrl'?: string | null;
    /**
     * 作成日時
     */
    'createdAt'?: string;
    /**
     * 更新日時
     */
    'updatedAt'?: string;
    /**
     * タグのリスト
     */
    'tags'?: Array<TagInfoResponse> | null;
    /**
     * ログイン中のユーザーがこのアイテムをPINしているか
     */
    'isPinned'?: boolean;
    /**
     * このアイテムのPIN総数
     */
    'pinCount'?: number;
}
/**
 * ページネーション付きレスポンス
 */
export interface WorkspaceItemDetailResponsePagedResponse {
    /**
     * データのリスト
     */
    'data': Array<WorkspaceItemDetailResponse> | null;
    /**
     * 現在のページ番号（1から始まる）
     */
    'currentPage'?: number;
    /**
     * 1ページあたりのアイテム数
     */
    'pageSize'?: number;
    /**
     * 総アイテム数
     */
    'totalCount'?: number;
    /**
     * 総ページ数
     */
    'totalPages'?: number;
    /**
     * 前のページが存在するか
     */
    'hasPreviousPage'?: boolean;
    /**
     * 次のページが存在するか
     */
    'hasNextPage'?: boolean;
}
/**
 * ワークスペースアイテム関連情報レスポンス
 */
export interface WorkspaceItemRelationResponse {
    /**
     * 関連ID
     */
    'id'?: number;
    /**
     * 関連元アイテムID
     */
    'fromItemId'?: number;
    /**
     * 関連元アイテムコード
     */
    'fromItemCode'?: string | null;
    /**
     * 関連元アイテム件名
     */
    'fromItemSubject'?: string | null;
    /**
     * 関連先アイテムID
     */
    'toItemId'?: number;
    /**
     * 関連先アイテムコード
     */
    'toItemCode'?: string | null;
    /**
     * 関連先アイテム件名
     */
    'toItemSubject'?: string | null;
    /**
     * 関連タイプ
     */
    'relationType'?: string | null;
    /**
     * 作成日時
     */
    'createdAt'?: string;
    /**
     * 作成者ID
     */
    'createdByUserId'?: number;
    /**
     * 作成者ユーザー名
     */
    'createdByUsername'?: string | null;
}
/**
 * ワークスペースアイテム関連一覧レスポンス
 */
export interface WorkspaceItemRelationsResponse {
    /**
     * 関連元としての関連一覧（このアイテムから他へ）
     */
    'relationsFrom'?: Array<WorkspaceItemRelationResponse> | null;
    /**
     * 関連先としての関連一覧（他からこのアイテムへ）
     */
    'relationsTo'?: Array<WorkspaceItemRelationResponse> | null;
    /**
     * 全関連数
     */
    'totalCount'?: number;
}
/**
 * ワークスペースアイテム操作レスポンス
 */
export interface WorkspaceItemResponse {
    /**
     * 成功フラグ
     */
    'success'?: boolean;
    /**
     * メッセージ
     */
    'message'?: string | null;
    'workspaceItem'?: WorkspaceItemDetailResponse;
}
/**
 * ワークスペースリストアイテムレスポンス
 */
export interface WorkspaceListItemResponse {
    /**
     * ワークスペースID
     */
    'id'?: number;
    /**
     * ワークスペース名
     */
    'name': string | null;
    /**
     * ワークスペースコード
     */
    'code'?: string | null;
    /**
     * ワークスペースの説明
     */
    'description'?: string | null;
    /**
     * 組織ID
     */
    'organizationId'?: number;
    /**
     * 組織名
     */
    'organizationName'?: string | null;
    /**
     * 作成日時
     */
    'createdAt'?: string;
    /**
     * 更新日時
     */
    'updatedAt'?: string | null;
    /**
     * アクティブフラグ
     */
    'isActive'?: boolean;
}
/**
 * ページネーション付きレスポンス
 */
export interface WorkspaceListItemResponsePagedResponse {
    /**
     * データのリスト
     */
    'data': Array<WorkspaceListItemResponse> | null;
    /**
     * 現在のページ番号（1から始まる）
     */
    'currentPage'?: number;
    /**
     * 1ページあたりのアイテム数
     */
    'pageSize'?: number;
    /**
     * 総アイテム数
     */
    'totalCount'?: number;
    /**
     * 総ページ数
     */
    'totalPages'?: number;
    /**
     * 前のページが存在するか
     */
    'hasPreviousPage'?: boolean;
    /**
     * 次のページが存在するか
     */
    'hasNextPage'?: boolean;
}
/**
 * ワークスペース操作レスポンス
 */
export interface WorkspaceResponse {
    /**
     * 成功フラグ
     */
    'success'?: boolean;
    /**
     * メッセージ
     */
    'message'?: string | null;
    'workspace'?: WorkspaceDetailResponse;
}
/**
 * ワークスペースユーザー詳細レスポンス
 */
export interface WorkspaceUserDetailResponse {
    /**
     * ワークスペースID
     */
    'workspaceId'?: number;
    /**
     * ユーザーID
     */
    'userId'?: number;
    /**
     * ユーザー名
     */
    'username'?: string | null;
    /**
     * メールアドレス
     */
    'email'?: string | null;
    /**
     * ワークスペース内での役割
     */
    'workspaceRole'?: string | null;
    /**
     * 参加日時
     */
    'joinedAt'?: string;
    /**
     * 最終アクセス日時
     */
    'lastAccessedAt'?: string | null;
    /**
     * アクティブフラグ
     */
    'isActive'?: boolean;
}
/**
 * ページネーション付きレスポンス
 */
export interface WorkspaceUserDetailResponsePagedResponse {
    /**
     * データのリスト
     */
    'data': Array<WorkspaceUserDetailResponse> | null;
    /**
     * 現在のページ番号（1から始まる）
     */
    'currentPage'?: number;
    /**
     * 1ページあたりのアイテム数
     */
    'pageSize'?: number;
    /**
     * 総アイテム数
     */
    'totalCount'?: number;
    /**
     * 総ページ数
     */
    'totalPages'?: number;
    /**
     * 前のページが存在するか
     */
    'hasPreviousPage'?: boolean;
    /**
     * 次のページが存在するか
     */
    'hasNextPage'?: boolean;
}
/**
 * ワークスペースユーザー登録レスポンス
 */
export interface WorkspaceUserResponse {
    /**
     * 成功フラグ
     */
    'success'?: boolean;
    /**
     * メッセージ
     */
    'message'?: string | null;
    'workspaceUser'?: WorkspaceUserDetailResponse;
}

/**
 * AdminOrganizationApi - axios parameter creator
 */
export const AdminOrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ログイン中のユーザーが属する組織の詳細情報を取得します。
         * @summary 自組織の情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminOrganizationGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン中のユーザーが属する組織の情報を更新します。
         * @summary 自組織の情報を更新
         * @param {UpdateOrganizationRequest} [updateOrganizationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminOrganizationPut: async (updateOrganizationRequest?: UpdateOrganizationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrganizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminOrganizationApi - functional programming interface
 */
export const AdminOrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminOrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         * ログイン中のユーザーが属する組織の詳細情報を取得します。
         * @summary 自組織の情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminOrganizationGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminOrganizationGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminOrganizationApi.apiAdminOrganizationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ログイン中のユーザーが属する組織の情報を更新します。
         * @summary 自組織の情報を更新
         * @param {UpdateOrganizationRequest} [updateOrganizationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminOrganizationPut(updateOrganizationRequest?: UpdateOrganizationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminOrganizationPut(updateOrganizationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminOrganizationApi.apiAdminOrganizationPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminOrganizationApi - factory interface
 */
export const AdminOrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminOrganizationApiFp(configuration)
    return {
        /**
         * ログイン中のユーザーが属する組織の詳細情報を取得します。
         * @summary 自組織の情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminOrganizationGet(options?: RawAxiosRequestConfig): AxiosPromise<OrganizationDetailResponse> {
            return localVarFp.apiAdminOrganizationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン中のユーザーが属する組織の情報を更新します。
         * @summary 自組織の情報を更新
         * @param {AdminOrganizationApiApiAdminOrganizationPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminOrganizationPut(requestParameters: AdminOrganizationApiApiAdminOrganizationPutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationResponse> {
            return localVarFp.apiAdminOrganizationPut(requestParameters.updateOrganizationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiAdminOrganizationPut operation in AdminOrganizationApi.
 */
export interface AdminOrganizationApiApiAdminOrganizationPutRequest {
    readonly updateOrganizationRequest?: UpdateOrganizationRequest
}

/**
 * AdminOrganizationApi - object-oriented interface
 */
export class AdminOrganizationApi extends BaseAPI {
    /**
     * ログイン中のユーザーが属する組織の詳細情報を取得します。
     * @summary 自組織の情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminOrganizationGet(options?: RawAxiosRequestConfig) {
        return AdminOrganizationApiFp(this.configuration).apiAdminOrganizationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン中のユーザーが属する組織の情報を更新します。
     * @summary 自組織の情報を更新
     * @param {AdminOrganizationApiApiAdminOrganizationPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminOrganizationPut(requestParameters: AdminOrganizationApiApiAdminOrganizationPutRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminOrganizationApiFp(this.configuration).apiAdminOrganizationPut(requestParameters.updateOrganizationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AdminUserApi - axios parameter creator
 */
export const AdminUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ユーザー名とメールアドレスのみでユーザーを作成します。パスワードは後で設定されます。  作成されたユーザーにはパスワード設定用のトークンが発行され、メールで通知されます。
         * @summary パスワードなしでユーザーを作成
         * @param {CreateUserWithoutPasswordRequest} [createUserWithoutPasswordRequest] ユーザー作成リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminUsersCreateWithoutPasswordPost: async (createUserWithoutPasswordRequest?: CreateUserWithoutPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/users/create-without-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserWithoutPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログインユーザーの組織に所属するユーザーの一覧をページングで取得します。
         * @summary 組織内のユーザー一覧を取得（ページング）
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [activeOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminUsersGet: async (page?: number, pageSize?: number, activeOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (activeOnly !== undefined) {
                localVarQueryParameter['ActiveOnly'] = activeOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したユーザーのアクティブ状態を設定します。組織内のユーザーのみ操作可能です。
         * @summary ユーザーのアクティブ状態を設定
         * @param {number} id ユーザーID
         * @param {SetUserActiveStatusRequest} [setUserActiveStatusRequest] アクティブ状態設定リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminUsersIdActiveStatusPut: async (id: number, setUserActiveStatusRequest?: SetUserActiveStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdminUsersIdActiveStatusPut', 'id', id)
            const localVarPath = `/api/admin/users/{id}/active-status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setUserActiveStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したユーザーを削除します。組織内のユーザーのみ操作可能です。
         * @summary ユーザーを削除
         * @param {number} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminUsersIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdminUsersIdDelete', 'id', id)
            const localVarPath = `/api/admin/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したユーザーのパスワードリセットをリクエストします。組織内のユーザーのみ操作可能です。  パスワードリセット用のメールがユーザーに送信されます。
         * @summary ユーザーのパスワードリセットをリクエスト
         * @param {number} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminUsersIdRequestPasswordResetPost: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdminUsersIdRequestPasswordResetPost', 'id', id)
            const localVarPath = `/api/admin/users/{id}/request-password-reset`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したユーザーのスキルを設定します（洗い替え）。組織内のユーザーのみ操作可能です。
         * @summary ユーザーのスキルを設定
         * @param {number} id ユーザーID
         * @param {SetUserSkillsRequest} [setUserSkillsRequest] スキルIDのリスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminUsersIdSkillsPut: async (id: number, setUserSkillsRequest?: SetUserSkillsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdminUsersIdSkillsPut', 'id', id)
            const localVarPath = `/api/admin/users/{id}/skills`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setUserSkillsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminUserApi - functional programming interface
 */
export const AdminUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminUserApiAxiosParamCreator(configuration)
    return {
        /**
         * ユーザー名とメールアドレスのみでユーザーを作成します。パスワードは後で設定されます。  作成されたユーザーにはパスワード設定用のトークンが発行され、メールで通知されます。
         * @summary パスワードなしでユーザーを作成
         * @param {CreateUserWithoutPasswordRequest} [createUserWithoutPasswordRequest] ユーザー作成リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminUsersCreateWithoutPasswordPost(createUserWithoutPasswordRequest?: CreateUserWithoutPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminUsersCreateWithoutPasswordPost(createUserWithoutPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminUserApi.apiAdminUsersCreateWithoutPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ログインユーザーの組織に所属するユーザーの一覧をページングで取得します。
         * @summary 組織内のユーザー一覧を取得（ページング）
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [activeOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminUsersGet(page?: number, pageSize?: number, activeOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponsePagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminUsersGet(page, pageSize, activeOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminUserApi.apiAdminUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定したユーザーのアクティブ状態を設定します。組織内のユーザーのみ操作可能です。
         * @summary ユーザーのアクティブ状態を設定
         * @param {number} id ユーザーID
         * @param {SetUserActiveStatusRequest} [setUserActiveStatusRequest] アクティブ状態設定リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminUsersIdActiveStatusPut(id: number, setUserActiveStatusRequest?: SetUserActiveStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminUsersIdActiveStatusPut(id, setUserActiveStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminUserApi.apiAdminUsersIdActiveStatusPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定したユーザーを削除します。組織内のユーザーのみ操作可能です。
         * @summary ユーザーを削除
         * @param {number} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminUsersIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminUsersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminUserApi.apiAdminUsersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定したユーザーのパスワードリセットをリクエストします。組織内のユーザーのみ操作可能です。  パスワードリセット用のメールがユーザーに送信されます。
         * @summary ユーザーのパスワードリセットをリクエスト
         * @param {number} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminUsersIdRequestPasswordResetPost(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminUsersIdRequestPasswordResetPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminUserApi.apiAdminUsersIdRequestPasswordResetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定したユーザーのスキルを設定します（洗い替え）。組織内のユーザーのみ操作可能です。
         * @summary ユーザーのスキルを設定
         * @param {number} id ユーザーID
         * @param {SetUserSkillsRequest} [setUserSkillsRequest] スキルIDのリスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminUsersIdSkillsPut(id: number, setUserSkillsRequest?: SetUserSkillsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminUsersIdSkillsPut(id, setUserSkillsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminUserApi.apiAdminUsersIdSkillsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminUserApi - factory interface
 */
export const AdminUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminUserApiFp(configuration)
    return {
        /**
         * ユーザー名とメールアドレスのみでユーザーを作成します。パスワードは後で設定されます。  作成されたユーザーにはパスワード設定用のトークンが発行され、メールで通知されます。
         * @summary パスワードなしでユーザーを作成
         * @param {AdminUserApiApiAdminUsersCreateWithoutPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminUsersCreateWithoutPasswordPost(requestParameters: AdminUserApiApiAdminUsersCreateWithoutPasswordPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.apiAdminUsersCreateWithoutPasswordPost(requestParameters.createUserWithoutPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ログインユーザーの組織に所属するユーザーの一覧をページングで取得します。
         * @summary 組織内のユーザー一覧を取得（ページング）
         * @param {AdminUserApiApiAdminUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminUsersGet(requestParameters: AdminUserApiApiAdminUsersGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<UserResponsePagedResponse> {
            return localVarFp.apiAdminUsersGet(requestParameters.page, requestParameters.pageSize, requestParameters.activeOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定したユーザーのアクティブ状態を設定します。組織内のユーザーのみ操作可能です。
         * @summary ユーザーのアクティブ状態を設定
         * @param {AdminUserApiApiAdminUsersIdActiveStatusPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminUsersIdActiveStatusPut(requestParameters: AdminUserApiApiAdminUsersIdActiveStatusPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiAdminUsersIdActiveStatusPut(requestParameters.id, requestParameters.setUserActiveStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定したユーザーを削除します。組織内のユーザーのみ操作可能です。
         * @summary ユーザーを削除
         * @param {AdminUserApiApiAdminUsersIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminUsersIdDelete(requestParameters: AdminUserApiApiAdminUsersIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiAdminUsersIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定したユーザーのパスワードリセットをリクエストします。組織内のユーザーのみ操作可能です。  パスワードリセット用のメールがユーザーに送信されます。
         * @summary ユーザーのパスワードリセットをリクエスト
         * @param {AdminUserApiApiAdminUsersIdRequestPasswordResetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminUsersIdRequestPasswordResetPost(requestParameters: AdminUserApiApiAdminUsersIdRequestPasswordResetPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiAdminUsersIdRequestPasswordResetPost(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定したユーザーのスキルを設定します（洗い替え）。組織内のユーザーのみ操作可能です。
         * @summary ユーザーのスキルを設定
         * @param {AdminUserApiApiAdminUsersIdSkillsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminUsersIdSkillsPut(requestParameters: AdminUserApiApiAdminUsersIdSkillsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiAdminUsersIdSkillsPut(requestParameters.id, requestParameters.setUserSkillsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiAdminUsersCreateWithoutPasswordPost operation in AdminUserApi.
 */
export interface AdminUserApiApiAdminUsersCreateWithoutPasswordPostRequest {
    /**
     * ユーザー作成リクエスト
     */
    readonly createUserWithoutPasswordRequest?: CreateUserWithoutPasswordRequest
}

/**
 * Request parameters for apiAdminUsersGet operation in AdminUserApi.
 */
export interface AdminUserApiApiAdminUsersGetRequest {
    readonly page?: number

    readonly pageSize?: number

    readonly activeOnly?: boolean
}

/**
 * Request parameters for apiAdminUsersIdActiveStatusPut operation in AdminUserApi.
 */
export interface AdminUserApiApiAdminUsersIdActiveStatusPutRequest {
    /**
     * ユーザーID
     */
    readonly id: number

    /**
     * アクティブ状態設定リクエスト
     */
    readonly setUserActiveStatusRequest?: SetUserActiveStatusRequest
}

/**
 * Request parameters for apiAdminUsersIdDelete operation in AdminUserApi.
 */
export interface AdminUserApiApiAdminUsersIdDeleteRequest {
    /**
     * ユーザーID
     */
    readonly id: number
}

/**
 * Request parameters for apiAdminUsersIdRequestPasswordResetPost operation in AdminUserApi.
 */
export interface AdminUserApiApiAdminUsersIdRequestPasswordResetPostRequest {
    /**
     * ユーザーID
     */
    readonly id: number
}

/**
 * Request parameters for apiAdminUsersIdSkillsPut operation in AdminUserApi.
 */
export interface AdminUserApiApiAdminUsersIdSkillsPutRequest {
    /**
     * ユーザーID
     */
    readonly id: number

    /**
     * スキルIDのリスト
     */
    readonly setUserSkillsRequest?: SetUserSkillsRequest
}

/**
 * AdminUserApi - object-oriented interface
 */
export class AdminUserApi extends BaseAPI {
    /**
     * ユーザー名とメールアドレスのみでユーザーを作成します。パスワードは後で設定されます。  作成されたユーザーにはパスワード設定用のトークンが発行され、メールで通知されます。
     * @summary パスワードなしでユーザーを作成
     * @param {AdminUserApiApiAdminUsersCreateWithoutPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminUsersCreateWithoutPasswordPost(requestParameters: AdminUserApiApiAdminUsersCreateWithoutPasswordPostRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminUserApiFp(this.configuration).apiAdminUsersCreateWithoutPasswordPost(requestParameters.createUserWithoutPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログインユーザーの組織に所属するユーザーの一覧をページングで取得します。
     * @summary 組織内のユーザー一覧を取得（ページング）
     * @param {AdminUserApiApiAdminUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminUsersGet(requestParameters: AdminUserApiApiAdminUsersGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminUserApiFp(this.configuration).apiAdminUsersGet(requestParameters.page, requestParameters.pageSize, requestParameters.activeOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したユーザーのアクティブ状態を設定します。組織内のユーザーのみ操作可能です。
     * @summary ユーザーのアクティブ状態を設定
     * @param {AdminUserApiApiAdminUsersIdActiveStatusPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminUsersIdActiveStatusPut(requestParameters: AdminUserApiApiAdminUsersIdActiveStatusPutRequest, options?: RawAxiosRequestConfig) {
        return AdminUserApiFp(this.configuration).apiAdminUsersIdActiveStatusPut(requestParameters.id, requestParameters.setUserActiveStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したユーザーを削除します。組織内のユーザーのみ操作可能です。
     * @summary ユーザーを削除
     * @param {AdminUserApiApiAdminUsersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminUsersIdDelete(requestParameters: AdminUserApiApiAdminUsersIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return AdminUserApiFp(this.configuration).apiAdminUsersIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したユーザーのパスワードリセットをリクエストします。組織内のユーザーのみ操作可能です。  パスワードリセット用のメールがユーザーに送信されます。
     * @summary ユーザーのパスワードリセットをリクエスト
     * @param {AdminUserApiApiAdminUsersIdRequestPasswordResetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminUsersIdRequestPasswordResetPost(requestParameters: AdminUserApiApiAdminUsersIdRequestPasswordResetPostRequest, options?: RawAxiosRequestConfig) {
        return AdminUserApiFp(this.configuration).apiAdminUsersIdRequestPasswordResetPost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したユーザーのスキルを設定します（洗い替え）。組織内のユーザーのみ操作可能です。
     * @summary ユーザーのスキルを設定
     * @param {AdminUserApiApiAdminUsersIdSkillsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminUsersIdSkillsPut(requestParameters: AdminUserApiApiAdminUsersIdSkillsPutRequest, options?: RawAxiosRequestConfig) {
        return AdminUserApiFp(this.configuration).apiAdminUsersIdSkillsPut(requestParameters.id, requestParameters.setUserSkillsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AdminWorkspaceApi - axios parameter creator
 */
export const AdminWorkspaceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ワークスペース一覧取得（ページネーション）
         * @param {number} [page] 
         * @param {boolean} [activeOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesGet: async (page?: number, activeOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/workspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (activeOnly !== undefined) {
                localVarQueryParameter['ActiveOnly'] = activeOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペース有効化
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdActivatePatch: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdminWorkspacesIdActivatePatch', 'id', id)
            const localVarPath = `/api/admin/workspaces/{id}/activate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペース無効化
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdDeactivatePatch: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdminWorkspacesIdDeactivatePatch', 'id', id)
            const localVarPath = `/api/admin/workspaces/{id}/deactivate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペース削除
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdminWorkspacesIdDelete', 'id', id)
            const localVarPath = `/api/admin/workspaces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペース情報取得
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdminWorkspacesIdGet', 'id', id)
            const localVarPath = `/api/admin/workspaces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペース更新
         * @param {number} id 
         * @param {UpdateWorkspaceRequest} [updateWorkspaceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdPut: async (id: number, updateWorkspaceRequest?: UpdateWorkspaceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdminWorkspacesIdPut', 'id', id)
            const localVarPath = `/api/admin/workspaces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkspaceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペースのメンバー一覧取得（ページネーション）
         * @param {number} id ワークスペースID
         * @param {number} [page] 
         * @param {boolean} [activeOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdUsersGet: async (id: number, page?: number, activeOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdminWorkspacesIdUsersGet', 'id', id)
            const localVarPath = `/api/admin/workspaces/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (activeOnly !== undefined) {
                localVarQueryParameter['ActiveOnly'] = activeOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペースにユーザーを参加させる
         * @param {number} id 
         * @param {AddUserToWorkspaceRequest} [addUserToWorkspaceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdUsersPost: async (id: number, addUserToWorkspaceRequest?: AddUserToWorkspaceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdminWorkspacesIdUsersPost', 'id', id)
            const localVarPath = `/api/admin/workspaces/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addUserToWorkspaceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペースからユーザーを削除
         * @param {number} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdUsersUserIdDelete: async (id: number, userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdminWorkspacesIdUsersUserIdDelete', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiAdminWorkspacesIdUsersUserIdDelete', 'userId', userId)
            const localVarPath = `/api/admin/workspaces/{id}/users/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペース登録
         * @param {CreateWorkspaceRequest} [createWorkspaceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesPost: async (createWorkspaceRequest?: CreateWorkspaceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/workspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkspaceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminWorkspaceApi - functional programming interface
 */
export const AdminWorkspaceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminWorkspaceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ワークスペース一覧取得（ページネーション）
         * @param {number} [page] 
         * @param {boolean} [activeOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminWorkspacesGet(page?: number, activeOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceListItemResponsePagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminWorkspacesGet(page, activeOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminWorkspaceApi.apiAdminWorkspacesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペース有効化
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminWorkspacesIdActivatePatch(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminWorkspacesIdActivatePatch(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminWorkspaceApi.apiAdminWorkspacesIdActivatePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペース無効化
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminWorkspacesIdDeactivatePatch(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminWorkspacesIdDeactivatePatch(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminWorkspaceApi.apiAdminWorkspacesIdDeactivatePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペース削除
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminWorkspacesIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminWorkspacesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminWorkspaceApi.apiAdminWorkspacesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペース情報取得
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminWorkspacesIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminWorkspacesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminWorkspaceApi.apiAdminWorkspacesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペース更新
         * @param {number} id 
         * @param {UpdateWorkspaceRequest} [updateWorkspaceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminWorkspacesIdPut(id: number, updateWorkspaceRequest?: UpdateWorkspaceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminWorkspacesIdPut(id, updateWorkspaceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminWorkspaceApi.apiAdminWorkspacesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペースのメンバー一覧取得（ページネーション）
         * @param {number} id ワークスペースID
         * @param {number} [page] 
         * @param {boolean} [activeOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminWorkspacesIdUsersGet(id: number, page?: number, activeOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceUserDetailResponsePagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminWorkspacesIdUsersGet(id, page, activeOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminWorkspaceApi.apiAdminWorkspacesIdUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペースにユーザーを参加させる
         * @param {number} id 
         * @param {AddUserToWorkspaceRequest} [addUserToWorkspaceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminWorkspacesIdUsersPost(id: number, addUserToWorkspaceRequest?: AddUserToWorkspaceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminWorkspacesIdUsersPost(id, addUserToWorkspaceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminWorkspaceApi.apiAdminWorkspacesIdUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペースからユーザーを削除
         * @param {number} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminWorkspacesIdUsersUserIdDelete(id: number, userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminWorkspacesIdUsersUserIdDelete(id, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminWorkspaceApi.apiAdminWorkspacesIdUsersUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペース登録
         * @param {CreateWorkspaceRequest} [createWorkspaceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminWorkspacesPost(createWorkspaceRequest?: CreateWorkspaceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminWorkspacesPost(createWorkspaceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminWorkspaceApi.apiAdminWorkspacesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminWorkspaceApi - factory interface
 */
export const AdminWorkspaceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminWorkspaceApiFp(configuration)
    return {
        /**
         * 
         * @summary ワークスペース一覧取得（ページネーション）
         * @param {AdminWorkspaceApiApiAdminWorkspacesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesGet(requestParameters: AdminWorkspaceApiApiAdminWorkspacesGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceListItemResponsePagedResponse> {
            return localVarFp.apiAdminWorkspacesGet(requestParameters.page, requestParameters.activeOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペース有効化
         * @param {AdminWorkspaceApiApiAdminWorkspacesIdActivatePatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdActivatePatch(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdActivatePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiAdminWorkspacesIdActivatePatch(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペース無効化
         * @param {AdminWorkspaceApiApiAdminWorkspacesIdDeactivatePatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdDeactivatePatch(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdDeactivatePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiAdminWorkspacesIdDeactivatePatch(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペース削除
         * @param {AdminWorkspaceApiApiAdminWorkspacesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdDelete(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiAdminWorkspacesIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペース情報取得
         * @param {AdminWorkspaceApiApiAdminWorkspacesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdGet(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceDetailResponse> {
            return localVarFp.apiAdminWorkspacesIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペース更新
         * @param {AdminWorkspaceApiApiAdminWorkspacesIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdPut(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceResponse> {
            return localVarFp.apiAdminWorkspacesIdPut(requestParameters.id, requestParameters.updateWorkspaceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペースのメンバー一覧取得（ページネーション）
         * @param {AdminWorkspaceApiApiAdminWorkspacesIdUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdUsersGet(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdUsersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceUserDetailResponsePagedResponse> {
            return localVarFp.apiAdminWorkspacesIdUsersGet(requestParameters.id, requestParameters.page, requestParameters.activeOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペースにユーザーを参加させる
         * @param {AdminWorkspaceApiApiAdminWorkspacesIdUsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdUsersPost(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdUsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceUserResponse> {
            return localVarFp.apiAdminWorkspacesIdUsersPost(requestParameters.id, requestParameters.addUserToWorkspaceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペースからユーザーを削除
         * @param {AdminWorkspaceApiApiAdminWorkspacesIdUsersUserIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesIdUsersUserIdDelete(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdUsersUserIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiAdminWorkspacesIdUsersUserIdDelete(requestParameters.id, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペース登録
         * @param {AdminWorkspaceApiApiAdminWorkspacesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminWorkspacesPost(requestParameters: AdminWorkspaceApiApiAdminWorkspacesPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceResponse> {
            return localVarFp.apiAdminWorkspacesPost(requestParameters.createWorkspaceRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiAdminWorkspacesGet operation in AdminWorkspaceApi.
 */
export interface AdminWorkspaceApiApiAdminWorkspacesGetRequest {
    readonly page?: number

    readonly activeOnly?: boolean
}

/**
 * Request parameters for apiAdminWorkspacesIdActivatePatch operation in AdminWorkspaceApi.
 */
export interface AdminWorkspaceApiApiAdminWorkspacesIdActivatePatchRequest {
    readonly id: number
}

/**
 * Request parameters for apiAdminWorkspacesIdDeactivatePatch operation in AdminWorkspaceApi.
 */
export interface AdminWorkspaceApiApiAdminWorkspacesIdDeactivatePatchRequest {
    readonly id: number
}

/**
 * Request parameters for apiAdminWorkspacesIdDelete operation in AdminWorkspaceApi.
 */
export interface AdminWorkspaceApiApiAdminWorkspacesIdDeleteRequest {
    readonly id: number
}

/**
 * Request parameters for apiAdminWorkspacesIdGet operation in AdminWorkspaceApi.
 */
export interface AdminWorkspaceApiApiAdminWorkspacesIdGetRequest {
    readonly id: number
}

/**
 * Request parameters for apiAdminWorkspacesIdPut operation in AdminWorkspaceApi.
 */
export interface AdminWorkspaceApiApiAdminWorkspacesIdPutRequest {
    readonly id: number

    readonly updateWorkspaceRequest?: UpdateWorkspaceRequest
}

/**
 * Request parameters for apiAdminWorkspacesIdUsersGet operation in AdminWorkspaceApi.
 */
export interface AdminWorkspaceApiApiAdminWorkspacesIdUsersGetRequest {
    /**
     * ワークスペースID
     */
    readonly id: number

    readonly page?: number

    readonly activeOnly?: boolean
}

/**
 * Request parameters for apiAdminWorkspacesIdUsersPost operation in AdminWorkspaceApi.
 */
export interface AdminWorkspaceApiApiAdminWorkspacesIdUsersPostRequest {
    readonly id: number

    readonly addUserToWorkspaceRequest?: AddUserToWorkspaceRequest
}

/**
 * Request parameters for apiAdminWorkspacesIdUsersUserIdDelete operation in AdminWorkspaceApi.
 */
export interface AdminWorkspaceApiApiAdminWorkspacesIdUsersUserIdDeleteRequest {
    readonly id: number

    readonly userId: number
}

/**
 * Request parameters for apiAdminWorkspacesPost operation in AdminWorkspaceApi.
 */
export interface AdminWorkspaceApiApiAdminWorkspacesPostRequest {
    readonly createWorkspaceRequest?: CreateWorkspaceRequest
}

/**
 * AdminWorkspaceApi - object-oriented interface
 */
export class AdminWorkspaceApi extends BaseAPI {
    /**
     * 
     * @summary ワークスペース一覧取得（ページネーション）
     * @param {AdminWorkspaceApiApiAdminWorkspacesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminWorkspacesGet(requestParameters: AdminWorkspaceApiApiAdminWorkspacesGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminWorkspaceApiFp(this.configuration).apiAdminWorkspacesGet(requestParameters.page, requestParameters.activeOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペース有効化
     * @param {AdminWorkspaceApiApiAdminWorkspacesIdActivatePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminWorkspacesIdActivatePatch(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdActivatePatchRequest, options?: RawAxiosRequestConfig) {
        return AdminWorkspaceApiFp(this.configuration).apiAdminWorkspacesIdActivatePatch(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペース無効化
     * @param {AdminWorkspaceApiApiAdminWorkspacesIdDeactivatePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminWorkspacesIdDeactivatePatch(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdDeactivatePatchRequest, options?: RawAxiosRequestConfig) {
        return AdminWorkspaceApiFp(this.configuration).apiAdminWorkspacesIdDeactivatePatch(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペース削除
     * @param {AdminWorkspaceApiApiAdminWorkspacesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminWorkspacesIdDelete(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return AdminWorkspaceApiFp(this.configuration).apiAdminWorkspacesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペース情報取得
     * @param {AdminWorkspaceApiApiAdminWorkspacesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminWorkspacesIdGet(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdGetRequest, options?: RawAxiosRequestConfig) {
        return AdminWorkspaceApiFp(this.configuration).apiAdminWorkspacesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペース更新
     * @param {AdminWorkspaceApiApiAdminWorkspacesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminWorkspacesIdPut(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdPutRequest, options?: RawAxiosRequestConfig) {
        return AdminWorkspaceApiFp(this.configuration).apiAdminWorkspacesIdPut(requestParameters.id, requestParameters.updateWorkspaceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペースのメンバー一覧取得（ページネーション）
     * @param {AdminWorkspaceApiApiAdminWorkspacesIdUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminWorkspacesIdUsersGet(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdUsersGetRequest, options?: RawAxiosRequestConfig) {
        return AdminWorkspaceApiFp(this.configuration).apiAdminWorkspacesIdUsersGet(requestParameters.id, requestParameters.page, requestParameters.activeOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペースにユーザーを参加させる
     * @param {AdminWorkspaceApiApiAdminWorkspacesIdUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminWorkspacesIdUsersPost(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdUsersPostRequest, options?: RawAxiosRequestConfig) {
        return AdminWorkspaceApiFp(this.configuration).apiAdminWorkspacesIdUsersPost(requestParameters.id, requestParameters.addUserToWorkspaceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペースからユーザーを削除
     * @param {AdminWorkspaceApiApiAdminWorkspacesIdUsersUserIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminWorkspacesIdUsersUserIdDelete(requestParameters: AdminWorkspaceApiApiAdminWorkspacesIdUsersUserIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return AdminWorkspaceApiFp(this.configuration).apiAdminWorkspacesIdUsersUserIdDelete(requestParameters.id, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペース登録
     * @param {AdminWorkspaceApiApiAdminWorkspacesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiAdminWorkspacesPost(requestParameters: AdminWorkspaceApiApiAdminWorkspacesPostRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminWorkspaceApiFp(this.configuration).apiAdminWorkspacesPost(requestParameters.createWorkspaceRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BackendGenreApi - axios parameter creator
 */
export const BackendGenreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ジャンル一覧を取得
         * @param {number} [page] 
         * @param {boolean} [activeOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendGenresGet: async (page?: number, activeOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/genres`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (activeOnly !== undefined) {
                localVarQueryParameter['ActiveOnly'] = activeOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ジャンルのアクティブ状態を設定
         * @param {number} id ジャンルID
         * @param {SetActiveStatusRequest} [setActiveStatusRequest] アクティブ状態設定リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendGenresIdActiveStatusPut: async (id: number, setActiveStatusRequest?: SetActiveStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBackendGenresIdActiveStatusPut', 'id', id)
            const localVarPath = `/api/backend/genres/{id}/active-status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setActiveStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ジャンルを削除
         * @param {number} id ジャンルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendGenresIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBackendGenresIdDelete', 'id', id)
            const localVarPath = `/api/backend/genres/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ジャンル詳細を取得
         * @param {number} id ジャンルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendGenresIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBackendGenresIdGet', 'id', id)
            const localVarPath = `/api/backend/genres/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ジャンルを更新
         * @param {number} id ジャンルID
         * @param {UpdateGenreRequest} [updateGenreRequest] ジャンル更新リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendGenresIdPut: async (id: number, updateGenreRequest?: UpdateGenreRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBackendGenresIdPut', 'id', id)
            const localVarPath = `/api/backend/genres/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGenreRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ジャンルを作成
         * @param {CreateGenreRequest} [createGenreRequest] ジャンル作成リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendGenresPost: async (createGenreRequest?: CreateGenreRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/genres`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGenreRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BackendGenreApi - functional programming interface
 */
export const BackendGenreApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BackendGenreApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ジャンル一覧を取得
         * @param {number} [page] 
         * @param {boolean} [activeOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendGenresGet(page?: number, activeOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenreListItemResponsePagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendGenresGet(page, activeOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendGenreApi.apiBackendGenresGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ジャンルのアクティブ状態を設定
         * @param {number} id ジャンルID
         * @param {SetActiveStatusRequest} [setActiveStatusRequest] アクティブ状態設定リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendGenresIdActiveStatusPut(id: number, setActiveStatusRequest?: SetActiveStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendGenresIdActiveStatusPut(id, setActiveStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendGenreApi.apiBackendGenresIdActiveStatusPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ジャンルを削除
         * @param {number} id ジャンルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendGenresIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendGenresIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendGenreApi.apiBackendGenresIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ジャンル詳細を取得
         * @param {number} id ジャンルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendGenresIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenreDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendGenresIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendGenreApi.apiBackendGenresIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ジャンルを更新
         * @param {number} id ジャンルID
         * @param {UpdateGenreRequest} [updateGenreRequest] ジャンル更新リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendGenresIdPut(id: number, updateGenreRequest?: UpdateGenreRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenreResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendGenresIdPut(id, updateGenreRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendGenreApi.apiBackendGenresIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ジャンルを作成
         * @param {CreateGenreRequest} [createGenreRequest] ジャンル作成リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendGenresPost(createGenreRequest?: CreateGenreRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenreResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendGenresPost(createGenreRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendGenreApi.apiBackendGenresPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BackendGenreApi - factory interface
 */
export const BackendGenreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BackendGenreApiFp(configuration)
    return {
        /**
         * 
         * @summary ジャンル一覧を取得
         * @param {BackendGenreApiApiBackendGenresGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendGenresGet(requestParameters: BackendGenreApiApiBackendGenresGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GenreListItemResponsePagedResponse> {
            return localVarFp.apiBackendGenresGet(requestParameters.page, requestParameters.activeOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ジャンルのアクティブ状態を設定
         * @param {BackendGenreApiApiBackendGenresIdActiveStatusPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendGenresIdActiveStatusPut(requestParameters: BackendGenreApiApiBackendGenresIdActiveStatusPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiBackendGenresIdActiveStatusPut(requestParameters.id, requestParameters.setActiveStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ジャンルを削除
         * @param {BackendGenreApiApiBackendGenresIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendGenresIdDelete(requestParameters: BackendGenreApiApiBackendGenresIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiBackendGenresIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ジャンル詳細を取得
         * @param {BackendGenreApiApiBackendGenresIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendGenresIdGet(requestParameters: BackendGenreApiApiBackendGenresIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenreDetailResponse> {
            return localVarFp.apiBackendGenresIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ジャンルを更新
         * @param {BackendGenreApiApiBackendGenresIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendGenresIdPut(requestParameters: BackendGenreApiApiBackendGenresIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenreResponse> {
            return localVarFp.apiBackendGenresIdPut(requestParameters.id, requestParameters.updateGenreRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ジャンルを作成
         * @param {BackendGenreApiApiBackendGenresPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendGenresPost(requestParameters: BackendGenreApiApiBackendGenresPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GenreResponse> {
            return localVarFp.apiBackendGenresPost(requestParameters.createGenreRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiBackendGenresGet operation in BackendGenreApi.
 */
export interface BackendGenreApiApiBackendGenresGetRequest {
    readonly page?: number

    readonly activeOnly?: boolean
}

/**
 * Request parameters for apiBackendGenresIdActiveStatusPut operation in BackendGenreApi.
 */
export interface BackendGenreApiApiBackendGenresIdActiveStatusPutRequest {
    /**
     * ジャンルID
     */
    readonly id: number

    /**
     * アクティブ状態設定リクエスト
     */
    readonly setActiveStatusRequest?: SetActiveStatusRequest
}

/**
 * Request parameters for apiBackendGenresIdDelete operation in BackendGenreApi.
 */
export interface BackendGenreApiApiBackendGenresIdDeleteRequest {
    /**
     * ジャンルID
     */
    readonly id: number
}

/**
 * Request parameters for apiBackendGenresIdGet operation in BackendGenreApi.
 */
export interface BackendGenreApiApiBackendGenresIdGetRequest {
    /**
     * ジャンルID
     */
    readonly id: number
}

/**
 * Request parameters for apiBackendGenresIdPut operation in BackendGenreApi.
 */
export interface BackendGenreApiApiBackendGenresIdPutRequest {
    /**
     * ジャンルID
     */
    readonly id: number

    /**
     * ジャンル更新リクエスト
     */
    readonly updateGenreRequest?: UpdateGenreRequest
}

/**
 * Request parameters for apiBackendGenresPost operation in BackendGenreApi.
 */
export interface BackendGenreApiApiBackendGenresPostRequest {
    /**
     * ジャンル作成リクエスト
     */
    readonly createGenreRequest?: CreateGenreRequest
}

/**
 * BackendGenreApi - object-oriented interface
 */
export class BackendGenreApi extends BaseAPI {
    /**
     * 
     * @summary ジャンル一覧を取得
     * @param {BackendGenreApiApiBackendGenresGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendGenresGet(requestParameters: BackendGenreApiApiBackendGenresGetRequest = {}, options?: RawAxiosRequestConfig) {
        return BackendGenreApiFp(this.configuration).apiBackendGenresGet(requestParameters.page, requestParameters.activeOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ジャンルのアクティブ状態を設定
     * @param {BackendGenreApiApiBackendGenresIdActiveStatusPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendGenresIdActiveStatusPut(requestParameters: BackendGenreApiApiBackendGenresIdActiveStatusPutRequest, options?: RawAxiosRequestConfig) {
        return BackendGenreApiFp(this.configuration).apiBackendGenresIdActiveStatusPut(requestParameters.id, requestParameters.setActiveStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ジャンルを削除
     * @param {BackendGenreApiApiBackendGenresIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendGenresIdDelete(requestParameters: BackendGenreApiApiBackendGenresIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return BackendGenreApiFp(this.configuration).apiBackendGenresIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ジャンル詳細を取得
     * @param {BackendGenreApiApiBackendGenresIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendGenresIdGet(requestParameters: BackendGenreApiApiBackendGenresIdGetRequest, options?: RawAxiosRequestConfig) {
        return BackendGenreApiFp(this.configuration).apiBackendGenresIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ジャンルを更新
     * @param {BackendGenreApiApiBackendGenresIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendGenresIdPut(requestParameters: BackendGenreApiApiBackendGenresIdPutRequest, options?: RawAxiosRequestConfig) {
        return BackendGenreApiFp(this.configuration).apiBackendGenresIdPut(requestParameters.id, requestParameters.updateGenreRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ジャンルを作成
     * @param {BackendGenreApiApiBackendGenresPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendGenresPost(requestParameters: BackendGenreApiApiBackendGenresPostRequest = {}, options?: RawAxiosRequestConfig) {
        return BackendGenreApiFp(this.configuration).apiBackendGenresPost(requestParameters.createGenreRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BackendHangfireTestApi - axios parameter creator
 */
export const BackendHangfireTestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary バッチジョブのテスト
         * @param {number} [count] ジョブ数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestBatchPost: async (count?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/hangfire-test/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 継続ジョブのテスト
         * @param {string} [parentMessage] 親ジョブのメッセージ
         * @param {string} [childMessage] 子ジョブのメッセージ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestContinuationPost: async (parentMessage?: string, childMessage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/hangfire-test/continuation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (parentMessage !== undefined) {
                localVarQueryParameter['parentMessage'] = parentMessage;
            }

            if (childMessage !== undefined) {
                localVarQueryParameter['childMessage'] = childMessage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 遅延ジョブのテスト
         * @param {string} [message] ログに出力するメッセージ
         * @param {number} [delaySeconds] 遅延秒数（デフォルト: 10秒）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestDelayedPost: async (message?: string, delaySeconds?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/hangfire-test/delayed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }

            if (delaySeconds !== undefined) {
                localVarQueryParameter['delaySeconds'] = delaySeconds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary エラーを発生させるジョブのテスト
         * @param {string} [errorMessage] エラーメッセージ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestErrorPost: async (errorMessage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/hangfire-test/error`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (errorMessage !== undefined) {
                localVarQueryParameter['errorMessage'] = errorMessage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 失敗したジョブを削除
         * @param {string} jobId 削除するジョブID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestFailedJobIdDelete: async (jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('apiBackendHangfireTestFailedJobIdDelete', 'jobId', jobId)
            const localVarPath = `/api/backend/hangfire-test/failed/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fire-and-forget ジョブのテスト
         * @param {string} [message] ログに出力するメッセージ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestFireAndForgetPost: async (message?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/hangfire-test/fire-and-forget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 長時間実行ジョブのテスト
         * @param {number} [durationSeconds] 実行時間（秒）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestLongRunningPost: async (durationSeconds?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/hangfire-test/long-running`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (durationSeconds !== undefined) {
                localVarQueryParameter['durationSeconds'] = durationSeconds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 繰り返しジョブのテスト（Cron式）
         * @param {string} [message] ログに出力するメッセージ
         * @param {string} [cronExpression] Cron式（デフォルト: 毎分実行）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestRecurringPost: async (message?: string, cronExpression?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/hangfire-test/recurring`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }

            if (cronExpression !== undefined) {
                localVarQueryParameter['cronExpression'] = cronExpression;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 繰り返しジョブの削除
         * @param {string} recurringJobId 削除する繰り返しジョブID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestRecurringRecurringJobIdDelete: async (recurringJobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recurringJobId' is not null or undefined
            assertParamExists('apiBackendHangfireTestRecurringRecurringJobIdDelete', 'recurringJobId', recurringJobId)
            const localVarPath = `/api/backend/hangfire-test/recurring/{recurringJobId}`
                .replace(`{${"recurringJobId"}}`, encodeURIComponent(String(recurringJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BackendHangfireTestApi - functional programming interface
 */
export const BackendHangfireTestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BackendHangfireTestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary バッチジョブのテスト
         * @param {number} [count] ジョブ数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendHangfireTestBatchPost(count?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendHangfireTestBatchPost(count, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendHangfireTestApi.apiBackendHangfireTestBatchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 継続ジョブのテスト
         * @param {string} [parentMessage] 親ジョブのメッセージ
         * @param {string} [childMessage] 子ジョブのメッセージ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendHangfireTestContinuationPost(parentMessage?: string, childMessage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendHangfireTestContinuationPost(parentMessage, childMessage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendHangfireTestApi.apiBackendHangfireTestContinuationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 遅延ジョブのテスト
         * @param {string} [message] ログに出力するメッセージ
         * @param {number} [delaySeconds] 遅延秒数（デフォルト: 10秒）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendHangfireTestDelayedPost(message?: string, delaySeconds?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendHangfireTestDelayedPost(message, delaySeconds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendHangfireTestApi.apiBackendHangfireTestDelayedPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary エラーを発生させるジョブのテスト
         * @param {string} [errorMessage] エラーメッセージ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendHangfireTestErrorPost(errorMessage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendHangfireTestErrorPost(errorMessage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendHangfireTestApi.apiBackendHangfireTestErrorPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 失敗したジョブを削除
         * @param {string} jobId 削除するジョブID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendHangfireTestFailedJobIdDelete(jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendHangfireTestFailedJobIdDelete(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendHangfireTestApi.apiBackendHangfireTestFailedJobIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fire-and-forget ジョブのテスト
         * @param {string} [message] ログに出力するメッセージ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendHangfireTestFireAndForgetPost(message?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendHangfireTestFireAndForgetPost(message, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendHangfireTestApi.apiBackendHangfireTestFireAndForgetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 長時間実行ジョブのテスト
         * @param {number} [durationSeconds] 実行時間（秒）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendHangfireTestLongRunningPost(durationSeconds?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendHangfireTestLongRunningPost(durationSeconds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendHangfireTestApi.apiBackendHangfireTestLongRunningPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 繰り返しジョブのテスト（Cron式）
         * @param {string} [message] ログに出力するメッセージ
         * @param {string} [cronExpression] Cron式（デフォルト: 毎分実行）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendHangfireTestRecurringPost(message?: string, cronExpression?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendHangfireTestRecurringPost(message, cronExpression, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendHangfireTestApi.apiBackendHangfireTestRecurringPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 繰り返しジョブの削除
         * @param {string} recurringJobId 削除する繰り返しジョブID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendHangfireTestRecurringRecurringJobIdDelete(recurringJobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendHangfireTestRecurringRecurringJobIdDelete(recurringJobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendHangfireTestApi.apiBackendHangfireTestRecurringRecurringJobIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BackendHangfireTestApi - factory interface
 */
export const BackendHangfireTestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BackendHangfireTestApiFp(configuration)
    return {
        /**
         * 
         * @summary バッチジョブのテスト
         * @param {BackendHangfireTestApiApiBackendHangfireTestBatchPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestBatchPost(requestParameters: BackendHangfireTestApiApiBackendHangfireTestBatchPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBackendHangfireTestBatchPost(requestParameters.count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 継続ジョブのテスト
         * @param {BackendHangfireTestApiApiBackendHangfireTestContinuationPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestContinuationPost(requestParameters: BackendHangfireTestApiApiBackendHangfireTestContinuationPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBackendHangfireTestContinuationPost(requestParameters.parentMessage, requestParameters.childMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 遅延ジョブのテスト
         * @param {BackendHangfireTestApiApiBackendHangfireTestDelayedPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestDelayedPost(requestParameters: BackendHangfireTestApiApiBackendHangfireTestDelayedPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBackendHangfireTestDelayedPost(requestParameters.message, requestParameters.delaySeconds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary エラーを発生させるジョブのテスト
         * @param {BackendHangfireTestApiApiBackendHangfireTestErrorPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestErrorPost(requestParameters: BackendHangfireTestApiApiBackendHangfireTestErrorPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBackendHangfireTestErrorPost(requestParameters.errorMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 失敗したジョブを削除
         * @param {BackendHangfireTestApiApiBackendHangfireTestFailedJobIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestFailedJobIdDelete(requestParameters: BackendHangfireTestApiApiBackendHangfireTestFailedJobIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBackendHangfireTestFailedJobIdDelete(requestParameters.jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fire-and-forget ジョブのテスト
         * @param {BackendHangfireTestApiApiBackendHangfireTestFireAndForgetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestFireAndForgetPost(requestParameters: BackendHangfireTestApiApiBackendHangfireTestFireAndForgetPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBackendHangfireTestFireAndForgetPost(requestParameters.message, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 長時間実行ジョブのテスト
         * @param {BackendHangfireTestApiApiBackendHangfireTestLongRunningPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestLongRunningPost(requestParameters: BackendHangfireTestApiApiBackendHangfireTestLongRunningPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBackendHangfireTestLongRunningPost(requestParameters.durationSeconds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 繰り返しジョブのテスト（Cron式）
         * @param {BackendHangfireTestApiApiBackendHangfireTestRecurringPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestRecurringPost(requestParameters: BackendHangfireTestApiApiBackendHangfireTestRecurringPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBackendHangfireTestRecurringPost(requestParameters.message, requestParameters.cronExpression, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 繰り返しジョブの削除
         * @param {BackendHangfireTestApiApiBackendHangfireTestRecurringRecurringJobIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendHangfireTestRecurringRecurringJobIdDelete(requestParameters: BackendHangfireTestApiApiBackendHangfireTestRecurringRecurringJobIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBackendHangfireTestRecurringRecurringJobIdDelete(requestParameters.recurringJobId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiBackendHangfireTestBatchPost operation in BackendHangfireTestApi.
 */
export interface BackendHangfireTestApiApiBackendHangfireTestBatchPostRequest {
    /**
     * ジョブ数
     */
    readonly count?: number
}

/**
 * Request parameters for apiBackendHangfireTestContinuationPost operation in BackendHangfireTestApi.
 */
export interface BackendHangfireTestApiApiBackendHangfireTestContinuationPostRequest {
    /**
     * 親ジョブのメッセージ
     */
    readonly parentMessage?: string

    /**
     * 子ジョブのメッセージ
     */
    readonly childMessage?: string
}

/**
 * Request parameters for apiBackendHangfireTestDelayedPost operation in BackendHangfireTestApi.
 */
export interface BackendHangfireTestApiApiBackendHangfireTestDelayedPostRequest {
    /**
     * ログに出力するメッセージ
     */
    readonly message?: string

    /**
     * 遅延秒数（デフォルト: 10秒）
     */
    readonly delaySeconds?: number
}

/**
 * Request parameters for apiBackendHangfireTestErrorPost operation in BackendHangfireTestApi.
 */
export interface BackendHangfireTestApiApiBackendHangfireTestErrorPostRequest {
    /**
     * エラーメッセージ
     */
    readonly errorMessage?: string
}

/**
 * Request parameters for apiBackendHangfireTestFailedJobIdDelete operation in BackendHangfireTestApi.
 */
export interface BackendHangfireTestApiApiBackendHangfireTestFailedJobIdDeleteRequest {
    /**
     * 削除するジョブID
     */
    readonly jobId: string
}

/**
 * Request parameters for apiBackendHangfireTestFireAndForgetPost operation in BackendHangfireTestApi.
 */
export interface BackendHangfireTestApiApiBackendHangfireTestFireAndForgetPostRequest {
    /**
     * ログに出力するメッセージ
     */
    readonly message?: string
}

/**
 * Request parameters for apiBackendHangfireTestLongRunningPost operation in BackendHangfireTestApi.
 */
export interface BackendHangfireTestApiApiBackendHangfireTestLongRunningPostRequest {
    /**
     * 実行時間（秒）
     */
    readonly durationSeconds?: number
}

/**
 * Request parameters for apiBackendHangfireTestRecurringPost operation in BackendHangfireTestApi.
 */
export interface BackendHangfireTestApiApiBackendHangfireTestRecurringPostRequest {
    /**
     * ログに出力するメッセージ
     */
    readonly message?: string

    /**
     * Cron式（デフォルト: 毎分実行）
     */
    readonly cronExpression?: string
}

/**
 * Request parameters for apiBackendHangfireTestRecurringRecurringJobIdDelete operation in BackendHangfireTestApi.
 */
export interface BackendHangfireTestApiApiBackendHangfireTestRecurringRecurringJobIdDeleteRequest {
    /**
     * 削除する繰り返しジョブID
     */
    readonly recurringJobId: string
}

/**
 * BackendHangfireTestApi - object-oriented interface
 */
export class BackendHangfireTestApi extends BaseAPI {
    /**
     * 
     * @summary バッチジョブのテスト
     * @param {BackendHangfireTestApiApiBackendHangfireTestBatchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendHangfireTestBatchPost(requestParameters: BackendHangfireTestApiApiBackendHangfireTestBatchPostRequest = {}, options?: RawAxiosRequestConfig) {
        return BackendHangfireTestApiFp(this.configuration).apiBackendHangfireTestBatchPost(requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 継続ジョブのテスト
     * @param {BackendHangfireTestApiApiBackendHangfireTestContinuationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendHangfireTestContinuationPost(requestParameters: BackendHangfireTestApiApiBackendHangfireTestContinuationPostRequest = {}, options?: RawAxiosRequestConfig) {
        return BackendHangfireTestApiFp(this.configuration).apiBackendHangfireTestContinuationPost(requestParameters.parentMessage, requestParameters.childMessage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 遅延ジョブのテスト
     * @param {BackendHangfireTestApiApiBackendHangfireTestDelayedPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendHangfireTestDelayedPost(requestParameters: BackendHangfireTestApiApiBackendHangfireTestDelayedPostRequest = {}, options?: RawAxiosRequestConfig) {
        return BackendHangfireTestApiFp(this.configuration).apiBackendHangfireTestDelayedPost(requestParameters.message, requestParameters.delaySeconds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary エラーを発生させるジョブのテスト
     * @param {BackendHangfireTestApiApiBackendHangfireTestErrorPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendHangfireTestErrorPost(requestParameters: BackendHangfireTestApiApiBackendHangfireTestErrorPostRequest = {}, options?: RawAxiosRequestConfig) {
        return BackendHangfireTestApiFp(this.configuration).apiBackendHangfireTestErrorPost(requestParameters.errorMessage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 失敗したジョブを削除
     * @param {BackendHangfireTestApiApiBackendHangfireTestFailedJobIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendHangfireTestFailedJobIdDelete(requestParameters: BackendHangfireTestApiApiBackendHangfireTestFailedJobIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return BackendHangfireTestApiFp(this.configuration).apiBackendHangfireTestFailedJobIdDelete(requestParameters.jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fire-and-forget ジョブのテスト
     * @param {BackendHangfireTestApiApiBackendHangfireTestFireAndForgetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendHangfireTestFireAndForgetPost(requestParameters: BackendHangfireTestApiApiBackendHangfireTestFireAndForgetPostRequest = {}, options?: RawAxiosRequestConfig) {
        return BackendHangfireTestApiFp(this.configuration).apiBackendHangfireTestFireAndForgetPost(requestParameters.message, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 長時間実行ジョブのテスト
     * @param {BackendHangfireTestApiApiBackendHangfireTestLongRunningPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendHangfireTestLongRunningPost(requestParameters: BackendHangfireTestApiApiBackendHangfireTestLongRunningPostRequest = {}, options?: RawAxiosRequestConfig) {
        return BackendHangfireTestApiFp(this.configuration).apiBackendHangfireTestLongRunningPost(requestParameters.durationSeconds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 繰り返しジョブのテスト（Cron式）
     * @param {BackendHangfireTestApiApiBackendHangfireTestRecurringPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendHangfireTestRecurringPost(requestParameters: BackendHangfireTestApiApiBackendHangfireTestRecurringPostRequest = {}, options?: RawAxiosRequestConfig) {
        return BackendHangfireTestApiFp(this.configuration).apiBackendHangfireTestRecurringPost(requestParameters.message, requestParameters.cronExpression, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 繰り返しジョブの削除
     * @param {BackendHangfireTestApiApiBackendHangfireTestRecurringRecurringJobIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendHangfireTestRecurringRecurringJobIdDelete(requestParameters: BackendHangfireTestApiApiBackendHangfireTestRecurringRecurringJobIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return BackendHangfireTestApiFp(this.configuration).apiBackendHangfireTestRecurringRecurringJobIdDelete(requestParameters.recurringJobId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BackendOrganizationApi - axios parameter creator
 */
export const BackendOrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 組織一覧取得（ページネーション対応）
         * @param {number} [page] 
         * @param {boolean} [activeOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendOrganizationsGet: async (page?: number, activeOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (activeOnly !== undefined) {
                localVarQueryParameter['ActiveOnly'] = activeOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 組織のアクティブ状態を設定
         * @param {number} id 組織ID
         * @param {SetActiveStatusRequest} [setActiveStatusRequest] アクティブ状態設定リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendOrganizationsIdActiveStatusPut: async (id: number, setActiveStatusRequest?: SetActiveStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBackendOrganizationsIdActiveStatusPut', 'id', id)
            const localVarPath = `/api/backend/organizations/{id}/active-status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setActiveStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 組織削除
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendOrganizationsIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBackendOrganizationsIdDelete', 'id', id)
            const localVarPath = `/api/backend/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 組織情報取得
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendOrganizationsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBackendOrganizationsIdGet', 'id', id)
            const localVarPath = `/api/backend/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 組織更新
         * @param {number} id 
         * @param {UpdateOrganizationRequest} [updateOrganizationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendOrganizationsIdPut: async (id: number, updateOrganizationRequest?: UpdateOrganizationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBackendOrganizationsIdPut', 'id', id)
            const localVarPath = `/api/backend/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrganizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 組織の所属ユーザー取得
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendOrganizationsIdUsersGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBackendOrganizationsIdUsersGet', 'id', id)
            const localVarPath = `/api/backend/organizations/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BackendOrganizationApi - functional programming interface
 */
export const BackendOrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BackendOrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 組織一覧取得（ページネーション対応）
         * @param {number} [page] 
         * @param {boolean} [activeOnly] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendOrganizationsGet(page?: number, activeOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationListItemResponsePagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendOrganizationsGet(page, activeOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendOrganizationApi.apiBackendOrganizationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 組織のアクティブ状態を設定
         * @param {number} id 組織ID
         * @param {SetActiveStatusRequest} [setActiveStatusRequest] アクティブ状態設定リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendOrganizationsIdActiveStatusPut(id: number, setActiveStatusRequest?: SetActiveStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendOrganizationsIdActiveStatusPut(id, setActiveStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendOrganizationApi.apiBackendOrganizationsIdActiveStatusPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 組織削除
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendOrganizationsIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendOrganizationsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendOrganizationApi.apiBackendOrganizationsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 組織情報取得
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendOrganizationsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendOrganizationsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendOrganizationApi.apiBackendOrganizationsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 組織更新
         * @param {number} id 
         * @param {UpdateOrganizationRequest} [updateOrganizationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendOrganizationsIdPut(id: number, updateOrganizationRequest?: UpdateOrganizationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendOrganizationsIdPut(id, updateOrganizationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendOrganizationApi.apiBackendOrganizationsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 組織の所属ユーザー取得
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendOrganizationsIdUsersGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserListItemResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendOrganizationsIdUsersGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendOrganizationApi.apiBackendOrganizationsIdUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BackendOrganizationApi - factory interface
 */
export const BackendOrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BackendOrganizationApiFp(configuration)
    return {
        /**
         * 
         * @summary 組織一覧取得（ページネーション対応）
         * @param {BackendOrganizationApiApiBackendOrganizationsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendOrganizationsGet(requestParameters: BackendOrganizationApiApiBackendOrganizationsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationListItemResponsePagedResponse> {
            return localVarFp.apiBackendOrganizationsGet(requestParameters.page, requestParameters.activeOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 組織のアクティブ状態を設定
         * @param {BackendOrganizationApiApiBackendOrganizationsIdActiveStatusPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendOrganizationsIdActiveStatusPut(requestParameters: BackendOrganizationApiApiBackendOrganizationsIdActiveStatusPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiBackendOrganizationsIdActiveStatusPut(requestParameters.id, requestParameters.setActiveStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 組織削除
         * @param {BackendOrganizationApiApiBackendOrganizationsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendOrganizationsIdDelete(requestParameters: BackendOrganizationApiApiBackendOrganizationsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiBackendOrganizationsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 組織情報取得
         * @param {BackendOrganizationApiApiBackendOrganizationsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendOrganizationsIdGet(requestParameters: BackendOrganizationApiApiBackendOrganizationsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationDetailResponse> {
            return localVarFp.apiBackendOrganizationsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 組織更新
         * @param {BackendOrganizationApiApiBackendOrganizationsIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendOrganizationsIdPut(requestParameters: BackendOrganizationApiApiBackendOrganizationsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationResponse> {
            return localVarFp.apiBackendOrganizationsIdPut(requestParameters.id, requestParameters.updateOrganizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 組織の所属ユーザー取得
         * @param {BackendOrganizationApiApiBackendOrganizationsIdUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendOrganizationsIdUsersGet(requestParameters: BackendOrganizationApiApiBackendOrganizationsIdUsersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserListItemResponse>> {
            return localVarFp.apiBackendOrganizationsIdUsersGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiBackendOrganizationsGet operation in BackendOrganizationApi.
 */
export interface BackendOrganizationApiApiBackendOrganizationsGetRequest {
    readonly page?: number

    readonly activeOnly?: boolean
}

/**
 * Request parameters for apiBackendOrganizationsIdActiveStatusPut operation in BackendOrganizationApi.
 */
export interface BackendOrganizationApiApiBackendOrganizationsIdActiveStatusPutRequest {
    /**
     * 組織ID
     */
    readonly id: number

    /**
     * アクティブ状態設定リクエスト
     */
    readonly setActiveStatusRequest?: SetActiveStatusRequest
}

/**
 * Request parameters for apiBackendOrganizationsIdDelete operation in BackendOrganizationApi.
 */
export interface BackendOrganizationApiApiBackendOrganizationsIdDeleteRequest {
    readonly id: number
}

/**
 * Request parameters for apiBackendOrganizationsIdGet operation in BackendOrganizationApi.
 */
export interface BackendOrganizationApiApiBackendOrganizationsIdGetRequest {
    readonly id: number
}

/**
 * Request parameters for apiBackendOrganizationsIdPut operation in BackendOrganizationApi.
 */
export interface BackendOrganizationApiApiBackendOrganizationsIdPutRequest {
    readonly id: number

    readonly updateOrganizationRequest?: UpdateOrganizationRequest
}

/**
 * Request parameters for apiBackendOrganizationsIdUsersGet operation in BackendOrganizationApi.
 */
export interface BackendOrganizationApiApiBackendOrganizationsIdUsersGetRequest {
    readonly id: number
}

/**
 * BackendOrganizationApi - object-oriented interface
 */
export class BackendOrganizationApi extends BaseAPI {
    /**
     * 
     * @summary 組織一覧取得（ページネーション対応）
     * @param {BackendOrganizationApiApiBackendOrganizationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendOrganizationsGet(requestParameters: BackendOrganizationApiApiBackendOrganizationsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return BackendOrganizationApiFp(this.configuration).apiBackendOrganizationsGet(requestParameters.page, requestParameters.activeOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 組織のアクティブ状態を設定
     * @param {BackendOrganizationApiApiBackendOrganizationsIdActiveStatusPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendOrganizationsIdActiveStatusPut(requestParameters: BackendOrganizationApiApiBackendOrganizationsIdActiveStatusPutRequest, options?: RawAxiosRequestConfig) {
        return BackendOrganizationApiFp(this.configuration).apiBackendOrganizationsIdActiveStatusPut(requestParameters.id, requestParameters.setActiveStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 組織削除
     * @param {BackendOrganizationApiApiBackendOrganizationsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendOrganizationsIdDelete(requestParameters: BackendOrganizationApiApiBackendOrganizationsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return BackendOrganizationApiFp(this.configuration).apiBackendOrganizationsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 組織情報取得
     * @param {BackendOrganizationApiApiBackendOrganizationsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendOrganizationsIdGet(requestParameters: BackendOrganizationApiApiBackendOrganizationsIdGetRequest, options?: RawAxiosRequestConfig) {
        return BackendOrganizationApiFp(this.configuration).apiBackendOrganizationsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 組織更新
     * @param {BackendOrganizationApiApiBackendOrganizationsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendOrganizationsIdPut(requestParameters: BackendOrganizationApiApiBackendOrganizationsIdPutRequest, options?: RawAxiosRequestConfig) {
        return BackendOrganizationApiFp(this.configuration).apiBackendOrganizationsIdPut(requestParameters.id, requestParameters.updateOrganizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 組織の所属ユーザー取得
     * @param {BackendOrganizationApiApiBackendOrganizationsIdUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendOrganizationsIdUsersGet(requestParameters: BackendOrganizationApiApiBackendOrganizationsIdUsersGetRequest, options?: RawAxiosRequestConfig) {
        return BackendOrganizationApiFp(this.configuration).apiBackendOrganizationsIdUsersGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BackendPermissionApi - axios parameter creator
 */
export const BackendPermissionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary カテゴリで権限取得
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendPermissionsCategoryCategoryGet: async (category: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('apiBackendPermissionsCategoryCategoryGet', 'category', category)
            const localVarPath = `/api/backend/permissions/category/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 全権限取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendPermissionsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 権限削除
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendPermissionsIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBackendPermissionsIdDelete', 'id', id)
            const localVarPath = `/api/backend/permissions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 権限取得
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendPermissionsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBackendPermissionsIdGet', 'id', id)
            const localVarPath = `/api/backend/permissions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 権限作成
         * @param {CreatePermissionRequest} [createPermissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendPermissionsPost: async (createPermissionRequest?: CreatePermissionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPermissionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BackendPermissionApi - functional programming interface
 */
export const BackendPermissionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BackendPermissionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary カテゴリで権限取得
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendPermissionsCategoryCategoryGet(category: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermissionListItemResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendPermissionsCategoryCategoryGet(category, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendPermissionApi.apiBackendPermissionsCategoryCategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 全権限取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendPermissionsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermissionListItemResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendPermissionsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendPermissionApi.apiBackendPermissionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 権限削除
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendPermissionsIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendPermissionsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendPermissionApi.apiBackendPermissionsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 権限取得
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendPermissionsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendPermissionsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendPermissionApi.apiBackendPermissionsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 権限作成
         * @param {CreatePermissionRequest} [createPermissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendPermissionsPost(createPermissionRequest?: CreatePermissionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendPermissionsPost(createPermissionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendPermissionApi.apiBackendPermissionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BackendPermissionApi - factory interface
 */
export const BackendPermissionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BackendPermissionApiFp(configuration)
    return {
        /**
         * 
         * @summary カテゴリで権限取得
         * @param {BackendPermissionApiApiBackendPermissionsCategoryCategoryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendPermissionsCategoryCategoryGet(requestParameters: BackendPermissionApiApiBackendPermissionsCategoryCategoryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PermissionListItemResponse>> {
            return localVarFp.apiBackendPermissionsCategoryCategoryGet(requestParameters.category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 全権限取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendPermissionsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<PermissionListItemResponse>> {
            return localVarFp.apiBackendPermissionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 権限削除
         * @param {BackendPermissionApiApiBackendPermissionsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendPermissionsIdDelete(requestParameters: BackendPermissionApiApiBackendPermissionsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiBackendPermissionsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 権限取得
         * @param {BackendPermissionApiApiBackendPermissionsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendPermissionsIdGet(requestParameters: BackendPermissionApiApiBackendPermissionsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PermissionDetailResponse> {
            return localVarFp.apiBackendPermissionsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 権限作成
         * @param {BackendPermissionApiApiBackendPermissionsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendPermissionsPost(requestParameters: BackendPermissionApiApiBackendPermissionsPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PermissionResponse> {
            return localVarFp.apiBackendPermissionsPost(requestParameters.createPermissionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiBackendPermissionsCategoryCategoryGet operation in BackendPermissionApi.
 */
export interface BackendPermissionApiApiBackendPermissionsCategoryCategoryGetRequest {
    readonly category: string
}

/**
 * Request parameters for apiBackendPermissionsIdDelete operation in BackendPermissionApi.
 */
export interface BackendPermissionApiApiBackendPermissionsIdDeleteRequest {
    readonly id: number
}

/**
 * Request parameters for apiBackendPermissionsIdGet operation in BackendPermissionApi.
 */
export interface BackendPermissionApiApiBackendPermissionsIdGetRequest {
    readonly id: number
}

/**
 * Request parameters for apiBackendPermissionsPost operation in BackendPermissionApi.
 */
export interface BackendPermissionApiApiBackendPermissionsPostRequest {
    readonly createPermissionRequest?: CreatePermissionRequest
}

/**
 * BackendPermissionApi - object-oriented interface
 */
export class BackendPermissionApi extends BaseAPI {
    /**
     * 
     * @summary カテゴリで権限取得
     * @param {BackendPermissionApiApiBackendPermissionsCategoryCategoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendPermissionsCategoryCategoryGet(requestParameters: BackendPermissionApiApiBackendPermissionsCategoryCategoryGetRequest, options?: RawAxiosRequestConfig) {
        return BackendPermissionApiFp(this.configuration).apiBackendPermissionsCategoryCategoryGet(requestParameters.category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 全権限取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendPermissionsGet(options?: RawAxiosRequestConfig) {
        return BackendPermissionApiFp(this.configuration).apiBackendPermissionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 権限削除
     * @param {BackendPermissionApiApiBackendPermissionsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendPermissionsIdDelete(requestParameters: BackendPermissionApiApiBackendPermissionsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return BackendPermissionApiFp(this.configuration).apiBackendPermissionsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 権限取得
     * @param {BackendPermissionApiApiBackendPermissionsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendPermissionsIdGet(requestParameters: BackendPermissionApiApiBackendPermissionsIdGetRequest, options?: RawAxiosRequestConfig) {
        return BackendPermissionApiFp(this.configuration).apiBackendPermissionsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 権限作成
     * @param {BackendPermissionApiApiBackendPermissionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendPermissionsPost(requestParameters: BackendPermissionApiApiBackendPermissionsPostRequest = {}, options?: RawAxiosRequestConfig) {
        return BackendPermissionApiFp(this.configuration).apiBackendPermissionsPost(requestParameters.createPermissionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BackendRoleApi - axios parameter creator
 */
export const BackendRoleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 全ロール取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendRolesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ロール削除
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendRolesIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBackendRolesIdDelete', 'id', id)
            const localVarPath = `/api/backend/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ロール取得
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendRolesIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBackendRolesIdGet', 'id', id)
            const localVarPath = `/api/backend/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ロール作成
         * @param {CreateRoleRequest} [createRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendRolesPost: async (createRoleRequest?: CreateRoleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ロールに権限を設定（既存の権限を置き換える）
         * @param {number} roleId 
         * @param {SetPermissionsToRoleRequest} [setPermissionsToRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendRolesRoleIdPermissionsPut: async (roleId: number, setPermissionsToRoleRequest?: SetPermissionsToRoleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiBackendRolesRoleIdPermissionsPut', 'roleId', roleId)
            const localVarPath = `/api/backend/roles/{roleId}/permissions`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setPermissionsToRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BackendRoleApi - functional programming interface
 */
export const BackendRoleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BackendRoleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 全ロール取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendRolesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleListItemResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendRolesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendRoleApi.apiBackendRolesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ロール削除
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendRolesIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendRolesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendRoleApi.apiBackendRolesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ロール取得
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendRolesIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendRolesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendRoleApi.apiBackendRolesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ロール作成
         * @param {CreateRoleRequest} [createRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendRolesPost(createRoleRequest?: CreateRoleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendRolesPost(createRoleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendRoleApi.apiBackendRolesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ロールに権限を設定（既存の権限を置き換える）
         * @param {number} roleId 
         * @param {SetPermissionsToRoleRequest} [setPermissionsToRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendRolesRoleIdPermissionsPut(roleId: number, setPermissionsToRoleRequest?: SetPermissionsToRoleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendRolesRoleIdPermissionsPut(roleId, setPermissionsToRoleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendRoleApi.apiBackendRolesRoleIdPermissionsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BackendRoleApi - factory interface
 */
export const BackendRoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BackendRoleApiFp(configuration)
    return {
        /**
         * 
         * @summary 全ロール取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendRolesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<RoleListItemResponse>> {
            return localVarFp.apiBackendRolesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ロール削除
         * @param {BackendRoleApiApiBackendRolesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendRolesIdDelete(requestParameters: BackendRoleApiApiBackendRolesIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiBackendRolesIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ロール取得
         * @param {BackendRoleApiApiBackendRolesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendRolesIdGet(requestParameters: BackendRoleApiApiBackendRolesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoleDetailResponse> {
            return localVarFp.apiBackendRolesIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ロール作成
         * @param {BackendRoleApiApiBackendRolesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendRolesPost(requestParameters: BackendRoleApiApiBackendRolesPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<RoleResponse> {
            return localVarFp.apiBackendRolesPost(requestParameters.createRoleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ロールに権限を設定（既存の権限を置き換える）
         * @param {BackendRoleApiApiBackendRolesRoleIdPermissionsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendRolesRoleIdPermissionsPut(requestParameters: BackendRoleApiApiBackendRolesRoleIdPermissionsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoleDetailResponse> {
            return localVarFp.apiBackendRolesRoleIdPermissionsPut(requestParameters.roleId, requestParameters.setPermissionsToRoleRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiBackendRolesIdDelete operation in BackendRoleApi.
 */
export interface BackendRoleApiApiBackendRolesIdDeleteRequest {
    readonly id: number
}

/**
 * Request parameters for apiBackendRolesIdGet operation in BackendRoleApi.
 */
export interface BackendRoleApiApiBackendRolesIdGetRequest {
    readonly id: number
}

/**
 * Request parameters for apiBackendRolesPost operation in BackendRoleApi.
 */
export interface BackendRoleApiApiBackendRolesPostRequest {
    readonly createRoleRequest?: CreateRoleRequest
}

/**
 * Request parameters for apiBackendRolesRoleIdPermissionsPut operation in BackendRoleApi.
 */
export interface BackendRoleApiApiBackendRolesRoleIdPermissionsPutRequest {
    readonly roleId: number

    readonly setPermissionsToRoleRequest?: SetPermissionsToRoleRequest
}

/**
 * BackendRoleApi - object-oriented interface
 */
export class BackendRoleApi extends BaseAPI {
    /**
     * 
     * @summary 全ロール取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendRolesGet(options?: RawAxiosRequestConfig) {
        return BackendRoleApiFp(this.configuration).apiBackendRolesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ロール削除
     * @param {BackendRoleApiApiBackendRolesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendRolesIdDelete(requestParameters: BackendRoleApiApiBackendRolesIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return BackendRoleApiFp(this.configuration).apiBackendRolesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ロール取得
     * @param {BackendRoleApiApiBackendRolesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendRolesIdGet(requestParameters: BackendRoleApiApiBackendRolesIdGetRequest, options?: RawAxiosRequestConfig) {
        return BackendRoleApiFp(this.configuration).apiBackendRolesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ロール作成
     * @param {BackendRoleApiApiBackendRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendRolesPost(requestParameters: BackendRoleApiApiBackendRolesPostRequest = {}, options?: RawAxiosRequestConfig) {
        return BackendRoleApiFp(this.configuration).apiBackendRolesPost(requestParameters.createRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ロールに権限を設定（既存の権限を置き換える）
     * @param {BackendRoleApiApiBackendRolesRoleIdPermissionsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendRolesRoleIdPermissionsPut(requestParameters: BackendRoleApiApiBackendRolesRoleIdPermissionsPutRequest, options?: RawAxiosRequestConfig) {
        return BackendRoleApiFp(this.configuration).apiBackendRolesRoleIdPermissionsPut(requestParameters.roleId, requestParameters.setPermissionsToRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BackendSpecsApi - axios parameter creator
 */
export const BackendSpecsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Swagger UIで生成されたOpenAPI 3.0スキーマをJSON形式で取得します。
         * @summary OpenAPIスキーマ取得
         * @param {string} documentName ドキュメント名（デフォルト: v1）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendSpecsOpenapiDocumentNameGet: async (documentName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentName' is not null or undefined
            assertParamExists('apiBackendSpecsOpenapiDocumentNameGet', 'documentName', documentName)
            const localVarPath = `/api/backend/specs/openapi/{documentName}`
                .replace(`{${"documentName"}}`, encodeURIComponent(String(documentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Swagger UIで生成されたOpenAPI 3.0スキーマをYAML形式で取得します。
         * @summary OpenAPIスキーマ取得（YAML形式）
         * @param {string} documentName ドキュメント名（デフォルト: v1）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendSpecsOpenapiDocumentNameYamlGet: async (documentName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentName' is not null or undefined
            assertParamExists('apiBackendSpecsOpenapiDocumentNameYamlGet', 'documentName', documentName)
            const localVarPath = `/api/backend/specs/openapi/{documentName}.yaml`
                .replace(`{${"documentName"}}`, encodeURIComponent(String(documentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Swagger UIで生成されたOpenAPI 3.0スキーマをJSON形式で取得します。
         * @summary OpenAPIスキーマ取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendSpecsOpenapiGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/specs/openapi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Swagger UIで生成されたOpenAPI 3.0スキーマをYAML形式で取得します。
         * @summary OpenAPIスキーマ取得（YAML形式）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendSpecsOpenapiYamlGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/backend/specs/openapi.yaml`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BackendSpecsApi - functional programming interface
 */
export const BackendSpecsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BackendSpecsApiAxiosParamCreator(configuration)
    return {
        /**
         * Swagger UIで生成されたOpenAPI 3.0スキーマをJSON形式で取得します。
         * @summary OpenAPIスキーマ取得
         * @param {string} documentName ドキュメント名（デフォルト: v1）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendSpecsOpenapiDocumentNameGet(documentName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendSpecsOpenapiDocumentNameGet(documentName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendSpecsApi.apiBackendSpecsOpenapiDocumentNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Swagger UIで生成されたOpenAPI 3.0スキーマをYAML形式で取得します。
         * @summary OpenAPIスキーマ取得（YAML形式）
         * @param {string} documentName ドキュメント名（デフォルト: v1）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendSpecsOpenapiDocumentNameYamlGet(documentName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendSpecsOpenapiDocumentNameYamlGet(documentName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendSpecsApi.apiBackendSpecsOpenapiDocumentNameYamlGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Swagger UIで生成されたOpenAPI 3.0スキーマをJSON形式で取得します。
         * @summary OpenAPIスキーマ取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendSpecsOpenapiGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendSpecsOpenapiGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendSpecsApi.apiBackendSpecsOpenapiGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Swagger UIで生成されたOpenAPI 3.0スキーマをYAML形式で取得します。
         * @summary OpenAPIスキーマ取得（YAML形式）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBackendSpecsOpenapiYamlGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBackendSpecsOpenapiYamlGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackendSpecsApi.apiBackendSpecsOpenapiYamlGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BackendSpecsApi - factory interface
 */
export const BackendSpecsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BackendSpecsApiFp(configuration)
    return {
        /**
         * Swagger UIで生成されたOpenAPI 3.0スキーマをJSON形式で取得します。
         * @summary OpenAPIスキーマ取得
         * @param {BackendSpecsApiApiBackendSpecsOpenapiDocumentNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendSpecsOpenapiDocumentNameGet(requestParameters: BackendSpecsApiApiBackendSpecsOpenapiDocumentNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBackendSpecsOpenapiDocumentNameGet(requestParameters.documentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Swagger UIで生成されたOpenAPI 3.0スキーマをYAML形式で取得します。
         * @summary OpenAPIスキーマ取得（YAML形式）
         * @param {BackendSpecsApiApiBackendSpecsOpenapiDocumentNameYamlGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendSpecsOpenapiDocumentNameYamlGet(requestParameters: BackendSpecsApiApiBackendSpecsOpenapiDocumentNameYamlGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBackendSpecsOpenapiDocumentNameYamlGet(requestParameters.documentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Swagger UIで生成されたOpenAPI 3.0スキーマをJSON形式で取得します。
         * @summary OpenAPIスキーマ取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendSpecsOpenapiGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBackendSpecsOpenapiGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Swagger UIで生成されたOpenAPI 3.0スキーマをYAML形式で取得します。
         * @summary OpenAPIスキーマ取得（YAML形式）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBackendSpecsOpenapiYamlGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBackendSpecsOpenapiYamlGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiBackendSpecsOpenapiDocumentNameGet operation in BackendSpecsApi.
 */
export interface BackendSpecsApiApiBackendSpecsOpenapiDocumentNameGetRequest {
    /**
     * ドキュメント名（デフォルト: v1）
     */
    readonly documentName: string
}

/**
 * Request parameters for apiBackendSpecsOpenapiDocumentNameYamlGet operation in BackendSpecsApi.
 */
export interface BackendSpecsApiApiBackendSpecsOpenapiDocumentNameYamlGetRequest {
    /**
     * ドキュメント名（デフォルト: v1）
     */
    readonly documentName: string
}

/**
 * BackendSpecsApi - object-oriented interface
 */
export class BackendSpecsApi extends BaseAPI {
    /**
     * Swagger UIで生成されたOpenAPI 3.0スキーマをJSON形式で取得します。
     * @summary OpenAPIスキーマ取得
     * @param {BackendSpecsApiApiBackendSpecsOpenapiDocumentNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendSpecsOpenapiDocumentNameGet(requestParameters: BackendSpecsApiApiBackendSpecsOpenapiDocumentNameGetRequest, options?: RawAxiosRequestConfig) {
        return BackendSpecsApiFp(this.configuration).apiBackendSpecsOpenapiDocumentNameGet(requestParameters.documentName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Swagger UIで生成されたOpenAPI 3.0スキーマをYAML形式で取得します。
     * @summary OpenAPIスキーマ取得（YAML形式）
     * @param {BackendSpecsApiApiBackendSpecsOpenapiDocumentNameYamlGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendSpecsOpenapiDocumentNameYamlGet(requestParameters: BackendSpecsApiApiBackendSpecsOpenapiDocumentNameYamlGetRequest, options?: RawAxiosRequestConfig) {
        return BackendSpecsApiFp(this.configuration).apiBackendSpecsOpenapiDocumentNameYamlGet(requestParameters.documentName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Swagger UIで生成されたOpenAPI 3.0スキーマをJSON形式で取得します。
     * @summary OpenAPIスキーマ取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendSpecsOpenapiGet(options?: RawAxiosRequestConfig) {
        return BackendSpecsApiFp(this.configuration).apiBackendSpecsOpenapiGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Swagger UIで生成されたOpenAPI 3.0スキーマをYAML形式で取得します。
     * @summary OpenAPIスキーマ取得（YAML形式）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiBackendSpecsOpenapiYamlGet(options?: RawAxiosRequestConfig) {
        return BackendSpecsApiFp(this.configuration).apiBackendSpecsOpenapiYamlGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EntranceAuthApi - axios parameter creator
 */
export const EntranceAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * EmailまたはLoginIdとパスワードでログインします
         * @summary ログイン
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntranceAuthLoginPost: async (loginRequest?: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/entrance/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntranceAuthApi - functional programming interface
 */
export const EntranceAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EntranceAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * EmailまたはLoginIdとパスワードでログインします
         * @summary ログイン
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEntranceAuthLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEntranceAuthLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EntranceAuthApi.apiEntranceAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EntranceAuthApi - factory interface
 */
export const EntranceAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EntranceAuthApiFp(configuration)
    return {
        /**
         * EmailまたはLoginIdとパスワードでログインします
         * @summary ログイン
         * @param {EntranceAuthApiApiEntranceAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntranceAuthLoginPost(requestParameters: EntranceAuthApiApiEntranceAuthLoginPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponse> {
            return localVarFp.apiEntranceAuthLoginPost(requestParameters.loginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiEntranceAuthLoginPost operation in EntranceAuthApi.
 */
export interface EntranceAuthApiApiEntranceAuthLoginPostRequest {
    readonly loginRequest?: LoginRequest
}

/**
 * EntranceAuthApi - object-oriented interface
 */
export class EntranceAuthApi extends BaseAPI {
    /**
     * EmailまたはLoginIdとパスワードでログインします
     * @summary ログイン
     * @param {EntranceAuthApiApiEntranceAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiEntranceAuthLoginPost(requestParameters: EntranceAuthApiApiEntranceAuthLoginPostRequest = {}, options?: RawAxiosRequestConfig) {
        return EntranceAuthApiFp(this.configuration).apiEntranceAuthLoginPost(requestParameters.loginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EntranceOrganizationApi - axios parameter creator
 */
export const EntranceOrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 新規組織を登録し、管理者ユーザーを同時に作成します。  このエンドポイントは未認証でアクセス可能です（新規サインアップ用）。
         * @summary 組織登録（管理者ユーザーも同時作成）
         * @param {CreateOrganizationRequest} [createOrganizationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntranceOrganizationsPost: async (createOrganizationRequest?: CreateOrganizationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/entrance/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrganizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntranceOrganizationApi - functional programming interface
 */
export const EntranceOrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EntranceOrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 新規組織を登録し、管理者ユーザーを同時に作成します。  このエンドポイントは未認証でアクセス可能です（新規サインアップ用）。
         * @summary 組織登録（管理者ユーザーも同時作成）
         * @param {CreateOrganizationRequest} [createOrganizationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEntranceOrganizationsPost(createOrganizationRequest?: CreateOrganizationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationWithAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEntranceOrganizationsPost(createOrganizationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EntranceOrganizationApi.apiEntranceOrganizationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EntranceOrganizationApi - factory interface
 */
export const EntranceOrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EntranceOrganizationApiFp(configuration)
    return {
        /**
         * 新規組織を登録し、管理者ユーザーを同時に作成します。  このエンドポイントは未認証でアクセス可能です（新規サインアップ用）。
         * @summary 組織登録（管理者ユーザーも同時作成）
         * @param {EntranceOrganizationApiApiEntranceOrganizationsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntranceOrganizationsPost(requestParameters: EntranceOrganizationApiApiEntranceOrganizationsPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationWithAdminResponse> {
            return localVarFp.apiEntranceOrganizationsPost(requestParameters.createOrganizationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiEntranceOrganizationsPost operation in EntranceOrganizationApi.
 */
export interface EntranceOrganizationApiApiEntranceOrganizationsPostRequest {
    readonly createOrganizationRequest?: CreateOrganizationRequest
}

/**
 * EntranceOrganizationApi - object-oriented interface
 */
export class EntranceOrganizationApi extends BaseAPI {
    /**
     * 新規組織を登録し、管理者ユーザーを同時に作成します。  このエンドポイントは未認証でアクセス可能です（新規サインアップ用）。
     * @summary 組織登録（管理者ユーザーも同時作成）
     * @param {EntranceOrganizationApiApiEntranceOrganizationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiEntranceOrganizationsPost(requestParameters: EntranceOrganizationApiApiEntranceOrganizationsPostRequest = {}, options?: RawAxiosRequestConfig) {
        return EntranceOrganizationApiFp(this.configuration).apiEntranceOrganizationsPost(requestParameters.createOrganizationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EntrancePasswordApi - axios parameter creator
 */
export const EntrancePasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * メールアドレスを入力してパスワードリセットをリクエストします。  パスワードリセット用のメールが送信されます。
         * @summary パスワードリセットをリクエスト
         * @param {RequestPasswordResetRequest} [requestPasswordResetRequest] パスワードリセットリクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntrancePasswordRequestResetPost: async (requestPasswordResetRequest?: RequestPasswordResetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/entrance/password/request-reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestPasswordResetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * メールで送信されたトークンを使ってパスワードをリセットします。  トークンは24時間有効です。
         * @summary パスワードをリセット
         * @param {ResetPasswordRequest} [resetPasswordRequest] パスワードリセットリクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntrancePasswordResetPost: async (resetPasswordRequest?: ResetPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/entrance/password/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * メールで送信されたトークンを使ってパスワードを設定します。  トークンは24時間有効です。
         * @summary /// パスワードを設定
         * @param {SetUserPasswordRequest} [setUserPasswordRequest] パスワード設定リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntrancePasswordSetPost: async (setUserPasswordRequest?: SetUserPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/entrance/password/set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setUserPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntrancePasswordApi - functional programming interface
 */
export const EntrancePasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EntrancePasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * メールアドレスを入力してパスワードリセットをリクエストします。  パスワードリセット用のメールが送信されます。
         * @summary パスワードリセットをリクエスト
         * @param {RequestPasswordResetRequest} [requestPasswordResetRequest] パスワードリセットリクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEntrancePasswordRequestResetPost(requestPasswordResetRequest?: RequestPasswordResetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEntrancePasswordRequestResetPost(requestPasswordResetRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EntrancePasswordApi.apiEntrancePasswordRequestResetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * メールで送信されたトークンを使ってパスワードをリセットします。  トークンは24時間有効です。
         * @summary パスワードをリセット
         * @param {ResetPasswordRequest} [resetPasswordRequest] パスワードリセットリクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEntrancePasswordResetPost(resetPasswordRequest?: ResetPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEntrancePasswordResetPost(resetPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EntrancePasswordApi.apiEntrancePasswordResetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * メールで送信されたトークンを使ってパスワードを設定します。  トークンは24時間有効です。
         * @summary /// パスワードを設定
         * @param {SetUserPasswordRequest} [setUserPasswordRequest] パスワード設定リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEntrancePasswordSetPost(setUserPasswordRequest?: SetUserPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEntrancePasswordSetPost(setUserPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EntrancePasswordApi.apiEntrancePasswordSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EntrancePasswordApi - factory interface
 */
export const EntrancePasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EntrancePasswordApiFp(configuration)
    return {
        /**
         * メールアドレスを入力してパスワードリセットをリクエストします。  パスワードリセット用のメールが送信されます。
         * @summary パスワードリセットをリクエスト
         * @param {EntrancePasswordApiApiEntrancePasswordRequestResetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntrancePasswordRequestResetPost(requestParameters: EntrancePasswordApiApiEntrancePasswordRequestResetPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiEntrancePasswordRequestResetPost(requestParameters.requestPasswordResetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * メールで送信されたトークンを使ってパスワードをリセットします。  トークンは24時間有効です。
         * @summary パスワードをリセット
         * @param {EntrancePasswordApiApiEntrancePasswordResetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntrancePasswordResetPost(requestParameters: EntrancePasswordApiApiEntrancePasswordResetPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiEntrancePasswordResetPost(requestParameters.resetPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * メールで送信されたトークンを使ってパスワードを設定します。  トークンは24時間有効です。
         * @summary /// パスワードを設定
         * @param {EntrancePasswordApiApiEntrancePasswordSetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntrancePasswordSetPost(requestParameters: EntrancePasswordApiApiEntrancePasswordSetPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiEntrancePasswordSetPost(requestParameters.setUserPasswordRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiEntrancePasswordRequestResetPost operation in EntrancePasswordApi.
 */
export interface EntrancePasswordApiApiEntrancePasswordRequestResetPostRequest {
    /**
     * パスワードリセットリクエスト
     */
    readonly requestPasswordResetRequest?: RequestPasswordResetRequest
}

/**
 * Request parameters for apiEntrancePasswordResetPost operation in EntrancePasswordApi.
 */
export interface EntrancePasswordApiApiEntrancePasswordResetPostRequest {
    /**
     * パスワードリセットリクエスト
     */
    readonly resetPasswordRequest?: ResetPasswordRequest
}

/**
 * Request parameters for apiEntrancePasswordSetPost operation in EntrancePasswordApi.
 */
export interface EntrancePasswordApiApiEntrancePasswordSetPostRequest {
    /**
     * パスワード設定リクエスト
     */
    readonly setUserPasswordRequest?: SetUserPasswordRequest
}

/**
 * EntrancePasswordApi - object-oriented interface
 */
export class EntrancePasswordApi extends BaseAPI {
    /**
     * メールアドレスを入力してパスワードリセットをリクエストします。  パスワードリセット用のメールが送信されます。
     * @summary パスワードリセットをリクエスト
     * @param {EntrancePasswordApiApiEntrancePasswordRequestResetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiEntrancePasswordRequestResetPost(requestParameters: EntrancePasswordApiApiEntrancePasswordRequestResetPostRequest = {}, options?: RawAxiosRequestConfig) {
        return EntrancePasswordApiFp(this.configuration).apiEntrancePasswordRequestResetPost(requestParameters.requestPasswordResetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * メールで送信されたトークンを使ってパスワードをリセットします。  トークンは24時間有効です。
     * @summary パスワードをリセット
     * @param {EntrancePasswordApiApiEntrancePasswordResetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiEntrancePasswordResetPost(requestParameters: EntrancePasswordApiApiEntrancePasswordResetPostRequest = {}, options?: RawAxiosRequestConfig) {
        return EntrancePasswordApiFp(this.configuration).apiEntrancePasswordResetPost(requestParameters.resetPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * メールで送信されたトークンを使ってパスワードを設定します。  トークンは24時間有効です。
     * @summary /// パスワードを設定
     * @param {EntrancePasswordApiApiEntrancePasswordSetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiEntrancePasswordSetPost(requestParameters: EntrancePasswordApiApiEntrancePasswordSetPostRequest = {}, options?: RawAxiosRequestConfig) {
        return EntrancePasswordApiFp(this.configuration).apiEntrancePasswordSetPost(requestParameters.setUserPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FileDownloadApi - axios parameter creator
 */
export const FileDownloadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary アイコンファイルを取得（画像を返す）
         * @param {string} fileType ファイルの種類（avatar, genre）
         * @param {number} resourceId リソースID
         * @param {string} fileName ファイル名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDownloadsFileTypeResourceIdFileNameGet: async (fileType: string, resourceId: number, fileName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('apiDownloadsFileTypeResourceIdFileNameGet', 'fileType', fileType)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('apiDownloadsFileTypeResourceIdFileNameGet', 'resourceId', resourceId)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('apiDownloadsFileTypeResourceIdFileNameGet', 'fileName', fileName)
            const localVarPath = `/api/downloads/{fileType}/{resourceId}/{fileName}`
                .replace(`{${"fileType"}}`, encodeURIComponent(String(fileType)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileDownloadApi - functional programming interface
 */
export const FileDownloadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileDownloadApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary アイコンファイルを取得（画像を返す）
         * @param {string} fileType ファイルの種類（avatar, genre）
         * @param {number} resourceId リソースID
         * @param {string} fileName ファイル名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDownloadsFileTypeResourceIdFileNameGet(fileType: string, resourceId: number, fileName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDownloadsFileTypeResourceIdFileNameGet(fileType, resourceId, fileName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileDownloadApi.apiDownloadsFileTypeResourceIdFileNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FileDownloadApi - factory interface
 */
export const FileDownloadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileDownloadApiFp(configuration)
    return {
        /**
         * 
         * @summary アイコンファイルを取得（画像を返す）
         * @param {FileDownloadApiApiDownloadsFileTypeResourceIdFileNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDownloadsFileTypeResourceIdFileNameGet(requestParameters: FileDownloadApiApiDownloadsFileTypeResourceIdFileNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDownloadsFileTypeResourceIdFileNameGet(requestParameters.fileType, requestParameters.resourceId, requestParameters.fileName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiDownloadsFileTypeResourceIdFileNameGet operation in FileDownloadApi.
 */
export interface FileDownloadApiApiDownloadsFileTypeResourceIdFileNameGetRequest {
    /**
     * ファイルの種類（avatar, genre）
     */
    readonly fileType: string

    /**
     * リソースID
     */
    readonly resourceId: number

    /**
     * ファイル名
     */
    readonly fileName: string
}

/**
 * FileDownloadApi - object-oriented interface
 */
export class FileDownloadApi extends BaseAPI {
    /**
     * 
     * @summary アイコンファイルを取得（画像を返す）
     * @param {FileDownloadApiApiDownloadsFileTypeResourceIdFileNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDownloadsFileTypeResourceIdFileNameGet(requestParameters: FileDownloadApiApiDownloadsFileTypeResourceIdFileNameGetRequest, options?: RawAxiosRequestConfig) {
        return FileDownloadApiFp(this.configuration).apiDownloadsFileTypeResourceIdFileNameGet(requestParameters.fileType, requestParameters.resourceId, requestParameters.fileName, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FileUploadApi - axios parameter creator
 */
export const FileUploadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ファイルをアップロード
         * @param {string} fileType ファイルの種類（avatar, genre）
         * @param {number} resourceId リソースID
         * @param {File} [file] アップロードするファイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFilesFileTypeResourceIdPost: async (fileType: string, resourceId: number, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('apiFilesFileTypeResourceIdPost', 'fileType', fileType)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('apiFilesFileTypeResourceIdPost', 'resourceId', resourceId)
            const localVarPath = `/api/files/{fileType}/{resourceId}`
                .replace(`{${"fileType"}}`, encodeURIComponent(String(fileType)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileUploadApi - functional programming interface
 */
export const FileUploadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileUploadApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ファイルをアップロード
         * @param {string} fileType ファイルの種類（avatar, genre）
         * @param {number} resourceId リソースID
         * @param {File} [file] アップロードするファイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFilesFileTypeResourceIdPost(fileType: string, resourceId: number, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileUploadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFilesFileTypeResourceIdPost(fileType, resourceId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileUploadApi.apiFilesFileTypeResourceIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FileUploadApi - factory interface
 */
export const FileUploadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileUploadApiFp(configuration)
    return {
        /**
         * 
         * @summary ファイルをアップロード
         * @param {FileUploadApiApiFilesFileTypeResourceIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFilesFileTypeResourceIdPost(requestParameters: FileUploadApiApiFilesFileTypeResourceIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<FileUploadResponse> {
            return localVarFp.apiFilesFileTypeResourceIdPost(requestParameters.fileType, requestParameters.resourceId, requestParameters.file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiFilesFileTypeResourceIdPost operation in FileUploadApi.
 */
export interface FileUploadApiApiFilesFileTypeResourceIdPostRequest {
    /**
     * ファイルの種類（avatar, genre）
     */
    readonly fileType: string

    /**
     * リソースID
     */
    readonly resourceId: number

    /**
     * アップロードするファイル
     */
    readonly file?: File
}

/**
 * FileUploadApi - object-oriented interface
 */
export class FileUploadApi extends BaseAPI {
    /**
     * 
     * @summary ファイルをアップロード
     * @param {FileUploadApiApiFilesFileTypeResourceIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiFilesFileTypeResourceIdPost(requestParameters: FileUploadApiApiFilesFileTypeResourceIdPostRequest, options?: RawAxiosRequestConfig) {
        return FileUploadApiFp(this.configuration).apiFilesFileTypeResourceIdPost(requestParameters.fileType, requestParameters.resourceId, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProfileApi - axios parameter creator
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary メールアドレスを変更
         * @param {UpdateEmailRequest} [updateEmailRequest] 変更情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileEmailPatch: async (updateEmailRequest?: UpdateEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/profile/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 自分のプロフィール情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 自分のプロフィール情報を更新
         * @param {UpdateProfileRequest} [updateProfileRequest] 更新情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilePut: async (updateProfileRequest?: UpdateProfileRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary メールアドレスを変更
         * @param {UpdateEmailRequest} [updateEmailRequest] 変更情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfileEmailPatch(updateEmailRequest?: UpdateEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfileEmailPatch(updateEmailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.apiProfileEmailPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 自分のプロフィール情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfileGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfileGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.apiProfileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 自分のプロフィール情報を更新
         * @param {UpdateProfileRequest} [updateProfileRequest] 更新情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfilePut(updateProfileRequest?: UpdateProfileRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfilePut(updateProfileRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.apiProfilePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProfileApi - factory interface
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileApiFp(configuration)
    return {
        /**
         * 
         * @summary メールアドレスを変更
         * @param {ProfileApiApiProfileEmailPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileEmailPatch(requestParameters: ProfileApiApiProfileEmailPatchRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProfileEmailPatch(requestParameters.updateEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 自分のプロフィール情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProfileGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 自分のプロフィール情報を更新
         * @param {ProfileApiApiProfilePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilePut(requestParameters: ProfileApiApiProfilePutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProfilePut(requestParameters.updateProfileRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiProfileEmailPatch operation in ProfileApi.
 */
export interface ProfileApiApiProfileEmailPatchRequest {
    /**
     * 変更情報
     */
    readonly updateEmailRequest?: UpdateEmailRequest
}

/**
 * Request parameters for apiProfilePut operation in ProfileApi.
 */
export interface ProfileApiApiProfilePutRequest {
    /**
     * 更新情報
     */
    readonly updateProfileRequest?: UpdateProfileRequest
}

/**
 * ProfileApi - object-oriented interface
 */
export class ProfileApi extends BaseAPI {
    /**
     * 
     * @summary メールアドレスを変更
     * @param {ProfileApiApiProfileEmailPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProfileEmailPatch(requestParameters: ProfileApiApiProfileEmailPatchRequest = {}, options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).apiProfileEmailPatch(requestParameters.updateEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 自分のプロフィール情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProfileGet(options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).apiProfileGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 自分のプロフィール情報を更新
     * @param {ProfileApiApiProfilePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiProfilePut(requestParameters: ProfileApiApiProfilePutRequest = {}, options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).apiProfilePut(requestParameters.updateProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RefreshApi - axios parameter creator
 */
export const RefreshApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 現在のアクセストークンとリフレッシュトークンを無効化します。
         * @summary ログアウト（トークン無効化）
         * @param {RefreshRequest} [refreshRequest] リフレッシュトークン情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntranceLogoutPost: async (refreshRequest?: RefreshRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/entrance/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 有効なリフレッシュトークンを使用して、新しいアクセストークンとリフレッシュトークンを取得します。
         * @summary リフレッシュトークンによるアクセストークン再発行
         * @param {RefreshRequest} [refreshRequest] リフレッシュトークン情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntranceRefreshPost: async (refreshRequest?: RefreshRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/entrance/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefreshApi - functional programming interface
 */
export const RefreshApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RefreshApiAxiosParamCreator(configuration)
    return {
        /**
         * 現在のアクセストークンとリフレッシュトークンを無効化します。
         * @summary ログアウト（トークン無効化）
         * @param {RefreshRequest} [refreshRequest] リフレッシュトークン情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEntranceLogoutPost(refreshRequest?: RefreshRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEntranceLogoutPost(refreshRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RefreshApi.apiEntranceLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 有効なリフレッシュトークンを使用して、新しいアクセストークンとリフレッシュトークンを取得します。
         * @summary リフレッシュトークンによるアクセストークン再発行
         * @param {RefreshRequest} [refreshRequest] リフレッシュトークン情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEntranceRefreshPost(refreshRequest?: RefreshRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEntranceRefreshPost(refreshRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RefreshApi.apiEntranceRefreshPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RefreshApi - factory interface
 */
export const RefreshApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RefreshApiFp(configuration)
    return {
        /**
         * 現在のアクセストークンとリフレッシュトークンを無効化します。
         * @summary ログアウト（トークン無効化）
         * @param {RefreshApiApiEntranceLogoutPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntranceLogoutPost(requestParameters: RefreshApiApiEntranceLogoutPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiEntranceLogoutPost(requestParameters.refreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 有効なリフレッシュトークンを使用して、新しいアクセストークンとリフレッシュトークンを取得します。
         * @summary リフレッシュトークンによるアクセストークン再発行
         * @param {RefreshApiApiEntranceRefreshPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntranceRefreshPost(requestParameters: RefreshApiApiEntranceRefreshPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiEntranceRefreshPost(requestParameters.refreshRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiEntranceLogoutPost operation in RefreshApi.
 */
export interface RefreshApiApiEntranceLogoutPostRequest {
    /**
     * リフレッシュトークン情報
     */
    readonly refreshRequest?: RefreshRequest
}

/**
 * Request parameters for apiEntranceRefreshPost operation in RefreshApi.
 */
export interface RefreshApiApiEntranceRefreshPostRequest {
    /**
     * リフレッシュトークン情報
     */
    readonly refreshRequest?: RefreshRequest
}

/**
 * RefreshApi - object-oriented interface
 */
export class RefreshApi extends BaseAPI {
    /**
     * 現在のアクセストークンとリフレッシュトークンを無効化します。
     * @summary ログアウト（トークン無効化）
     * @param {RefreshApiApiEntranceLogoutPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiEntranceLogoutPost(requestParameters: RefreshApiApiEntranceLogoutPostRequest = {}, options?: RawAxiosRequestConfig) {
        return RefreshApiFp(this.configuration).apiEntranceLogoutPost(requestParameters.refreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 有効なリフレッシュトークンを使用して、新しいアクセストークンとリフレッシュトークンを取得します。
     * @summary リフレッシュトークンによるアクセストークン再発行
     * @param {RefreshApiApiEntranceRefreshPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiEntranceRefreshPost(requestParameters: RefreshApiApiEntranceRefreshPostRequest = {}, options?: RawAxiosRequestConfig) {
        return RefreshApiFp(this.configuration).apiEntranceRefreshPost(requestParameters.refreshRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TagApi - axios parameter creator
 */
export const TagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 組織のタグ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary タグ作成
         * @param {CreateTagRequest} [createTagRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsPost: async (createTagRequest?: CreateTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTagRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary タグ削除
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagIdDelete: async (tagId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('apiTagsTagIdDelete', 'tagId', tagId)
            const localVarPath = `/api/tags/{tagId}`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary タグ更新
         * @param {number} tagId 
         * @param {UpdateTagRequest} [updateTagRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagIdPut: async (tagId: number, updateTagRequest?: UpdateTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('apiTagsTagIdPut', 'tagId', tagId)
            const localVarPath = `/api/tags/{tagId}`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTagRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagApi - functional programming interface
 */
export const TagApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 組織のタグ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TagDetailResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagApi.apiTagsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary タグ作成
         * @param {CreateTagRequest} [createTagRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagsPost(createTagRequest?: CreateTagRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagsPost(createTagRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagApi.apiTagsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary タグ削除
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagsTagIdDelete(tagId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagsTagIdDelete(tagId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagApi.apiTagsTagIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary タグ更新
         * @param {number} tagId 
         * @param {UpdateTagRequest} [updateTagRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagsTagIdPut(tagId: number, updateTagRequest?: UpdateTagRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagsTagIdPut(tagId, updateTagRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagApi.apiTagsTagIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TagApi - factory interface
 */
export const TagApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagApiFp(configuration)
    return {
        /**
         * 
         * @summary 組織のタグ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TagDetailResponse>> {
            return localVarFp.apiTagsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary タグ作成
         * @param {TagApiApiTagsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsPost(requestParameters: TagApiApiTagsPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<TagResponse> {
            return localVarFp.apiTagsPost(requestParameters.createTagRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary タグ削除
         * @param {TagApiApiTagsTagIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagIdDelete(requestParameters: TagApiApiTagsTagIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiTagsTagIdDelete(requestParameters.tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary タグ更新
         * @param {TagApiApiTagsTagIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagIdPut(requestParameters: TagApiApiTagsTagIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<TagResponse> {
            return localVarFp.apiTagsTagIdPut(requestParameters.tagId, requestParameters.updateTagRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiTagsPost operation in TagApi.
 */
export interface TagApiApiTagsPostRequest {
    readonly createTagRequest?: CreateTagRequest
}

/**
 * Request parameters for apiTagsTagIdDelete operation in TagApi.
 */
export interface TagApiApiTagsTagIdDeleteRequest {
    readonly tagId: number
}

/**
 * Request parameters for apiTagsTagIdPut operation in TagApi.
 */
export interface TagApiApiTagsTagIdPutRequest {
    readonly tagId: number

    readonly updateTagRequest?: UpdateTagRequest
}

/**
 * TagApi - object-oriented interface
 */
export class TagApi extends BaseAPI {
    /**
     * 
     * @summary 組織のタグ一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTagsGet(options?: RawAxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary タグ作成
     * @param {TagApiApiTagsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTagsPost(requestParameters: TagApiApiTagsPostRequest = {}, options?: RawAxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagsPost(requestParameters.createTagRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary タグ削除
     * @param {TagApiApiTagsTagIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTagsTagIdDelete(requestParameters: TagApiApiTagsTagIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagsTagIdDelete(requestParameters.tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary タグ更新
     * @param {TagApiApiTagsTagIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiTagsTagIdPut(requestParameters: TagApiApiTagsTagIdPutRequest, options?: RawAxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagsTagIdPut(requestParameters.tagId, requestParameters.updateTagRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestEmailApi - axios parameter creator
 */
export const TestEmailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary テスト送信（テンプレート名を指定）
         * @param {string} [template] テンプレート名（welcome, password-setup, password-reset, test-email）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDevEmailTestSendPost: async (template?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dev/email-test/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (template !== undefined) {
                localVarQueryParameter['template'] = template;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テスト用受信先を設定する
         * @param {RecipientRequest} [recipientRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDevEmailTestSetRecipientPost: async (recipientRequest?: RecipientRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dev/email-test/set-recipient`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipientRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 利用可能なテンプレート一覧を返す
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDevEmailTestTemplatesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/dev/email-test/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestEmailApi - functional programming interface
 */
export const TestEmailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestEmailApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary テスト送信（テンプレート名を指定）
         * @param {string} [template] テンプレート名（welcome, password-setup, password-reset, test-email）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDevEmailTestSendPost(template?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDevEmailTestSendPost(template, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestEmailApi.apiDevEmailTestSendPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary テスト用受信先を設定する
         * @param {RecipientRequest} [recipientRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDevEmailTestSetRecipientPost(recipientRequest?: RecipientRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDevEmailTestSetRecipientPost(recipientRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestEmailApi.apiDevEmailTestSetRecipientPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 利用可能なテンプレート一覧を返す
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDevEmailTestTemplatesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDevEmailTestTemplatesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestEmailApi.apiDevEmailTestTemplatesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TestEmailApi - factory interface
 */
export const TestEmailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestEmailApiFp(configuration)
    return {
        /**
         * 
         * @summary テスト送信（テンプレート名を指定）
         * @param {TestEmailApiApiDevEmailTestSendPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDevEmailTestSendPost(requestParameters: TestEmailApiApiDevEmailTestSendPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDevEmailTestSendPost(requestParameters.template, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テスト用受信先を設定する
         * @param {TestEmailApiApiDevEmailTestSetRecipientPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDevEmailTestSetRecipientPost(requestParameters: TestEmailApiApiDevEmailTestSetRecipientPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDevEmailTestSetRecipientPost(requestParameters.recipientRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 利用可能なテンプレート一覧を返す
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDevEmailTestTemplatesGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDevEmailTestTemplatesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiDevEmailTestSendPost operation in TestEmailApi.
 */
export interface TestEmailApiApiDevEmailTestSendPostRequest {
    /**
     * テンプレート名（welcome, password-setup, password-reset, test-email）
     */
    readonly template?: string
}

/**
 * Request parameters for apiDevEmailTestSetRecipientPost operation in TestEmailApi.
 */
export interface TestEmailApiApiDevEmailTestSetRecipientPostRequest {
    readonly recipientRequest?: RecipientRequest
}

/**
 * TestEmailApi - object-oriented interface
 */
export class TestEmailApi extends BaseAPI {
    /**
     * 
     * @summary テスト送信（テンプレート名を指定）
     * @param {TestEmailApiApiDevEmailTestSendPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDevEmailTestSendPost(requestParameters: TestEmailApiApiDevEmailTestSendPostRequest = {}, options?: RawAxiosRequestConfig) {
        return TestEmailApiFp(this.configuration).apiDevEmailTestSendPost(requestParameters.template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テスト用受信先を設定する
     * @param {TestEmailApiApiDevEmailTestSetRecipientPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDevEmailTestSetRecipientPost(requestParameters: TestEmailApiApiDevEmailTestSetRecipientPostRequest = {}, options?: RawAxiosRequestConfig) {
        return TestEmailApiFp(this.configuration).apiDevEmailTestSetRecipientPost(requestParameters.recipientRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 利用可能なテンプレート一覧を返す
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiDevEmailTestTemplatesGet(options?: RawAxiosRequestConfig) {
        return TestEmailApiFp(this.configuration).apiDevEmailTestTemplatesGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkspaceItemApi - axios parameter creator
 */
export const WorkspaceItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ワークスペースアイテム一覧取得
         * @param {number} workspaceId 
         * @param {number} [page] 
         * @param {boolean} [isDraft] 
         * @param {boolean} [isArchived] 
         * @param {number} [assigneeId] 
         * @param {number} [priority] 
         * @param {boolean} [pinned] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsGet: async (workspaceId: number, page?: number, isDraft?: boolean, isArchived?: boolean, assigneeId?: number, priority?: number, pinned?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/workspaces/{workspaceId}/items`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (isDraft !== undefined) {
                localVarQueryParameter['IsDraft'] = isDraft;
            }

            if (isArchived !== undefined) {
                localVarQueryParameter['IsArchived'] = isArchived;
            }

            if (assigneeId !== undefined) {
                localVarQueryParameter['AssigneeId'] = assigneeId;
            }

            if (priority !== undefined) {
                localVarQueryParameter['Priority'] = priority;
            }

            if (pinned !== undefined) {
                localVarQueryParameter['Pinned'] = pinned;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペースアイテム削除
         * @param {number} workspaceId 
         * @param {number} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdDelete: async (workspaceId: number, itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdDelete', 'workspaceId', workspaceId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdDelete', 'itemId', itemId)
            const localVarPath = `/api/workspaces/{workspaceId}/items/{itemId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペースアイテム取得
         * @param {number} workspaceId 
         * @param {number} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdGet: async (workspaceId: number, itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdGet', 'workspaceId', workspaceId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdGet', 'itemId', itemId)
            const localVarPath = `/api/workspaces/{workspaceId}/items/{itemId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペースアイテム更新
         * @param {number} workspaceId 
         * @param {number} itemId 
         * @param {UpdateWorkspaceItemRequest} [updateWorkspaceItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdPatch: async (workspaceId: number, itemId: number, updateWorkspaceItemRequest?: UpdateWorkspaceItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdPatch', 'workspaceId', workspaceId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdPatch', 'itemId', itemId)
            const localVarPath = `/api/workspaces/{workspaceId}/items/{itemId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkspaceItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペースアイテムステータス更新
         * @param {number} workspaceId 
         * @param {number} itemId 
         * @param {UpdateWorkspaceItemStatusRequest} [updateWorkspaceItemStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdStatusPatch: async (workspaceId: number, itemId: number, updateWorkspaceItemStatusRequest?: UpdateWorkspaceItemStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdStatusPatch', 'workspaceId', workspaceId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdStatusPatch', 'itemId', itemId)
            const localVarPath = `/api/workspaces/{workspaceId}/items/{itemId}/status`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkspaceItemStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペースアイテム作成
         * @param {number} workspaceId 
         * @param {CreateWorkspaceItemRequest} [createWorkspaceItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsPost: async (workspaceId: number, createWorkspaceItemRequest?: CreateWorkspaceItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsPost', 'workspaceId', workspaceId)
            const localVarPath = `/api/workspaces/{workspaceId}/items`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkspaceItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkspaceItemApi - functional programming interface
 */
export const WorkspaceItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspaceItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ワークスペースアイテム一覧取得
         * @param {number} workspaceId 
         * @param {number} [page] 
         * @param {boolean} [isDraft] 
         * @param {boolean} [isArchived] 
         * @param {number} [assigneeId] 
         * @param {number} [priority] 
         * @param {boolean} [pinned] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsGet(workspaceId: number, page?: number, isDraft?: boolean, isArchived?: boolean, assigneeId?: number, priority?: number, pinned?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceItemDetailResponsePagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsGet(workspaceId, page, isDraft, isArchived, assigneeId, priority, pinned, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemApi.apiWorkspacesWorkspaceIdItemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペースアイテム削除
         * @param {number} workspaceId 
         * @param {number} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsItemIdDelete(workspaceId: number, itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsItemIdDelete(workspaceId, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemApi.apiWorkspacesWorkspaceIdItemsItemIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペースアイテム取得
         * @param {number} workspaceId 
         * @param {number} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsItemIdGet(workspaceId: number, itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceItemDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsItemIdGet(workspaceId, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemApi.apiWorkspacesWorkspaceIdItemsItemIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペースアイテム更新
         * @param {number} workspaceId 
         * @param {number} itemId 
         * @param {UpdateWorkspaceItemRequest} [updateWorkspaceItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsItemIdPatch(workspaceId: number, itemId: number, updateWorkspaceItemRequest?: UpdateWorkspaceItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsItemIdPatch(workspaceId, itemId, updateWorkspaceItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemApi.apiWorkspacesWorkspaceIdItemsItemIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペースアイテムステータス更新
         * @param {number} workspaceId 
         * @param {number} itemId 
         * @param {UpdateWorkspaceItemStatusRequest} [updateWorkspaceItemStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsItemIdStatusPatch(workspaceId: number, itemId: number, updateWorkspaceItemStatusRequest?: UpdateWorkspaceItemStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsItemIdStatusPatch(workspaceId, itemId, updateWorkspaceItemStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemApi.apiWorkspacesWorkspaceIdItemsItemIdStatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペースアイテム作成
         * @param {number} workspaceId 
         * @param {CreateWorkspaceItemRequest} [createWorkspaceItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsPost(workspaceId: number, createWorkspaceItemRequest?: CreateWorkspaceItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsPost(workspaceId, createWorkspaceItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemApi.apiWorkspacesWorkspaceIdItemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkspaceItemApi - factory interface
 */
export const WorkspaceItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkspaceItemApiFp(configuration)
    return {
        /**
         * 
         * @summary ワークスペースアイテム一覧取得
         * @param {WorkspaceItemApiApiWorkspacesWorkspaceIdItemsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsGet(requestParameters: WorkspaceItemApiApiWorkspacesWorkspaceIdItemsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceItemDetailResponsePagedResponse> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsGet(requestParameters.workspaceId, requestParameters.page, requestParameters.isDraft, requestParameters.isArchived, requestParameters.assigneeId, requestParameters.priority, requestParameters.pinned, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペースアイテム削除
         * @param {WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdDelete(requestParameters: WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsItemIdDelete(requestParameters.workspaceId, requestParameters.itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペースアイテム取得
         * @param {WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdGet(requestParameters: WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceItemDetailResponse> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsItemIdGet(requestParameters.workspaceId, requestParameters.itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペースアイテム更新
         * @param {WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdPatch(requestParameters: WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceItemResponse> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsItemIdPatch(requestParameters.workspaceId, requestParameters.itemId, requestParameters.updateWorkspaceItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペースアイテムステータス更新
         * @param {WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdStatusPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdStatusPatch(requestParameters: WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdStatusPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceItemResponse> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsItemIdStatusPatch(requestParameters.workspaceId, requestParameters.itemId, requestParameters.updateWorkspaceItemStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペースアイテム作成
         * @param {WorkspaceItemApiApiWorkspacesWorkspaceIdItemsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsPost(requestParameters: WorkspaceItemApiApiWorkspacesWorkspaceIdItemsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceItemResponse> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsPost(requestParameters.workspaceId, requestParameters.createWorkspaceItemRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsGet operation in WorkspaceItemApi.
 */
export interface WorkspaceItemApiApiWorkspacesWorkspaceIdItemsGetRequest {
    readonly workspaceId: number

    readonly page?: number

    readonly isDraft?: boolean

    readonly isArchived?: boolean

    readonly assigneeId?: number

    readonly priority?: number

    readonly pinned?: boolean
}

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsItemIdDelete operation in WorkspaceItemApi.
 */
export interface WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdDeleteRequest {
    readonly workspaceId: number

    readonly itemId: number
}

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsItemIdGet operation in WorkspaceItemApi.
 */
export interface WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdGetRequest {
    readonly workspaceId: number

    readonly itemId: number
}

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsItemIdPatch operation in WorkspaceItemApi.
 */
export interface WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdPatchRequest {
    readonly workspaceId: number

    readonly itemId: number

    readonly updateWorkspaceItemRequest?: UpdateWorkspaceItemRequest
}

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsItemIdStatusPatch operation in WorkspaceItemApi.
 */
export interface WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdStatusPatchRequest {
    readonly workspaceId: number

    readonly itemId: number

    readonly updateWorkspaceItemStatusRequest?: UpdateWorkspaceItemStatusRequest
}

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsPost operation in WorkspaceItemApi.
 */
export interface WorkspaceItemApiApiWorkspacesWorkspaceIdItemsPostRequest {
    readonly workspaceId: number

    readonly createWorkspaceItemRequest?: CreateWorkspaceItemRequest
}

/**
 * WorkspaceItemApi - object-oriented interface
 */
export class WorkspaceItemApi extends BaseAPI {
    /**
     * 
     * @summary ワークスペースアイテム一覧取得
     * @param {WorkspaceItemApiApiWorkspacesWorkspaceIdItemsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsGet(requestParameters: WorkspaceItemApiApiWorkspacesWorkspaceIdItemsGetRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsGet(requestParameters.workspaceId, requestParameters.page, requestParameters.isDraft, requestParameters.isArchived, requestParameters.assigneeId, requestParameters.priority, requestParameters.pinned, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペースアイテム削除
     * @param {WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsItemIdDelete(requestParameters: WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsItemIdDelete(requestParameters.workspaceId, requestParameters.itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペースアイテム取得
     * @param {WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsItemIdGet(requestParameters: WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdGetRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsItemIdGet(requestParameters.workspaceId, requestParameters.itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペースアイテム更新
     * @param {WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsItemIdPatch(requestParameters: WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdPatchRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsItemIdPatch(requestParameters.workspaceId, requestParameters.itemId, requestParameters.updateWorkspaceItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペースアイテムステータス更新
     * @param {WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdStatusPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsItemIdStatusPatch(requestParameters: WorkspaceItemApiApiWorkspacesWorkspaceIdItemsItemIdStatusPatchRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsItemIdStatusPatch(requestParameters.workspaceId, requestParameters.itemId, requestParameters.updateWorkspaceItemStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペースアイテム作成
     * @param {WorkspaceItemApiApiWorkspacesWorkspaceIdItemsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsPost(requestParameters: WorkspaceItemApiApiWorkspacesWorkspaceIdItemsPostRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsPost(requestParameters.workspaceId, requestParameters.createWorkspaceItemRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkspaceItemAttachmentApi - axios parameter creator
 */
export const WorkspaceItemAttachmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添付ファイルを削除
         * @param {number} workspaceId ワークスペースID
         * @param {number} itemId アイテムID
         * @param {number} attachmentId 添付ファイルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete: async (workspaceId: number, itemId: number, attachmentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete', 'workspaceId', workspaceId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete', 'itemId', itemId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete', 'attachmentId', attachmentId)
            const localVarPath = `/api/workspaces/{workspaceId}/items/{itemId}/attachments/{attachmentId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"attachmentId"}}`, encodeURIComponent(String(attachmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 添付ファイルをダウンロード
         * @param {number} workspaceId ワークスペースID
         * @param {number} itemId アイテムID
         * @param {string} fileName ファイル名（一意なファイル名）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet: async (workspaceId: number, itemId: number, fileName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet', 'workspaceId', workspaceId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet', 'itemId', itemId)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet', 'fileName', fileName)
            const localVarPath = `/api/workspaces/{workspaceId}/items/{itemId}/attachments/download/{fileName}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペースアイテムの添付ファイル一覧を取得
         * @param {number} workspaceId ワークスペースID
         * @param {number} itemId アイテムID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGet: async (workspaceId: number, itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGet', 'workspaceId', workspaceId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGet', 'itemId', itemId)
            const localVarPath = `/api/workspaces/{workspaceId}/items/{itemId}/attachments`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペースアイテムに添付ファイルをアップロード
         * @param {number} workspaceId ワークスペースID
         * @param {number} itemId アイテムID
         * @param {File} [file] アップロードするファイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPost: async (workspaceId: number, itemId: number, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPost', 'workspaceId', workspaceId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPost', 'itemId', itemId)
            const localVarPath = `/api/workspaces/{workspaceId}/items/{itemId}/attachments`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkspaceItemAttachmentApi - functional programming interface
 */
export const WorkspaceItemAttachmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspaceItemAttachmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 添付ファイルを削除
         * @param {number} workspaceId ワークスペースID
         * @param {number} itemId アイテムID
         * @param {number} attachmentId 添付ファイルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete(workspaceId: number, itemId: number, attachmentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete(workspaceId, itemId, attachmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemAttachmentApi.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 添付ファイルをダウンロード
         * @param {number} workspaceId ワークスペースID
         * @param {number} itemId アイテムID
         * @param {string} fileName ファイル名（一意なファイル名）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet(workspaceId: number, itemId: number, fileName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet(workspaceId, itemId, fileName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemAttachmentApi.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペースアイテムの添付ファイル一覧を取得
         * @param {number} workspaceId ワークスペースID
         * @param {number} itemId アイテムID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGet(workspaceId: number, itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkspaceItemAttachmentResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGet(workspaceId, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemAttachmentApi.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペースアイテムに添付ファイルをアップロード
         * @param {number} workspaceId ワークスペースID
         * @param {number} itemId アイテムID
         * @param {File} [file] アップロードするファイル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPost(workspaceId: number, itemId: number, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceItemAttachmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPost(workspaceId, itemId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemAttachmentApi.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkspaceItemAttachmentApi - factory interface
 */
export const WorkspaceItemAttachmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkspaceItemAttachmentApiFp(configuration)
    return {
        /**
         * 
         * @summary 添付ファイルを削除
         * @param {WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete(requestParameters: WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete(requestParameters.workspaceId, requestParameters.itemId, requestParameters.attachmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 添付ファイルをダウンロード
         * @param {WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet(requestParameters: WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet(requestParameters.workspaceId, requestParameters.itemId, requestParameters.fileName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペースアイテムの添付ファイル一覧を取得
         * @param {WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGet(requestParameters: WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkspaceItemAttachmentResponse>> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGet(requestParameters.workspaceId, requestParameters.itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペースアイテムに添付ファイルをアップロード
         * @param {WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPost(requestParameters: WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceItemAttachmentResponse> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPost(requestParameters.workspaceId, requestParameters.itemId, requestParameters.file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete operation in WorkspaceItemAttachmentApi.
 */
export interface WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDeleteRequest {
    /**
     * ワークスペースID
     */
    readonly workspaceId: number

    /**
     * アイテムID
     */
    readonly itemId: number

    /**
     * 添付ファイルID
     */
    readonly attachmentId: number
}

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet operation in WorkspaceItemAttachmentApi.
 */
export interface WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGetRequest {
    /**
     * ワークスペースID
     */
    readonly workspaceId: number

    /**
     * アイテムID
     */
    readonly itemId: number

    /**
     * ファイル名（一意なファイル名）
     */
    readonly fileName: string
}

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGet operation in WorkspaceItemAttachmentApi.
 */
export interface WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsGetRequest {
    /**
     * ワークスペースID
     */
    readonly workspaceId: number

    /**
     * アイテムID
     */
    readonly itemId: number
}

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPost operation in WorkspaceItemAttachmentApi.
 */
export interface WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsPostRequest {
    /**
     * ワークスペースID
     */
    readonly workspaceId: number

    /**
     * アイテムID
     */
    readonly itemId: number

    /**
     * アップロードするファイル
     */
    readonly file?: File
}

/**
 * WorkspaceItemAttachmentApi - object-oriented interface
 */
export class WorkspaceItemAttachmentApi extends BaseAPI {
    /**
     * 
     * @summary 添付ファイルを削除
     * @param {WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete(requestParameters: WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemAttachmentApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsItemIdAttachmentsAttachmentIdDelete(requestParameters.workspaceId, requestParameters.itemId, requestParameters.attachmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 添付ファイルをダウンロード
     * @param {WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet(requestParameters: WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGetRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemAttachmentApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsItemIdAttachmentsDownloadFileNameGet(requestParameters.workspaceId, requestParameters.itemId, requestParameters.fileName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペースアイテムの添付ファイル一覧を取得
     * @param {WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGet(requestParameters: WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsGetRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemAttachmentApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsItemIdAttachmentsGet(requestParameters.workspaceId, requestParameters.itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペースアイテムに添付ファイルをアップロード
     * @param {WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPost(requestParameters: WorkspaceItemAttachmentApiApiWorkspacesWorkspaceIdItemsItemIdAttachmentsPostRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemAttachmentApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsItemIdAttachmentsPost(requestParameters.workspaceId, requestParameters.itemId, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkspaceItemPinApi - axios parameter creator
 */
export const WorkspaceItemPinApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ログインユーザーがPINしたアイテム一覧を取得
         * @param {number} [page] ページ番号（1から開始）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersMePinnedItemsGet: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/me/pinned-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペースアイテムからPINを削除
         * @param {number} workspaceId ワークスペースID
         * @param {number} itemId アイテムID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdPinDelete: async (workspaceId: number, itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdPinDelete', 'workspaceId', workspaceId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdPinDelete', 'itemId', itemId)
            const localVarPath = `/api/workspaces/{workspaceId}/items/{itemId}/pin`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペースアイテムにPINを追加
         * @param {number} workspaceId ワークスペースID
         * @param {number} itemId アイテムID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdPinPost: async (workspaceId: number, itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdPinPost', 'workspaceId', workspaceId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdPinPost', 'itemId', itemId)
            const localVarPath = `/api/workspaces/{workspaceId}/items/{itemId}/pin`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkspaceItemPinApi - functional programming interface
 */
export const WorkspaceItemPinApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspaceItemPinApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ログインユーザーがPINしたアイテム一覧を取得
         * @param {number} [page] ページ番号（1から開始）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersMePinnedItemsGet(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceItemDetailResponsePagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersMePinnedItemsGet(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemPinApi.apiUsersMePinnedItemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペースアイテムからPINを削除
         * @param {number} workspaceId ワークスペースID
         * @param {number} itemId アイテムID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsItemIdPinDelete(workspaceId: number, itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsItemIdPinDelete(workspaceId, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemPinApi.apiWorkspacesWorkspaceIdItemsItemIdPinDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペースアイテムにPINを追加
         * @param {number} workspaceId ワークスペースID
         * @param {number} itemId アイテムID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsItemIdPinPost(workspaceId: number, itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsItemIdPinPost(workspaceId, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemPinApi.apiWorkspacesWorkspaceIdItemsItemIdPinPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkspaceItemPinApi - factory interface
 */
export const WorkspaceItemPinApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkspaceItemPinApiFp(configuration)
    return {
        /**
         * 
         * @summary ログインユーザーがPINしたアイテム一覧を取得
         * @param {WorkspaceItemPinApiApiUsersMePinnedItemsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersMePinnedItemsGet(requestParameters: WorkspaceItemPinApiApiUsersMePinnedItemsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceItemDetailResponsePagedResponse> {
            return localVarFp.apiUsersMePinnedItemsGet(requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペースアイテムからPINを削除
         * @param {WorkspaceItemPinApiApiWorkspacesWorkspaceIdItemsItemIdPinDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdPinDelete(requestParameters: WorkspaceItemPinApiApiWorkspacesWorkspaceIdItemsItemIdPinDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceItemResponse> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsItemIdPinDelete(requestParameters.workspaceId, requestParameters.itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペースアイテムにPINを追加
         * @param {WorkspaceItemPinApiApiWorkspacesWorkspaceIdItemsItemIdPinPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdPinPost(requestParameters: WorkspaceItemPinApiApiWorkspacesWorkspaceIdItemsItemIdPinPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceItemResponse> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsItemIdPinPost(requestParameters.workspaceId, requestParameters.itemId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiUsersMePinnedItemsGet operation in WorkspaceItemPinApi.
 */
export interface WorkspaceItemPinApiApiUsersMePinnedItemsGetRequest {
    /**
     * ページ番号（1から開始）
     */
    readonly page?: number
}

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsItemIdPinDelete operation in WorkspaceItemPinApi.
 */
export interface WorkspaceItemPinApiApiWorkspacesWorkspaceIdItemsItemIdPinDeleteRequest {
    /**
     * ワークスペースID
     */
    readonly workspaceId: number

    /**
     * アイテムID
     */
    readonly itemId: number
}

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsItemIdPinPost operation in WorkspaceItemPinApi.
 */
export interface WorkspaceItemPinApiApiWorkspacesWorkspaceIdItemsItemIdPinPostRequest {
    /**
     * ワークスペースID
     */
    readonly workspaceId: number

    /**
     * アイテムID
     */
    readonly itemId: number
}

/**
 * WorkspaceItemPinApi - object-oriented interface
 */
export class WorkspaceItemPinApi extends BaseAPI {
    /**
     * 
     * @summary ログインユーザーがPINしたアイテム一覧を取得
     * @param {WorkspaceItemPinApiApiUsersMePinnedItemsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiUsersMePinnedItemsGet(requestParameters: WorkspaceItemPinApiApiUsersMePinnedItemsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return WorkspaceItemPinApiFp(this.configuration).apiUsersMePinnedItemsGet(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペースアイテムからPINを削除
     * @param {WorkspaceItemPinApiApiWorkspacesWorkspaceIdItemsItemIdPinDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsItemIdPinDelete(requestParameters: WorkspaceItemPinApiApiWorkspacesWorkspaceIdItemsItemIdPinDeleteRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemPinApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsItemIdPinDelete(requestParameters.workspaceId, requestParameters.itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペースアイテムにPINを追加
     * @param {WorkspaceItemPinApiApiWorkspacesWorkspaceIdItemsItemIdPinPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsItemIdPinPost(requestParameters: WorkspaceItemPinApiApiWorkspacesWorkspaceIdItemsItemIdPinPostRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemPinApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsItemIdPinPost(requestParameters.workspaceId, requestParameters.itemId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkspaceItemRelationApi - axios parameter creator
 */
export const WorkspaceItemRelationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ワークスペースアイテムの関連一覧を取得
         * @param {number} workspaceId 
         * @param {number} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdRelationsGet: async (workspaceId: number, itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdRelationsGet', 'workspaceId', workspaceId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdRelationsGet', 'itemId', itemId)
            const localVarPath = `/api/workspaces/{workspaceId}/items/{itemId}/relations`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペースアイテムに関連を追加
         * @param {number} workspaceId 
         * @param {number} itemId 
         * @param {AddWorkspaceItemRelationRequest} [addWorkspaceItemRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdRelationsPost: async (workspaceId: number, itemId: number, addWorkspaceItemRelationRequest?: AddWorkspaceItemRelationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdRelationsPost', 'workspaceId', workspaceId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdRelationsPost', 'itemId', itemId)
            const localVarPath = `/api/workspaces/{workspaceId}/items/{itemId}/relations`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addWorkspaceItemRelationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ワークスペースアイテムの関連を削除
         * @param {number} workspaceId 
         * @param {number} itemId 
         * @param {number} relationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete: async (workspaceId: number, itemId: number, relationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete', 'workspaceId', workspaceId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete', 'itemId', itemId)
            // verify required parameter 'relationId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete', 'relationId', relationId)
            const localVarPath = `/api/workspaces/{workspaceId}/items/{itemId}/relations/{relationId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"relationId"}}`, encodeURIComponent(String(relationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkspaceItemRelationApi - functional programming interface
 */
export const WorkspaceItemRelationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspaceItemRelationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ワークスペースアイテムの関連一覧を取得
         * @param {number} workspaceId 
         * @param {number} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsItemIdRelationsGet(workspaceId: number, itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceItemRelationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsItemIdRelationsGet(workspaceId, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemRelationApi.apiWorkspacesWorkspaceIdItemsItemIdRelationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペースアイテムに関連を追加
         * @param {number} workspaceId 
         * @param {number} itemId 
         * @param {AddWorkspaceItemRelationRequest} [addWorkspaceItemRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsItemIdRelationsPost(workspaceId: number, itemId: number, addWorkspaceItemRelationRequest?: AddWorkspaceItemRelationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddWorkspaceItemRelationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsItemIdRelationsPost(workspaceId, itemId, addWorkspaceItemRelationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemRelationApi.apiWorkspacesWorkspaceIdItemsItemIdRelationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ワークスペースアイテムの関連を削除
         * @param {number} workspaceId 
         * @param {number} itemId 
         * @param {number} relationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete(workspaceId: number, itemId: number, relationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete(workspaceId, itemId, relationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemRelationApi.apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkspaceItemRelationApi - factory interface
 */
export const WorkspaceItemRelationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkspaceItemRelationApiFp(configuration)
    return {
        /**
         * 
         * @summary ワークスペースアイテムの関連一覧を取得
         * @param {WorkspaceItemRelationApiApiWorkspacesWorkspaceIdItemsItemIdRelationsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdRelationsGet(requestParameters: WorkspaceItemRelationApiApiWorkspacesWorkspaceIdItemsItemIdRelationsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceItemRelationsResponse> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsItemIdRelationsGet(requestParameters.workspaceId, requestParameters.itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペースアイテムに関連を追加
         * @param {WorkspaceItemRelationApiApiWorkspacesWorkspaceIdItemsItemIdRelationsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdRelationsPost(requestParameters: WorkspaceItemRelationApiApiWorkspacesWorkspaceIdItemsItemIdRelationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AddWorkspaceItemRelationResponse> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsItemIdRelationsPost(requestParameters.workspaceId, requestParameters.itemId, requestParameters.addWorkspaceItemRelationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ワークスペースアイテムの関連を削除
         * @param {WorkspaceItemRelationApiApiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete(requestParameters: WorkspaceItemRelationApiApiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete(requestParameters.workspaceId, requestParameters.itemId, requestParameters.relationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsItemIdRelationsGet operation in WorkspaceItemRelationApi.
 */
export interface WorkspaceItemRelationApiApiWorkspacesWorkspaceIdItemsItemIdRelationsGetRequest {
    readonly workspaceId: number

    readonly itemId: number
}

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsItemIdRelationsPost operation in WorkspaceItemRelationApi.
 */
export interface WorkspaceItemRelationApiApiWorkspacesWorkspaceIdItemsItemIdRelationsPostRequest {
    readonly workspaceId: number

    readonly itemId: number

    readonly addWorkspaceItemRelationRequest?: AddWorkspaceItemRelationRequest
}

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete operation in WorkspaceItemRelationApi.
 */
export interface WorkspaceItemRelationApiApiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDeleteRequest {
    readonly workspaceId: number

    readonly itemId: number

    readonly relationId: number
}

/**
 * WorkspaceItemRelationApi - object-oriented interface
 */
export class WorkspaceItemRelationApi extends BaseAPI {
    /**
     * 
     * @summary ワークスペースアイテムの関連一覧を取得
     * @param {WorkspaceItemRelationApiApiWorkspacesWorkspaceIdItemsItemIdRelationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsItemIdRelationsGet(requestParameters: WorkspaceItemRelationApiApiWorkspacesWorkspaceIdItemsItemIdRelationsGetRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemRelationApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsItemIdRelationsGet(requestParameters.workspaceId, requestParameters.itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペースアイテムに関連を追加
     * @param {WorkspaceItemRelationApiApiWorkspacesWorkspaceIdItemsItemIdRelationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsItemIdRelationsPost(requestParameters: WorkspaceItemRelationApiApiWorkspacesWorkspaceIdItemsItemIdRelationsPostRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemRelationApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsItemIdRelationsPost(requestParameters.workspaceId, requestParameters.itemId, requestParameters.addWorkspaceItemRelationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ワークスペースアイテムの関連を削除
     * @param {WorkspaceItemRelationApiApiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete(requestParameters: WorkspaceItemRelationApiApiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemRelationApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsItemIdRelationsRelationIdDelete(requestParameters.workspaceId, requestParameters.itemId, requestParameters.relationId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkspaceItemTagApi - axios parameter creator
 */
export const WorkspaceItemTagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ワークスペースアイテムのタグを一括設定
         * @param {number} workspaceId ワークスペースID
         * @param {number} itemId アイテムID
         * @param {SetTagsToItemRequest} [setTagsToItemRequest] タグ一括設定リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdTagsPut: async (workspaceId: number, itemId: number, setTagsToItemRequest?: SetTagsToItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdTagsPut', 'workspaceId', workspaceId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdItemsItemIdTagsPut', 'itemId', itemId)
            const localVarPath = `/api/workspaces/{workspaceId}/items/{itemId}/tags`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setTagsToItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkspaceItemTagApi - functional programming interface
 */
export const WorkspaceItemTagApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspaceItemTagApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ワークスペースアイテムのタグを一括設定
         * @param {number} workspaceId ワークスペースID
         * @param {number} itemId アイテムID
         * @param {SetTagsToItemRequest} [setTagsToItemRequest] タグ一括設定リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdItemsItemIdTagsPut(workspaceId: number, itemId: number, setTagsToItemRequest?: SetTagsToItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdItemsItemIdTagsPut(workspaceId, itemId, setTagsToItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceItemTagApi.apiWorkspacesWorkspaceIdItemsItemIdTagsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkspaceItemTagApi - factory interface
 */
export const WorkspaceItemTagApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkspaceItemTagApiFp(configuration)
    return {
        /**
         * 
         * @summary ワークスペースアイテムのタグを一括設定
         * @param {WorkspaceItemTagApiApiWorkspacesWorkspaceIdItemsItemIdTagsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdItemsItemIdTagsPut(requestParameters: WorkspaceItemTagApiApiWorkspacesWorkspaceIdItemsItemIdTagsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkspaceItemResponse> {
            return localVarFp.apiWorkspacesWorkspaceIdItemsItemIdTagsPut(requestParameters.workspaceId, requestParameters.itemId, requestParameters.setTagsToItemRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiWorkspacesWorkspaceIdItemsItemIdTagsPut operation in WorkspaceItemTagApi.
 */
export interface WorkspaceItemTagApiApiWorkspacesWorkspaceIdItemsItemIdTagsPutRequest {
    /**
     * ワークスペースID
     */
    readonly workspaceId: number

    /**
     * アイテムID
     */
    readonly itemId: number

    /**
     * タグ一括設定リクエスト
     */
    readonly setTagsToItemRequest?: SetTagsToItemRequest
}

/**
 * WorkspaceItemTagApi - object-oriented interface
 */
export class WorkspaceItemTagApi extends BaseAPI {
    /**
     * 
     * @summary ワークスペースアイテムのタグを一括設定
     * @param {WorkspaceItemTagApiApiWorkspacesWorkspaceIdItemsItemIdTagsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiWorkspacesWorkspaceIdItemsItemIdTagsPut(requestParameters: WorkspaceItemTagApiApiWorkspacesWorkspaceIdItemsItemIdTagsPutRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceItemTagApiFp(this.configuration).apiWorkspacesWorkspaceIdItemsItemIdTagsPut(requestParameters.workspaceId, requestParameters.itemId, requestParameters.setTagsToItemRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



