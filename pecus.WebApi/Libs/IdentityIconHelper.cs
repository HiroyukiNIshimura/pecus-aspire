using System.Security.Cryptography;
using System.Text;

namespace Pecus.Libs;

/// <summary>
/// ユーザーのアイデンティティアイコンを取得するヘルパー
/// </summary>
public static class IdentityIconHelper
{
    /// <summary>
    /// アイデンティティアイコンのタイプ
    /// </summary>
    public enum IconType
    {
        /// <summary>
        /// Gravatarを使用
        /// </summary>
        Gravatar,

        /// <summary>
        /// ユーザーがアップロードしたアイコン
        /// </summary>
        UserAvatar,

        /// <summary>
        /// 自動生成されたアイデンティティアイコン
        /// </summary>
        AutoGenerated,
    }

    /// <summary>
    /// GravatarのURLを生成
    /// </summary>
    /// <param name="email">メールアドレス</param>
    /// <param name="size">画像サイズ（ピクセル）</param>
    /// /// <returns>GravatarのURL</returns>
    public static string GetGravatarUrl(string email, int size = 64)
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            return string.Empty;
        }

        // メールアドレスを小文字に変換してMD5ハッシュを生成
        var emailHash = GetMd5Hash(email.Trim().ToLowerInvariant());

        return $"https://www.gravatar.com/avatar/{emailHash}?s={size}";
    }

    /// <summary>
    /// ユーザーアップロードアイコンのURLを取得
    /// </summary>
    /// <param name="userId">ユーザーID</param>
    /// <param name="avatarPath">アバターの仮想パス</param>
    /// <param name="baseUrl">ベースURL（オプション）</param>
    /// <returns>アイコンのURL</returns>
    public static string GetUserAvatarUrl(int userId, string? avatarPath, string? baseUrl = null)
    {
        if (string.IsNullOrWhiteSpace(avatarPath))
        {
            return string.Empty;
        }

        // TODO: 実際のストレージパスに応じて実装を調整
        // 例: Azure Blob Storage, AWS S3, ローカルファイルシステムなど
        if (!string.IsNullOrWhiteSpace(baseUrl))
        {
            return $"{baseUrl.TrimEnd('/')}/{avatarPath.TrimStart('/')}";
        }

        return $"/avatars/{userId}/{avatarPath}";
    }

    /// <summary>
    /// 自動生成されたアイデンティティアイコンのURLを取得
    /// </summary>
    /// <param name="userId">ユーザーID</param>
    /// <param name="username">ユーザー名</param>
    /// <param name="size">画像サイズ（ピクセル）</param>
    /// <returns>自動生成アイコンのURL</returns>
    public static string GetAutoGeneratedIconUrl(int userId, string username, int size = 200)
    {
        // TODO: 実際の自動生成アイコンサービスに応じて実装を調整
        // オプション:
        // 1. DiceBear API: https://dicebear.com/
        // 2. UI Avatars: https://ui-avatars.com/
        // 3. BoringAvatars: https://boringavatars.com/
        // 4. 独自実装のアイコン生成サービス

        // スタブ実装: UI Avatarsを使用
        var encodedName = Uri.EscapeDataString(username);
        return $"https://ui-avatars.com/api/?name={encodedName}&size={size}&rounded=true";
    }

    /// <summary>
    /// ユーザーのアイデンティティアイコンURLを取得
    /// </summary>
    /// <param name="iconType">アイコンタイプを示す文字列（"gravatar", "user-avatar", "auto-generated"）</param>
    /// <param name="userId">ユーザーID</param>
    /// <param name="username">ユーザー名</param>
    /// <param name="email">メールアドレス</param>
    /// <param name="avatarPath">アバターパス（user-avatarの場合）</param>
    /// <param name="size">画像サイズ</param>
    /// <returns>アイコンのURL</returns>
    public static string GetIdentityIconUrl(
        string? iconType,
        int userId,
        string username,
        string email,
        string? avatarPath = null,
        int size = 200
    ) =>
        iconType?.ToLowerInvariant() switch
        {
            "gravatar" => GetGravatarUrl(email, size),
            "user-avatar" => GetUserAvatarUrl(userId, avatarPath),
            "auto-generated" => GetAutoGeneratedIconUrl(userId, username, size),
            _ => GetAutoGeneratedIconUrl(userId, username, size), // デフォルトは自動生成
        };

    /// <summary>
    /// MD5ハッシュを生成
    /// </summary>
    private static string GetMd5Hash(string input)
    {
        using var md5 = MD5.Create();
        var inputBytes = Encoding.UTF8.GetBytes(input);
        var hashBytes = md5.ComputeHash(inputBytes);

        return Convert.ToHexString(hashBytes).ToLowerInvariant();
    }

    /// <summary>
    /// デフォルトのアイコンタイプを取得
    /// </summary>
    /// <returns>デフォルトのアイコンタイプ</returns>
    public static string GetDefaultIconType() => "auto-generated";

    /// <summary>
    /// アイコンタイプが有効かどうかを検証
    /// </summary>
    /// <param name="iconType">アイコンタイプ</param>
    /// <returns>有効な場合はtrue</returns>
    public static bool IsValidIconType(string? iconType)
    {
        if (string.IsNullOrWhiteSpace(iconType))
        {
            return false;
        }

        var validTypes = new[] { "gravatar", "user-avatar", "auto-generated" };
        return validTypes.Contains(iconType.ToLowerInvariant());
    }
}
